name: Nightly Database Backup

on:
  workflow_dispatch:
    inputs:
      triggeredBy:
        description: "Source that triggered the backup"
        required: false
      scheduleTimestamp:
        description: "ISO8601 timestamp passed from scheduler"
        required: false

permissions:
  contents: read

env:
  SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
  DATABASE_URL: ${{ secrets.SUPABASE_DB_URL }}
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
  SUPABASE_STORAGE_BUCKET: ${{ secrets.SUPABASE_STORAGE_BUCKET }}
  BACKUP_PASSPHRASE: ${{ secrets.BACKUP_PASSPHRASE }}
  REMOTE_BACKUP_PREFIX: ${{ secrets.REMOTE_BACKUP_PREFIX }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
  AWS_S3_PREFIX: ${{ secrets.AWS_S3_PREFIX }}

jobs:
  run-backup:
    name: Run backup script
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install PostgreSQL client utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Install Supabase CLI (optional)
        if: env.SUPABASE_PROJECT_REF != '' && env.SUPABASE_ACCESS_TOKEN != ''
        run: |
          npm install --global supabase@1
          supabase login --token "$SUPABASE_ACCESS_TOKEN"

      - name: Install AWS CLI (optional)
        if: env.AWS_ACCESS_KEY_ID != '' && env.AWS_SECRET_ACCESS_KEY != ''
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Ensure backup directory exists
        run: mkdir -p backups

      - name: Run backup script
        env:
          BACKUP_ROOT: ${{ github.workspace }}/backups
        run: bash scripts/backup_db.sh "$BACKUP_ROOT"

      - name: Upload backup logs (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: latest-backup-metadata
          path: |
            backups/**/db.dump*.sha256
            backups/**/storage*.sha256
          if-no-files-found: ignore

