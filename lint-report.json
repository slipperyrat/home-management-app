[{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\admin\\feature-flags\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getAvailableFeatures' is defined but never used.","line":6,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getUpgradeRequiredFeatures' is defined but never used.","line":6,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":76},{"ruleId":"no-useless-return","severity":1,"message":"Unnecessary return statement.","line":80,"column":7,"nodeType":"ReturnStatement","messageId":"unnecessaryReturn","endLine":80,"endColumn":14,"fix":{"range":[2007,2271],"text":"() => {\r\n    if (!isLoaded) return;\r\n\r\n    if (!isSignedIn) {\r\n      router.push('/sign-in');\r\n      \r\n    }\r\n\r\n    // Check if user is admin (you might want to add proper admin check)\r\n    // For now, we'll allow any signed-in user to access this page\r\n  }"}},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":107,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":107,"endColumn":49},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":110,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":110,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useAuth } from '@clerk/nextjs';\r\nimport { useRouter } from 'next/navigation';\r\nimport { canAccessFeature, getAvailableFeatures, getUpgradeRequiredFeatures, FeatureKey, UserPlan } from '@/lib/server/canAccessFeature';\r\n\r\ninterface FeatureFlag {\r\n  key: FeatureKey;\r\n  name: string;\r\n  description: string;\r\n  requiredPlan: UserPlan;\r\n  enabled: boolean;\r\n}\r\n\r\nconst FEATURE_FLAGS: FeatureFlag[] = [\r\n  {\r\n    key: 'brand_assets_v1',\r\n    name: 'Brand Assets v1',\r\n    description: 'New branding and visual assets',\r\n    requiredPlan: 'free',\r\n    enabled: false,\r\n  },\r\n  {\r\n    key: 'onboarding_tour',\r\n    name: 'Onboarding Tour',\r\n    description: 'Interactive tutorial for new users',\r\n    requiredPlan: 'free',\r\n    enabled: false,\r\n  },\r\n  {\r\n    key: 'consent_optout',\r\n    name: 'Consent Opt-out',\r\n    description: 'Allow users to opt out of data collection',\r\n    requiredPlan: 'free',\r\n    enabled: false,\r\n  },\r\n  {\r\n    key: 'projects_beta',\r\n    name: 'Projects Beta',\r\n    description: 'Project management features',\r\n    requiredPlan: 'pro',\r\n    enabled: false,\r\n  },\r\n  {\r\n    key: 'finance_enabled',\r\n    name: 'Finance Features',\r\n    description: 'Bill management and budget tracking',\r\n    requiredPlan: 'pro',\r\n    enabled: false,\r\n  },\r\n  {\r\n    key: 'notifications_minimal',\r\n    name: 'Minimal Notifications',\r\n    description: 'Basic push notification system',\r\n    requiredPlan: 'pro',\r\n    enabled: false,\r\n  },\r\n  {\r\n    key: 'ask_box_enabled',\r\n    name: 'Ask Box',\r\n    description: 'AI-powered question answering',\r\n    requiredPlan: 'pro',\r\n    enabled: false,\r\n  },\r\n];\r\n\r\nexport default function FeatureFlagsPage() {\r\n  const { isSignedIn, isLoaded } = useAuth();\r\n  const router = useRouter();\r\n  const [selectedPlan, setSelectedPlan] = useState<UserPlan>('free');\r\n  const [flags, setFlags] = useState<FeatureFlag[]>(FEATURE_FLAGS);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!isLoaded) return;\r\n\r\n    if (!isSignedIn) {\r\n      router.push('/sign-in');\r\n      return;\r\n    }\r\n\r\n    // Check if user is admin (you might want to add proper admin check)\r\n    // For now, we'll allow any signed-in user to access this page\r\n  }, [isLoaded, isSignedIn, router]);\r\n\r\n  const handlePlanChange = (plan: UserPlan) => {\r\n    setSelectedPlan(plan);\r\n    setFlags(prev => prev.map(flag => ({\r\n      ...flag,\r\n      enabled: canAccessFeature(plan, flag.key),\r\n    })));\r\n  };\r\n\r\n  const toggleFlag = (key: FeatureKey) => {\r\n    setFlags(prev => prev.map(flag => \r\n      flag.key === key ? { ...flag, enabled: !flag.enabled } : flag\r\n    ));\r\n  };\r\n\r\n  const saveFlags = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // In a real implementation, you'd save these to a database\r\n      // For now, we'll just simulate a save\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      alert('Feature flags saved successfully!');\r\n    } catch (error) {\r\n      console.error('Error saving flags:', error);\r\n      alert('Failed to save feature flags');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (!isLoaded) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\" />\r\n          <p className=\"text-gray-600\">Loading...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!isSignedIn) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\r\n      <div className=\"max-w-6xl mx-auto\">\r\n        <div className=\"bg-white shadow rounded-lg p-6\">\r\n          <div className=\"text-center mb-8\">\r\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\r\n              Feature Flags Dashboard\r\n            </h1>\r\n            <p className=\"text-gray-600\">\r\n              Manage feature flags and test different plan configurations\r\n            </p>\r\n          </div>\r\n\r\n          {/* Plan Selector */}\r\n          <div className=\"mb-8\">\r\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Test Plan</h2>\r\n            <div className=\"flex space-x-4\">\r\n              {(['free', 'pro', 'pro_plus'] as UserPlan[]).map((plan) => (\r\n                <button\r\n                  key={plan}\r\n                  onClick={() => handlePlanChange(plan)}\r\n                  className={`px-4 py-2 rounded-md font-medium transition-colors ${\r\n                    selectedPlan === plan\r\n                      ? 'bg-blue-600 text-white'\r\n                      : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n                  }`}\r\n                >\r\n                  {plan === 'pro_plus' ? 'Pro+' : plan === 'pro' ? 'Pro' : 'Free'}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Feature Flags */}\r\n          <div className=\"mb-8\">\r\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Feature Flags</h2>\r\n            <div className=\"space-y-4\">\r\n              {flags.map((flag) => (\r\n                <div key={flag.key} className=\"border rounded-lg p-4\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"flex-1\">\r\n                      <div className=\"flex items-center space-x-3\">\r\n                        <h3 className=\"text-lg font-medium text-gray-900\">{flag.name}</h3>\r\n                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\r\n                          flag.requiredPlan === 'free' \r\n                            ? 'bg-green-100 text-green-800'\r\n                            : flag.requiredPlan === 'pro'\r\n                            ? 'bg-blue-100 text-blue-800'\r\n                            : 'bg-purple-100 text-purple-800'\r\n                        }`}>\r\n                          {flag.requiredPlan === 'pro_plus' ? 'Pro+' : flag.requiredPlan === 'pro' ? 'Pro' : 'Free'}\r\n                        </span>\r\n                      </div>\r\n                      <p className=\"text-sm text-gray-600 mt-1\">{flag.description}</p>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-3\">\r\n                      <span className={`text-sm ${\r\n                        flag.enabled ? 'text-green-600' : 'text-gray-400'\r\n                      }`}>\r\n                        {flag.enabled ? 'Enabled' : 'Disabled'}\r\n                      </span>\r\n                      <button\r\n                        onClick={() => toggleFlag(flag.key)}\r\n                        className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\r\n                          flag.enabled ? 'bg-blue-600' : 'bg-gray-200'\r\n                        }`}\r\n                      >\r\n                        <span\r\n                          className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\r\n                            flag.enabled ? 'translate-x-6' : 'translate-x-1'\r\n                          }`}\r\n                        />\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Save Button */}\r\n          <div className=\"flex justify-end\">\r\n            <button\r\n              onClick={saveFlags}\r\n              disabled={loading}\r\n              className={`px-6 py-2 rounded-md font-medium transition-colors ${\r\n                loading\r\n                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n                  : 'bg-blue-600 text-white hover:bg-blue-700'\r\n              }`}\r\n            >\r\n              {loading ? 'Saving...' : 'Save Changes'}\r\n            </button>\r\n          </div>\r\n\r\n          {/* Back Button */}\r\n          <div className=\"mt-8 text-center\">\r\n            <button \r\n              onClick={() => router.push('/dashboard')}\r\n              className=\"bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700\"\r\n            >\r\n              Back to Dashboard\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\ai-email-dashboard\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[327,330],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[327,330],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[537,540],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[537,540],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[824,827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[824,827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1363,1366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1363,1366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":82,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":82,"endColumn":18,"suggestions":[{"fix":{"range":[2275,2315],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":103,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":103,"endColumn":20,"suggestions":[{"fix":{"range":[3043,3108],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":111,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":111,"endColumn":20,"suggestions":[{"fix":{"range":[3407,3476],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":115,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":115,"endColumn":18,"suggestions":[{"fix":{"range":[3555,3592],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":326,"column":28,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":330,"endColumn":28,"fix":{"range":[12108,12335],"text":"email.error_message ? <span className=\"text-red-600 text-sm\" title={email.error_message}>\r\n                              ⚠️ Error\r\n                            </span> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":376,"column":32,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":378,"endColumn":32,"fix":{"range":[15217,15424],"text":"item.receipt_items && item.receipt_items.length > 0 ? <p className=\"text-sm\"><strong>Items:</strong> {item.receipt_items.length} items</p> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":396,"column":28,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":398,"endColumn":28,"fix":{"range":[16385,16527],"text":"item.user_confirmed ? <span className=\"text-green-600 text-sm\">✓ Confirmed</span> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":399,"column":28,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":401,"endColumn":28,"fix":{"range":[16557,16697],"text":"item.user_modified ? <span className=\"text-blue-600 text-sm\">✏️ Modified</span> : null"}},{"ruleId":"react/jsx-no-bind","severity":1,"message":"JSX props should not use functions","line":426,"column":32,"nodeType":"JSXAttribute","messageId":"func","endLine":426,"endColumn":61},{"ruleId":"react/jsx-no-bind","severity":1,"message":"JSX props should not use functions","line":442,"column":32,"nodeType":"JSXAttribute","messageId":"func","endLine":442,"endColumn":61},{"ruleId":"react/jsx-no-bind","severity":1,"message":"JSX props should not use functions","line":458,"column":13,"nodeType":"JSXAttribute","messageId":"func","endLine":458,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":4,"source":"'use client';\r\n\r\nimport { useAuth } from '@clerk/nextjs';\r\nimport { useEffect, useState } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { SuggestionCard } from '@/components/ai/SuggestionCard';\r\n\r\ninterface ParsedItem {\r\n  id: string;\r\n  item_type: string;\r\n  confidence_score: number;\r\n  extracted_data: any;\r\n  bill_amount?: number;\r\n  bill_due_date?: string;\r\n  bill_provider?: string;\r\n  bill_category?: string;\r\n  receipt_total?: number;\r\n  receipt_date?: string;\r\n  receipt_store?: string;\r\n  receipt_items?: any[];\r\n  event_title?: string;\r\n  event_date?: string;\r\n  event_location?: string;\r\n  event_description?: string;\r\n  user_confirmed: boolean;\r\n  user_modified: boolean;\r\n  created_at: string;\r\n}\r\n\r\ninterface AISuggestion {\r\n  id: string;\r\n  suggestion_type: string;\r\n  suggestion_data: any;\r\n  ai_reasoning: string;\r\n  user_feedback: 'accepted' | 'rejected' | 'modified' | 'pending' | 'completed' | 'corrected' | 'ignored';\r\n  user_notes?: string;\r\n  created_at: string;\r\n  parsed_item?: {\r\n    item_type: string;\r\n    confidence_score: number;\r\n    review_status: string;\r\n    review_reason: string;\r\n  };\r\n}\r\n\r\ninterface EmailQueueEntry {\r\n  id: string;\r\n  email_subject: string;\r\n  email_from: string;\r\n  email_date: string;\r\n  processing_status: 'pending' | 'processing' | 'completed' | 'failed';\r\n  ai_analysis_result?: any;\r\n  error_message?: string;\r\n  created_at: string;\r\n  processed_at?: string;\r\n}\r\n\r\nexport default function AIEmailDashboard() {\r\n  const { isSignedIn, isLoaded } = useAuth();\r\n  const router = useRouter();\r\n  \r\n  const [emailQueue, setEmailQueue] = useState<EmailQueueEntry[]>([]);\r\n  const [parsedItems, setParsedItems] = useState<ParsedItem[]>([]);\r\n  const [pendingSuggestions, setPendingSuggestions] = useState<AISuggestion[]>([]);\r\n  const [processedSuggestions, setProcessedSuggestions] = useState<AISuggestion[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [activeTab, setActiveTab] = useState<'queue' | 'parsed' | 'suggestions'>('queue');\r\n\r\n  useEffect(() => {\r\n    if (!isLoaded) return;\r\n\r\n    if (!isSignedIn) {\r\n      router.push('/sign-in');\r\n      return;\r\n    }\r\n\r\n    fetchData();\r\n  }, [isLoaded, isSignedIn, router]);\r\n\r\n  async function fetchData() {\r\n    try {\r\n      console.log('🔄 Starting fetchData...');\r\n      setLoading(true);\r\n      \r\n      // Fetch email queue\r\n      const queueResponse = await fetch('/api/ai/email-queue');\r\n      if (queueResponse.ok) {\r\n        const queueData = await queueResponse.json();\r\n        setEmailQueue(queueData.data || []);\r\n      }\r\n\r\n      // Fetch parsed items\r\n      const itemsResponse = await fetch('/api/ai/parsed-items');\r\n      if (itemsResponse.ok) {\r\n        const itemsData = await itemsResponse.json();\r\n        setParsedItems(itemsData.data || []);\r\n      }\r\n\r\n      // Fetch pending suggestions\r\n      const pendingResponse = await fetch('/api/ai/suggestions?status=pending');\r\n      if (pendingResponse.ok) {\r\n        const pendingData = await pendingResponse.json();\r\n        console.log('🔍 Fetched pending suggestions:', pendingData.data);\r\n        setPendingSuggestions(pendingData.data || []);\r\n      }\r\n\r\n      // Fetch processed suggestions\r\n      const processedResponse = await fetch('/api/ai/suggestions?status=processed');\r\n      if (processedResponse.ok) {\r\n        const processedData = await processedResponse.json();\r\n        console.log('🔍 Fetched processed suggestions:', processedData.data);\r\n        setProcessedSuggestions(processedData.data || []);\r\n      }\r\n\r\n      console.log('✅ fetchData completed');\r\n\r\n    } catch (error) {\r\n      console.error('Error fetching AI email data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  function getStatusColor(status: string) {\r\n    switch (status) {\r\n      case 'completed': return 'text-green-600 bg-green-100';\r\n      case 'processing': return 'text-blue-600 bg-blue-100';\r\n      case 'failed': return 'text-red-600 bg-red-100';\r\n      case 'pending': return 'text-yellow-600 bg-yellow-100';\r\n      default: return 'text-gray-600 bg-gray-100';\r\n    }\r\n  }\r\n\r\n  function getItemTypeIcon(itemType: string) {\r\n    switch (itemType) {\r\n      case 'bill': return '💰';\r\n      case 'receipt': return '🧾';\r\n      case 'event': return '📅';\r\n      case 'appointment': return '🏥';\r\n      case 'delivery': return '📦';\r\n      default: return '📧';\r\n    }\r\n  }\r\n\r\n\r\n\r\n  function formatDate(dateString: string) {\r\n    return new Date(dateString).toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  }\r\n\r\n  function formatCurrency(amount: number) {\r\n    return new Intl.NumberFormat('en-AU', {\r\n      style: 'currency',\r\n      currency: 'AUD'\r\n    }).format(amount);\r\n  }\r\n\r\n  if (!isLoaded || loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\" />\r\n          <p className=\"text-gray-600\">Loading AI Email Dashboard...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!isSignedIn) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n        {/* Header */}\r\n        <div className=\"mb-8\">\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <button\r\n              onClick={() => router.back()}\r\n              className=\"text-blue-600 hover:text-blue-700 flex items-center\"\r\n            >\r\n              ← Back\r\n            </button>\r\n            \r\n            <a\r\n              href=\"/ai-learning-dashboard\"\r\n              className=\"inline-flex items-center px-4 py-2 bg-purple-600 text-white text-sm font-medium rounded-md hover:bg-purple-700 transition-colors\"\r\n            >\r\n              🧠 View AI Learning Insights\r\n            </a>\r\n          </div>\r\n          \r\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\r\n            🤖 AI Email Processing Dashboard\r\n          </h1>\r\n          <p className=\"text-gray-600\">\r\n            Monitor AI-powered email parsing, extracted data, and smart suggestions\r\n          </p>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\r\n          <div className=\"bg-white rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\r\n                <span className=\"text-2xl\">📧</span>\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-600\">Total Emails</p>\r\n                <p className=\"text-2xl font-bold text-gray-900\">{emailQueue.length}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"p-2 bg-green-100 rounded-lg\">\r\n                <span className=\"text-2xl\">✅</span>\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-600\">Completed</p>\r\n                <p className=\"text-2xl font-bold text-gray-900\">\r\n                  {emailQueue.filter(e => e.processing_status === 'completed').length}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"p-2 bg-purple-100 rounded-lg\">\r\n                <span className=\"text-2xl\">🔍</span>\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-600\">Items Extracted</p>\r\n                <p className=\"text-2xl font-bold text-gray-900\">{parsedItems.length}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n                     <div className=\"bg-white rounded-lg shadow p-6\">\r\n             <div className=\"flex items-center\">\r\n               <div className=\"p-2 bg-yellow-100 rounded-lg\">\r\n                 <span className=\"text-2xl\">💡</span>\r\n               </div>\r\n               <div className=\"ml-4\">\r\n                 <p className=\"text-sm font-medium text-gray-600\">AI Suggestions</p>\r\n                 <p className=\"text-2xl font-bold text-gray-900\">{pendingSuggestions.length + processedSuggestions.length}</p>\r\n                 <p className=\"text-xs text-gray-500\">\r\n                   {pendingSuggestions.length} pending\r\n                 </p>\r\n               </div>\r\n             </div>\r\n           </div>\r\n        </div>\r\n\r\n        {/* Tab Navigation */}\r\n        <div className=\"bg-white rounded-lg shadow mb-6\">\r\n          <div className=\"border-b border-gray-200\">\r\n            <nav className=\"-mb-px flex space-x-8 px-6\">\r\n              <button\r\n                onClick={() => setActiveTab('queue')}\r\n                className={`py-4 px-1 border-b-2 font-medium text-sm ${\r\n                  activeTab === 'queue'\r\n                    ? 'border-blue-500 text-blue-600'\r\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\r\n                }`}\r\n              >\r\n                Email Queue ({emailQueue.length})\r\n              </button>\r\n              <button\r\n                onClick={() => setActiveTab('parsed')}\r\n                className={`py-4 px-1 border-b-2 font-medium text-sm ${\r\n                  activeTab === 'parsed'\r\n                    ? 'border-blue-500 text-blue-600'\r\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\r\n                }`}\r\n              >\r\n                Parsed Items ({parsedItems.length})\r\n              </button>\r\n                             <button\r\n                 onClick={() => setActiveTab('suggestions')}\r\n                 className={`py-4 px-1 border-b-2 font-medium text-sm ${\r\n                   activeTab === 'suggestions'\r\n                     ? 'border-blue-500 text-blue-600'\r\n                     : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\r\n                 }`}\r\n               >\r\n                 AI Suggestions ({pendingSuggestions.length + processedSuggestions.length})\r\n                 {pendingSuggestions.length > 0 && (\r\n                   <span className=\"ml-2 bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full text-xs\">\r\n                     {pendingSuggestions.length} pending\r\n                   </span>\r\n                 )}\r\n               </button>\r\n            </nav>\r\n          </div>\r\n\r\n          {/* Tab Content */}\r\n          <div className=\"p-6\">\r\n            {activeTab === 'queue' && (\r\n              <div className=\"space-y-4\">\r\n                <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Email Processing Queue</h3>\r\n                {emailQueue.length === 0 ? (\r\n                  <p className=\"text-gray-500 text-center py-8\">No emails in queue</p>\r\n                ) : (\r\n                  emailQueue.map((email) => (\r\n                    <div key={email.id} className=\"border rounded-lg p-4 hover:bg-gray-50\">\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div className=\"flex-1\">\r\n                          <h4 className=\"font-medium text-gray-900\">{email.email_subject}</h4>\r\n                          <p className=\"text-sm text-gray-600\">From: {email.email_from}</p>\r\n                          <p className=\"text-sm text-gray-500\">{formatDate(email.email_date)}</p>\r\n                        </div>\r\n                        <div className=\"flex items-center space-x-3\">\r\n                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(email.processing_status)}`}>\r\n                            {email.processing_status}\r\n                          </span>\r\n                          {email.error_message && (\r\n                            <span className=\"text-red-600 text-sm\" title={email.error_message}>\r\n                              ⚠️ Error\r\n                            </span>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                )}\r\n              </div>\r\n            )}\r\n\r\n            {activeTab === 'parsed' && (\r\n              <div className=\"space-y-4\">\r\n                <h3 className=\"text-lg font-medium text-gray-900 mb-4\">AI Extracted Items</h3>\r\n                {parsedItems.length === 0 ? (\r\n                  <p className=\"text-gray-500 text-center py-8\">No items extracted yet</p>\r\n                ) : (\r\n                  parsedItems.map((item) => (\r\n                    <div key={item.id} className=\"border rounded-lg p-4 hover:bg-gray-50\">\r\n                      <div className=\"flex items-start justify-between\">\r\n                        <div className=\"flex-1\">\r\n                          <div className=\"flex items-center space-x-2 mb-2\">\r\n                            <span className=\"text-2xl\">{getItemTypeIcon(item.item_type)}</span>\r\n                            <h4 className=\"font-medium text-gray-900 capitalize\">{item.item_type}</h4>\r\n                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n                              item.confidence_score >= 0.8 ? 'bg-green-100 text-green-800' :\r\n                              item.confidence_score >= 0.6 ? 'bg-yellow-100 text-yellow-800' :\r\n                              'bg-red-100 text-red-800'\r\n                            }`}>\r\n                              {Math.round(item.confidence_score * 100)}% confidence\r\n                            </span>\r\n                          </div>\r\n                          \r\n                          {/* Display item-specific data */}\r\n                          {item.item_type === 'bill' && (\r\n                            <div className=\"space-y-1\">\r\n                              <p className=\"text-sm\"><strong>Provider:</strong> {item.bill_provider}</p>\r\n                              <p className=\"text-sm\"><strong>Amount:</strong> {item.bill_amount ? formatCurrency(item.bill_amount) : 'N/A'}</p>\r\n                              <p className=\"text-sm\"><strong>Due Date:</strong> {item.bill_due_date || 'N/A'}</p>\r\n                              <p className=\"text-sm\"><strong>Category:</strong> {item.bill_category || 'N/A'}</p>\r\n                            </div>\r\n                          )}\r\n                          \r\n                          {item.item_type === 'receipt' && (\r\n                            <div className=\"space-y-1\">\r\n                              <p className=\"text-sm\"><strong>Store:</strong> {item.receipt_store}</p>\r\n                              <p className=\"text-sm\"><strong>Total:</strong> {item.receipt_total ? formatCurrency(item.receipt_total) : 'N/A'}</p>\r\n                              <p className=\"text-sm\"><strong>Date:</strong> {item.receipt_date || 'N/A'}</p>\r\n                              {item.receipt_items && item.receipt_items.length > 0 && (\r\n                                <p className=\"text-sm\"><strong>Items:</strong> {item.receipt_items.length} items</p>\r\n                              )}\r\n                            </div>\r\n                          )}\r\n                          \r\n                          {item.item_type === 'event' && (\r\n                            <div className=\"space-y-1\">\r\n                              <p className=\"text-sm\"><strong>Title:</strong> {item.event_title}</p>\r\n                              <p className=\"text-sm\"><strong>Date:</strong> {item.event_date || 'N/A'}</p>\r\n                              <p className=\"text-sm\"><strong>Location:</strong> {item.event_location || 'N/A'}</p>\r\n                            </div>\r\n                          )}\r\n                          \r\n                          <p className=\"text-xs text-gray-500 mt-2\">\r\n                            Extracted: {formatDate(item.created_at)}\r\n                          </p>\r\n                        </div>\r\n                        \r\n                        <div className=\"flex items-center space-x-2\">\r\n                          {item.user_confirmed && (\r\n                            <span className=\"text-green-600 text-sm\">✓ Confirmed</span>\r\n                          )}\r\n                          {item.user_modified && (\r\n                            <span className=\"text-blue-600 text-sm\">✏️ Modified</span>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                )}\r\n              </div>\r\n            )}\r\n\r\n                         {activeTab === 'suggestions' && (\r\n               <div className=\"space-y-4\">\r\n                 <h3 className=\"text-lg font-medium text-gray-900 mb-4\">AI Suggestions</h3>\r\n                 {pendingSuggestions.length === 0 && processedSuggestions.length === 0 ? (\r\n                   <p className=\"text-gray-500 text-center py-8\">No AI suggestions yet</p>\r\n                 ) : (\r\n                   <div className=\"space-y-4\">\r\n                     {/* Pending Suggestions */}\r\n                     {pendingSuggestions.length > 0 && (\r\n                       <div>\r\n                         <h4 className=\"text-md font-medium text-gray-700 mb-3\">Pending Actions</h4>\r\n                         <div className=\"grid gap-4\">\r\n                           {pendingSuggestions.map((suggestion) => (\r\n                             <SuggestionCard\r\n                               key={suggestion.id}\r\n                               suggestion={suggestion}\r\n                               onCorrectionSaved={fetchData}\r\n                             />\r\n                           ))}\r\n                         </div>\r\n                       </div>\r\n                     )}\r\n\r\n                     {/* Completed/Processed Suggestions */}\r\n                     {processedSuggestions.length > 0 && (\r\n                       <div>\r\n                         <h4 className=\"text-md font-medium text-gray-700 mb-3\">Processed Suggestions</h4>\r\n                         <div className=\"grid gap-4\">\r\n                           {processedSuggestions.map((suggestion) => (\r\n                             <SuggestionCard\r\n                               key={suggestion.id}\r\n                               suggestion={suggestion}\r\n                               onCorrectionSaved={fetchData}\r\n                             />\r\n                           ))}\r\n                         </div>\r\n                       </div>\r\n                     )}\r\n                   </div>\r\n                 )}\r\n               </div>\r\n             )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Action Buttons */}\r\n        <div className=\"text-center space-x-4\">\r\n          <button\r\n            onClick={fetchData}\r\n            className=\"bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700\"\r\n          >\r\n            Refresh Data\r\n          </button>\r\n          \r\n          <a\r\n            href=\"/ai-email-dashboard/test-email\"\r\n            className=\"inline-block bg-green-600 text-white px-6 py-2 rounded-md hover:bg-green-700\"\r\n          >\r\n            🧪 Test Email Processing\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\ai-email-dashboard\\test-email\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[520,523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[520,523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-useless-return","severity":1,"message":"Unnecessary return statement.","line":26,"column":7,"nodeType":"ReturnStatement","messageId":"unnecessaryReturn","endLine":26,"endColumn":14,"fix":{"range":[607,727],"text":"() => {\r\n    if (!isLoaded) return;\r\n\r\n    if (!isSignedIn) {\r\n      router.push('/sign-in');\r\n      \r\n    }\r\n  }"}},{"ruleId":"react/jsx-no-bind","severity":1,"message":"JSX props should not use functions","line":259,"column":15,"nodeType":"JSXAttribute","messageId":"func","endLine":259,"endColumn":41},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":269,"column":10,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":307,"endColumn":10,"fix":{"range":[8512,10353],"text":"result ? <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\r\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">✅ Processing Results</h3>\r\n            \r\n            <div className=\"space-y-4\">\r\n              <div className=\"bg-green-50 border border-green-200 rounded-md p-4\">\r\n                <p className=\"text-green-800\">\r\n                  <strong>Success!</strong> Email processed in {result.data.processingTime}ms\r\n                </p>\r\n                <p className=\"text-green-700 text-sm mt-1\">\r\n                  Queue ID: {result.data.queueId}\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div className=\"bg-blue-50 border border-blue-200 rounded-md p-4\">\r\n                  <h4 className=\"font-medium text-blue-900 mb-2\">📊 Parsed Items</h4>\r\n                  <p className=\"text-blue-800 text-2xl font-bold\">{result.data.parsedItems}</p>\r\n                  <p className=\"text-blue-700 text-sm\">Items extracted from email</p>\r\n                </div>\r\n\r\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-4\">\r\n                  <h4 className=\"font-medium text-yellow-900 mb-2\">💡 AI Suggestions</h4>\r\n                  <p className=\"text-yellow-800 text-2xl font-bold\">{result.data.suggestions}</p>\r\n                  <p className=\"text-yellow-700 text-sm\">Smart suggestions generated</p>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"mt-4\">\r\n                <a\r\n                  href=\"/ai-email-dashboard\"\r\n                  className=\"text-blue-600 hover:text-blue-700 underline\"\r\n                >\r\n                  View results in AI Dashboard →\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":310,"column":10,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":315,"endColumn":10,"fix":{"range":[10398,10646],"text":"error ? <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\r\n            <h3 className=\"text-lg font-medium text-red-900 mb-2\">❌ Error</h3>\r\n            <p className=\"text-red-800\">{error}</p>\r\n          </div> : null"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":3,"source":"'use client';\r\n\r\nimport { useAuth } from '@clerk/nextjs';\r\nimport { useState, useEffect } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\n\r\nexport default function TestEmailPage() {\r\n  const { isSignedIn, isLoaded } = useAuth();\r\n  const router = useRouter();\r\n  \r\n  const [emailData, setEmailData] = useState({\r\n    subject: '',\r\n    body: '',\r\n    from: '',\r\n    date: new Date().toISOString().split('T')[0]\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [result, setResult] = useState<any>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!isLoaded) return;\r\n\r\n    if (!isSignedIn) {\r\n      router.push('/sign-in');\r\n      return;\r\n    }\r\n  }, [isLoaded, isSignedIn, router]);\r\n\r\n  async function processTestEmail() {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      setResult(null);\r\n\r\n      const response = await fetch('/api/ai/process-email', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ emailData })\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error || 'Failed to process email');\r\n      }\r\n\r\n      setResult(data);\r\n\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unknown error occurred');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  function loadSampleEmail(type: 'bill' | 'receipt' | 'appointment') {\r\n    switch (type) {\r\n      case 'bill':\r\n        setEmailData({\r\n          subject: 'Your Origin Energy Bill - Due 15 Feb 2024',\r\n          body: `Dear Customer,\r\n\r\nYour Origin Energy bill is now available.\r\n\r\nAccount Number: 12345678\r\nBill Period: 15 Dec 2023 - 15 Jan 2024\r\nDue Date: 15 Feb 2024\r\nAmount Due: $125.50\r\n\r\nThis bill covers your electricity usage for the period shown above. Please ensure payment is received by the due date to avoid any late payment fees.\r\n\r\nYou can pay online at originenergy.com.au or call us on 13 24 61.\r\n\r\nThank you for choosing Origin Energy.\r\n\r\nBest regards,\r\nOrigin Energy Team`,\r\n          from: 'billing@originenergy.com.au',\r\n          date: new Date().toISOString().split('T')[0]\r\n        });\r\n        break;\r\n\r\n      case 'receipt':\r\n        setEmailData({\r\n          subject: 'Your Coles Online Order Receipt',\r\n          body: `Thank you for your Coles Online order!\r\n\r\nOrder Number: CO123456789\r\nOrder Date: 15 Jan 2024\r\nDelivery Date: 16 Jan 2024\r\n\r\nItems:\r\n- Milk (2L) x2 - $7.00\r\n- Bread (Wholemeal) x1 - $4.20\r\n- Eggs (12 pack) x1 - $6.50\r\n- Bananas (1kg) x1 - $3.80\r\n- Chicken Breast (500g) x1 - $8.50\r\n\r\nSubtotal: $30.00\r\nDelivery Fee: $2.00\r\nTotal: $32.00\r\n\r\nYour order will be delivered between 2:00 PM - 6:00 PM on 16 Jan 2024.\r\n\r\nThank you for shopping with Coles!`,\r\n          from: 'receipts@coles.com.au',\r\n          date: new Date().toISOString().split('T')[0]\r\n        });\r\n        break;\r\n\r\n      case 'appointment':\r\n        setEmailData({\r\n          subject: 'Dentist Appointment Confirmation - 20 Feb 2024',\r\n          body: `Dear Patient,\r\n\r\nYour dental appointment has been confirmed.\r\n\r\nAppointment Details:\r\nDate: 20 Feb 2024\r\nTime: 2:00 PM\r\nDuration: 45 minutes\r\nType: Regular Checkup & Clean\r\n\r\nLocation: 123 Dental Clinic\r\nAddress: 123 Main Street, Melbourne VIC 3000\r\nPhone: (03) 9123 4567\r\n\r\nPlease arrive 10 minutes before your appointment time. If you need to reschedule or cancel, please call us at least 24 hours in advance.\r\n\r\nWhat to bring:\r\n- Medicare card\r\n- Any relevant medical history\r\n- List of current medications\r\n\r\nWe look forward to seeing you!\r\n\r\nBest regards,\r\n123 Dental Clinic Team`,\r\n          from: 'appointments@123dental.com.au',\r\n          date: new Date().toISOString().split('T')[0]\r\n        });\r\n        break;\r\n    }\r\n  }\r\n\r\n  if (!isLoaded) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (!isSignedIn) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n        {/* Header */}\r\n        <div className=\"mb-8\">\r\n          <button\r\n            onClick={() => router.back()}\r\n            className=\"text-blue-600 hover:text-blue-700 mb-4 flex items-center\"\r\n          >\r\n            ← Back to AI Dashboard\r\n          </button>\r\n          \r\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\r\n            🧪 Test AI Email Processing\r\n          </h1>\r\n          <p className=\"text-gray-600\">\r\n            Submit test emails to see how the AI processes and extracts information\r\n          </p>\r\n        </div>\r\n\r\n        {/* Sample Email Buttons */}\r\n        <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\r\n          <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Load Sample Emails</h3>\r\n          <div className=\"flex space-x-4\">\r\n            <button\r\n              onClick={() => loadSampleEmail('bill')}\r\n              className=\"bg-blue-100 text-blue-700 px-4 py-2 rounded-md hover:bg-blue-200\"\r\n            >\r\n              💰 Sample Bill\r\n            </button>\r\n            <button\r\n              onClick={() => loadSampleEmail('receipt')}\r\n              className=\"bg-green-100 text-green-700 px-4 py-2 rounded-md hover:bg-green-200\"\r\n            >\r\n              🧾 Sample Receipt\r\n            </button>\r\n            <button\r\n              onClick={() => loadSampleEmail('appointment')}\r\n              className=\"bg-purple-100 text-purple-700 px-4 py-2 rounded-md hover:bg-purple-200\"\r\n            >\r\n              📅 Sample Appointment\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Email Form */}\r\n        <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\r\n          <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Email Data</h3>\r\n          \r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                Subject\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                value={emailData.subject}\r\n                onChange={(e) => setEmailData({ ...emailData, subject: e.target.value })}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                placeholder=\"Email subject...\"\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                From\r\n              </label>\r\n              <input\r\n                type=\"email\"\r\n                value={emailData.from}\r\n                onChange={(e) => setEmailData({ ...emailData, from: e.target.value })}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                placeholder=\"sender@example.com\"\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                Date\r\n              </label>\r\n              <input\r\n                type=\"date\"\r\n                value={emailData.date}\r\n                onChange={(e) => setEmailData({ ...emailData, date: e.target.value })}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                Body\r\n              </label>\r\n              <textarea\r\n                value={emailData.body}\r\n                onChange={(e) => setEmailData({ ...emailData, body: e.target.value })}\r\n                rows={8}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                placeholder=\"Email body content...\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"mt-6\">\r\n            <button\r\n              onClick={processTestEmail}\r\n              disabled={loading || !emailData.subject || !emailData.body}\r\n              className=\"bg-blue-600 text-white px-6 py-3 rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed\"\r\n            >\r\n              {loading ? 'Processing...' : '🚀 Process with AI'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Results */}\r\n        {result && (\r\n          <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\r\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">✅ Processing Results</h3>\r\n            \r\n            <div className=\"space-y-4\">\r\n              <div className=\"bg-green-50 border border-green-200 rounded-md p-4\">\r\n                <p className=\"text-green-800\">\r\n                  <strong>Success!</strong> Email processed in {result.data.processingTime}ms\r\n                </p>\r\n                <p className=\"text-green-700 text-sm mt-1\">\r\n                  Queue ID: {result.data.queueId}\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div className=\"bg-blue-50 border border-blue-200 rounded-md p-4\">\r\n                  <h4 className=\"font-medium text-blue-900 mb-2\">📊 Parsed Items</h4>\r\n                  <p className=\"text-blue-800 text-2xl font-bold\">{result.data.parsedItems}</p>\r\n                  <p className=\"text-blue-700 text-sm\">Items extracted from email</p>\r\n                </div>\r\n\r\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-4\">\r\n                  <h4 className=\"font-medium text-yellow-900 mb-2\">💡 AI Suggestions</h4>\r\n                  <p className=\"text-yellow-800 text-2xl font-bold\">{result.data.suggestions}</p>\r\n                  <p className=\"text-yellow-700 text-sm\">Smart suggestions generated</p>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"mt-4\">\r\n                <a\r\n                  href=\"/ai-email-dashboard\"\r\n                  className=\"text-blue-600 hover:text-blue-700 underline\"\r\n                >\r\n                  View results in AI Dashboard →\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Error Display */}\r\n        {error && (\r\n          <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\r\n            <h3 className=\"text-lg font-medium text-red-900 mb-2\">❌ Error</h3>\r\n            <p className=\"text-red-800\">{error}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\ai-learning-dashboard\\page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchLearningInsights'. Either include it or remove the dependency array.","line":42,"column":6,"nodeType":"ArrayExpression","endLine":42,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [fetchLearningInsights, userData?.household_id]","fix":{"range":[1279,1303],"text":"[fetchLearningInsights, userData?.household_id]"}}]},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":264,"column":31,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":264,"endColumn":36},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":295,"column":31,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":295,"endColumn":36},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":326,"column":31,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":326,"endColumn":36},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":361,"column":33,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[14342,14409],"text":"Use the &quot;Correct\" button to explain what should have been suggested"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[14342,14409],"text":"Use the &ldquo;Correct\" button to explain what should have been suggested"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[14342,14409],"text":"Use the &#34;Correct\" button to explain what should have been suggested"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[14342,14409],"text":"Use the &rdquo;Correct\" button to explain what should have been suggested"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":361,"column":41,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[14342,14409],"text":"Use the \"Correct&quot; button to explain what should have been suggested"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[14342,14409],"text":"Use the \"Correct&ldquo; button to explain what should have been suggested"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[14342,14409],"text":"Use the \"Correct&#34; button to explain what should have been suggested"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[14342,14409],"text":"Use the \"Correct&rdquo; button to explain what should have been suggested"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":369,"column":45,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[14888,14962],"text":"Mark suggestions as &quot;Done\" when they're correct to reinforce good patterns"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[14888,14962],"text":"Mark suggestions as &ldquo;Done\" when they're correct to reinforce good patterns"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[14888,14962],"text":"Mark suggestions as &#34;Done\" when they're correct to reinforce good patterns"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[14888,14962],"text":"Mark suggestions as &rdquo;Done\" when they're correct to reinforce good patterns"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":369,"column":50,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[14888,14962],"text":"Mark suggestions as \"Done&quot; when they're correct to reinforce good patterns"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[14888,14962],"text":"Mark suggestions as \"Done&ldquo; when they're correct to reinforce good patterns"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[14888,14962],"text":"Mark suggestions as \"Done&#34; when they're correct to reinforce good patterns"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[14888,14962],"text":"Mark suggestions as \"Done&rdquo; when they're correct to reinforce good patterns"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":369,"column":61,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[14888,14962],"text":"Mark suggestions as \"Done\" when they&apos;re correct to reinforce good patterns"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[14888,14962],"text":"Mark suggestions as \"Done\" when they&lsquo;re correct to reinforce good patterns"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[14888,14962],"text":"Mark suggestions as \"Done\" when they&#39;re correct to reinforce good patterns"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[14888,14962],"text":"Mark suggestions as \"Done\" when they&rsquo;re correct to reinforce good patterns"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { useUserData } from '@/hooks/useUserData';\r\nimport { \r\n  Brain, \r\n  TrendingUp, \r\n  Target, \r\n  Lightbulb, \r\n  BarChart3, \r\n  CheckCircle,\r\n  AlertCircle,\r\n  Clock\r\n} from 'lucide-react';\r\n\r\ninterface LearningInsights {\r\n  total_corrections: number;\r\n  patterns_identified: number;\r\n  accuracy_trend: number;\r\n  top_learning_areas: string[];\r\n  suggested_improvements: string[];\r\n  confidence_threshold: number;\r\n  learning_goals: string[];\r\n  last_updated: string;\r\n}\r\n\r\nexport default function AILearningDashboard() {\r\n  const { userData, isLoading: userDataLoading } = useUserData();\r\n  const [insights, setInsights] = useState<LearningInsights | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (userData?.household_id) {\r\n      fetchLearningInsights();\r\n    }\r\n  }, [userData?.household_id]);\r\n\r\n  const fetchLearningInsights = async () => {\r\n    if (!userData?.household_id) {\r\n      setError('No household ID found. Please complete onboarding first.');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(`/api/ai/learning-insights?household_id=${userData.household_id}`);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to fetch learning insights');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setInsights(data.insights);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unknown error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (userDataLoading || loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-center\">\r\n          <Brain className=\"h-12 w-12 animate-pulse mx-auto mb-4 text-blue-500\" />\r\n          <p className=\"text-lg text-gray-600\">\r\n            {userDataLoading ? 'Loading user data...' : 'Loading AI Learning Insights...'}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!userData?.household_id) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-center\">\r\n          <AlertCircle className=\"h-12 w-12 text-yellow-500 mx-auto mb-4\" />\r\n          <p className=\"text-lg text-yellow-600 mb-4\">Household Setup Required</p>\r\n          <p className=\"text-gray-600 mb-4\">\r\n            You need to complete onboarding and join a household to view AI Learning Insights.\r\n          </p>\r\n          <Button onClick={() => window.location.href = '/onboarding'} variant=\"outline\">\r\n            Go to Onboarding\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-center\">\r\n          <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\r\n          <p className=\"text-lg text-red-600 mb-4\">Error loading insights</p>\r\n          <p className=\"text-gray-600 mb-4\">{error}</p>\r\n          <Button onClick={fetchLearningInsights} variant=\"outline\">\r\n            Try Again\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!insights) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-center\">\r\n          <Brain className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\r\n          <p className=\"text-lg text-gray-600\">No learning insights available yet</p>\r\n          <p className=\"text-gray-500\">Start making corrections to see AI learning progress</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      {/* Header */}\r\n      <div className=\"mb-8\">\r\n        <div className=\"flex items-center gap-3 mb-4\">\r\n          <Brain className=\"h-8 w-8 text-blue-500\" />\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">AI Learning Dashboard</h1>\r\n        </div>\r\n        <p className=\"text-gray-600 text-lg\">\r\n          See how your AI assistant is learning and improving from your feedback\r\n        </p>\r\n      </div>\r\n\r\n      {/* Stats Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Total Corrections</CardTitle>\r\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{insights.total_corrections}</div>\r\n            <p className=\"text-xs text-gray-500\">User feedback provided</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Patterns Identified</CardTitle>\r\n            <Target className=\"h-4 w-4 text-blue-500\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{insights.patterns_identified}</div>\r\n            <p className=\"text-xs text-gray-500\">AI learning patterns</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Accuracy Trend</CardTitle>\r\n            <TrendingUp className=\"h-4 w-4 text-purple-500\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{insights.accuracy_trend}%</div>\r\n            <p className=\"text-xs text-gray-500\">Improvement over time</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Confidence Threshold</CardTitle>\r\n            <BarChart3 className=\"h-4 w-4 text-orange-500\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{insights.confidence_threshold}%</div>\r\n            <p className=\"text-xs text-gray-500\">AI confidence level</p>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\r\n        <TabsList className=\"grid w-full grid-cols-3\">\r\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\r\n          <TabsTrigger value=\"learning\">Learning Areas</TabsTrigger>\r\n          <TabsTrigger value=\"improvements\">Improvements</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"overview\" className=\"space-y-6\">\r\n          {/* Learning Progress */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Target className=\"h-5 w-5\" />\r\n                Learning Progress\r\n              </CardTitle>\r\n              <CardDescription>\r\n                How much the AI has learned from your feedback\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                <div className=\"flex justify-between text-sm\">\r\n                  <span>Pattern Recognition</span>\r\n                  <span>{Math.min(100, (insights.patterns_identified / Math.max(insights.total_corrections, 1)) * 100)}%</span>\r\n                </div>\r\n                <Progress value={Math.min(100, (insights.patterns_identified / Math.max(insights.total_corrections, 1)) * 100)} />\r\n                \r\n                <div className=\"flex justify-between text-sm\">\r\n                  <span>Accuracy Improvement</span>\r\n                  <span>{insights.accuracy_trend}%</span>\r\n                </div>\r\n                <Progress value={insights.accuracy_trend} />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Recent Activity */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Clock className=\"h-5 w-5\" />\r\n                Recent Learning Activity\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Last updated: {new Date(insights.last_updated).toLocaleDateString()}\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-sm text-gray-600\">\r\n                The AI system is actively learning from your corrections and improving its suggestions.\r\n                {insights.total_corrections > 0 && (\r\n                  <p className=\"mt-2\">\r\n                    Based on {insights.total_corrections} feedback items, the system has identified \r\n                    {insights.patterns_identified} learning patterns.\r\n                  </p>\r\n                )}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"learning\" className=\"space-y-6\">\r\n          {/* Top Learning Areas */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Brain className=\"h-5 w-5\" />\r\n                Top Learning Areas\r\n              </CardTitle>\r\n              <CardDescription>\r\n                What the AI is getting better at understanding\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {insights.top_learning_areas.length > 0 ? (\r\n                <div className=\"space-y-3\">\r\n                  {insights.top_learning_areas.map((area, index) => (\r\n                    <div key={index} className=\"flex items-center gap-3\">\r\n                      <Badge variant=\"secondary\" className=\"w-20 justify-center\">\r\n                        #{index + 1}\r\n                      </Badge>\r\n                      <span className=\"text-sm\">{area}</span>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                <p className=\"text-gray-500 text-sm\">\r\n                  Learning areas will appear as you provide more feedback\r\n                </p>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Learning Goals */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Target className=\"h-5 w-5\" />\r\n                Next Learning Goals\r\n              </CardTitle>\r\n              <CardDescription>\r\n                What the AI is working on improving next\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {insights.learning_goals.length > 0 ? (\r\n                <div className=\"space-y-3\">\r\n                  {insights.learning_goals.map((goal, index) => (\r\n                    <div key={index} className=\"flex items-start gap-3\">\r\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0\" />\r\n                      <span className=\"text-sm\">{goal}</span>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                <p className=\"text-gray-500 text-sm\">\r\n                  Learning goals will be generated based on your feedback patterns\r\n                </p>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"improvements\" className=\"space-y-6\">\r\n          {/* Suggested Improvements */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Lightbulb className=\"h-5 w-5\" />\r\n                Suggested Improvements\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Actionable insights to help the AI work better for you\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {insights.suggested_improvements.length > 0 ? (\r\n                <div className=\"space-y-4\">\r\n                  {insights.suggested_improvements.map((improvement, index) => (\r\n                    <div key={index} className=\"p-4 bg-blue-50 rounded-lg border border-blue-200\">\r\n                      <div className=\"flex items-start gap-3\">\r\n                        <Lightbulb className=\"h-5 w-5 text-blue-500 mt-0.5 flex-shrink-0\" />\r\n                        <p className=\"text-sm text-blue-800\">{improvement}</p>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                <p className=\"text-gray-500 text-sm\">\r\n                  Improvement suggestions will appear as the AI learns more about your preferences\r\n                </p>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Action Items */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <CheckCircle className=\"h-5 w-5\" />\r\n                How to Help the AI Learn\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Simple actions you can take to improve AI suggestions\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-3 text-sm\">\r\n                <div className=\"flex items-start gap-3\">\r\n                  <CheckCircle className=\"h-4 w-4 text-green-500 mt-0.5 flex-shrink-0\" />\r\n                  <span>Always provide feedback when AI suggestions are incorrect</span>\r\n                </div>\r\n                <div className=\"flex items-start gap-3\">\r\n                  <CheckCircle className=\"h-4 w-4 text-green-500 mt-0.5 flex-shrink-0\" />\r\n                  <span>Use the \"Correct\" button to explain what should have been suggested</span>\r\n                </div>\r\n                <div className=\"flex items-start gap-3\">\r\n                  <CheckCircle className=\"h-4 w-4 text-green-500 mt-0.5 flex-shrink-0\" />\r\n                  <span>Add notes to corrections to help the AI understand your preferences</span>\r\n                </div>\r\n                <div className=\"flex items-start gap-3\">\r\n                  <CheckCircle className=\"h-4 w-4 text-green-500 mt-0.5 flex-shrink-0\" />\r\n                  <span>Mark suggestions as \"Done\" when they're correct to reinforce good patterns</span>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n\r\n      {/* Refresh Button */}\r\n      <div className=\"mt-8 text-center\">\r\n        <Button onClick={fetchLearningInsights} variant=\"outline\">\r\n          Refresh Insights\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\ai-test\\page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":56,"column":36,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2204,2376],"text":"\r\n            If any AI feature doesn&apos;t work as expected, you can simply disable it \r\n            and the application will continue working with mock responses.\r\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2204,2376],"text":"\r\n            If any AI feature doesn&lsquo;t work as expected, you can simply disable it \r\n            and the application will continue working with mock responses.\r\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2204,2376],"text":"\r\n            If any AI feature doesn&#39;t work as expected, you can simply disable it \r\n            and the application will continue working with mock responses.\r\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2204,2376],"text":"\r\n            If any AI feature doesn&rsquo;t work as expected, you can simply disable it \r\n            and the application will continue working with mock responses.\r\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Real-time AI Test Page\r\n// This can be easily removed if the real-time processing doesn't work\r\n\r\n'use client';\r\n\r\nimport React from 'react';\r\nimport { RealTimeAIDashboard } from '@/components/ai/RealTimeAIDashboard';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Zap, Info } from 'lucide-react';\r\n\r\nexport default function AITestPage() {\r\n  return (\r\n    <div className=\"container mx-auto p-6 space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"text-center space-y-2\">\r\n        <h1 className=\"text-3xl font-bold flex items-center justify-center gap-2\">\r\n          <Zap className=\"h-8 w-8\" />\r\n          AI Testing Dashboard\r\n        </h1>\r\n        <p className=\"text-muted-foreground\">\r\n          Test and monitor real-time AI processing capabilities\r\n        </p>\r\n      </div>\r\n\r\n      {/* Info Alert */}\r\n      <Alert>\r\n        <Info className=\"h-4 w-4\" />\r\n        <AlertDescription>\r\n          This is a testing interface for the real-time AI processing system. \r\n          You can test different AI services, monitor processing queues, and view results.\r\n          All AI features can be easily disabled via environment variables if needed.\r\n        </AlertDescription>\r\n      </Alert>\r\n\r\n      {/* Main Dashboard */}\r\n      <RealTimeAIDashboard />\r\n\r\n      {/* Footer Info */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"text-lg\">About This System</CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-2\">\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            This real-time AI processing system provides:\r\n          </p>\r\n          <ul className=\"text-sm text-muted-foreground space-y-1 ml-4\">\r\n            <li>• Real-time WebSocket connections for live updates</li>\r\n            <li>• AI service integration with fallback mechanisms</li>\r\n            <li>• Processing queue management and monitoring</li>\r\n            <li>• Easy enable/disable via configuration</li>\r\n            <li>• Comprehensive error handling and recovery</li>\r\n          </ul>\r\n          <p className=\"text-sm text-muted-foreground mt-4\">\r\n            If any AI feature doesn't work as expected, you can simply disable it \r\n            and the application will continue working with mock responses.\r\n          </p>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\ai\\batch\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\ai\\bill-insights\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\ai\\calendar-insights\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\ai\\chore-assignment\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\ai\\chore-insights\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\ai\\chore-suggestions\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\ai\\corrections\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\ai\\email-queue\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\ai\\learning-insights\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\ai\\meal-insights\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\ai\\meal-suggestions\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\ai\\parsed-items\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\ai\\process-email\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\ai\\realtime\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\ai\\scheduling-suggestions\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\ai\\shopping-insights\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\ai\\shopping-suggestions\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\ai\\suggestions\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\ai\\test-learning\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\ai\\test-meal-planning\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\ai\\test-shopping\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\analytics\\track\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\attachments\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\attachments\\upload\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\automation\\check-jobs\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\automation\\create-rule\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\automation\\dispatch\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\automation\\run-worker\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\bills\\[id]\\mark-paid\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\bills\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\bills\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\calendar-templates\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\calendar-templates\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\calendar\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\calendar\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\calendars\\[householdId]\\ics\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\calendars\\[householdId]\\sync\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\calendars\\public\\[householdId]\\ics\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\chores\\completions\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\chores\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\claim-reward\\route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":116,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":116,"endColumn":16,"suggestions":[{"fix":{"range":[3849,3979],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@clerk/nextjs/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL as string;\r\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY as string;\r\n\r\n// Create a Supabase client with service role key for server-side operations\r\nconst supabase = createClient(supabaseUrl, supabaseServiceKey);\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // 1. Authenticate the user via Clerk\r\n    const { userId } = await auth();\r\n    \r\n    if (!userId) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    // 2. Get rewardId from request body\r\n    const body = await request.json();\r\n    const { rewardId } = body;\r\n\r\n    if (!rewardId) {\r\n      return NextResponse.json({ error: 'Reward ID is required' }, { status: 400 });\r\n    }\r\n\r\n    // 3. Verify the reward exists and get its costs\r\n    const { data: reward, error: rewardError } = await supabase\r\n      .from('rewards')\r\n      .select('*')\r\n      .eq('id', rewardId)\r\n      .single();\r\n\r\n    if (rewardError || !reward) {\r\n      return NextResponse.json({ error: 'Reward not found' }, { status: 404 });\r\n    }\r\n\r\n    // 4. Fetch the user's current XP and coins\r\n    const { data: user, error: userError } = await supabase\r\n      .from('users')\r\n      .select('xp, coins')\r\n      .eq('clerk_id', userId)\r\n      .single();\r\n\r\n    if (userError || !user) {\r\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\r\n    }\r\n\r\n    // 5. Check if user has enough resources\r\n    const currentXp = user.xp || 0;\r\n    const currentCoins = user.coins || 0;\r\n    const requiredXp = reward.cost_xp || 0;\r\n    const requiredCoins = reward.cost_coins || 0;\r\n\r\n    if (currentXp < requiredXp || currentCoins < requiredCoins) {\r\n      return NextResponse.json({ \r\n        error: 'Insufficient XP or coins',\r\n        details: {\r\n          current: { xp: currentXp, coins: currentCoins },\r\n          required: { xp: requiredXp, coins: requiredCoins }\r\n        }\r\n      }, { status: 400 });\r\n    }\r\n\r\n    // 6. Check if user has already claimed this reward\r\n    const { data: existingClaim, error: claimCheckError } = await supabase\r\n      .from('claimed_rewards')\r\n      .select('*')\r\n      .eq('user_id', userId)\r\n      .eq('reward_id', rewardId)\r\n      .single();\r\n\r\n    if (claimCheckError && claimCheckError.code !== 'PGRST116') {\r\n      // PGRST116 is \"not found\" error, which is expected if no claim exists\r\n      return NextResponse.json({ error: 'Error checking existing claim' }, { status: 500 });\r\n    }\r\n\r\n    if (existingClaim) {\r\n      return NextResponse.json({ error: 'Reward already claimed' }, { status: 400 });\r\n    }\r\n\r\n    // 7. Deduct resources from user and insert claim in a transaction\r\n    const newXp = currentXp - requiredXp;\r\n    const newCoins = currentCoins - requiredCoins;\r\n\r\n    // Update user's resources\r\n    const { error: updateError } = await supabase\r\n      .from('users')\r\n      .update({ \r\n        xp: newXp,\r\n        coins: newCoins\r\n      })\r\n      .eq('clerk_id', userId);\r\n\r\n    if (updateError) {\r\n      console.error('Error updating user resources:', updateError);\r\n      return NextResponse.json({ error: 'Failed to update user resources' }, { status: 500 });\r\n    }\r\n\r\n    // 8. Insert new claim into claimed_rewards table\r\n    const { data: newClaim, error: insertError } = await supabase\r\n      .from('claimed_rewards')\r\n      .insert({\r\n        user_id: userId,\r\n        reward_id: rewardId\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (insertError) {\r\n      console.error('Error inserting reward claim:', insertError);\r\n      return NextResponse.json({ error: 'Failed to claim reward' }, { status: 500 });\r\n    }\r\n\r\n    console.log(`✅ Reward ${rewardId} claimed successfully by user ${userId}. Deducted ${requiredXp} XP and ${requiredCoins} coins.`);\r\n\r\n    // 9. Return success response\r\n    return NextResponse.json({ \r\n      success: true, \r\n      data: {\r\n        claim: newClaim,\r\n        reward,\r\n        resourcesDeducted: {\r\n          xp: requiredXp,\r\n          coins: requiredCoins\r\n        },\r\n        newBalance: {\r\n          xp: newXp,\r\n          coins: newCoins\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Exception in POST /api/claim-reward:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\conflicts\\[id]\\resolve\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\conflicts\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'GetConflictsSchema' is assigned a value but never used.","line":15,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6206,6209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6206,6209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":182,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6222,6225],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6222,6225],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\nimport { getAuth } from '@clerk/nextjs/server';\nimport { z } from 'zod';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\nif (!supabaseUrl || !supabaseKey) {\n  throw new Error('Missing Supabase environment variables');\n}\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nconst GetConflictsSchema = z.object({\n  household_id: z.string().uuid(),\n});\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { userId } = await getAuth(request);\n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const householdId = searchParams.get('household_id');\n    \n    if (!householdId) {\n      return NextResponse.json({ error: 'household_id is required' }, { status: 400 });\n    }\n\n    // Verify user has access to this household\n    const { data: membership, error: membershipError } = await supabase\n      .from('household_members')\n      .select('household_id')\n      .eq('household_id', householdId)\n      .eq('user_id', userId)\n      .single();\n    \n    if (membershipError || !membership) {\n      return NextResponse.json({ error: 'Household not found or access denied' }, { status: 404 });\n    }\n\n    // First, run conflict detection to ensure we have current conflicts\n    const { error: detectionError } = await supabase\n      .rpc('upsert_calendar_conflicts', { p_household_id: householdId });\n    \n    if (detectionError) {\n      console.error('Error running conflict detection:', detectionError);\n      // Continue anyway - maybe there are existing conflicts\n    }\n\n    // Get conflicts for the household with event details\n    const { data: conflicts, error: conflictsError } = await supabase\n      .from('calendar_conflicts')\n      .select('id, household_id, event1_id, event2_id, conflict_type, severity, is_resolved, created_at, resolved_at, resolved_by')\n      .eq('household_id', householdId)\n      .eq('is_resolved', false)\n      .order('created_at', { ascending: false });\n\n    if (conflictsError) {\n      console.error('Error fetching conflicts:', conflictsError);\n      return NextResponse.json({ error: 'Failed to fetch conflicts' }, { status: 500 });\n    }\n\n    const eventIds = Array.from(new Set(\n      (conflicts || []).flatMap(conflict => [conflict.event1_id, conflict.event2_id]).filter(Boolean)\n    ));\n\n    const eventMap = new Map<string, { id: string; title: string | null; start_at: string | null; end_at: string | null; attendee_user_id: string | null }>();\n\n    if (eventIds.length > 0) {\n      const { data: events, error: eventsError } = await supabase\n        .from('events')\n        .select('id, title, start_at, end_at, attendee_user_id')\n        .in('id', eventIds);\n\n      if (eventsError) {\n        console.error('Error fetching conflict events:', eventsError);\n        return NextResponse.json({ error: 'Failed to fetch conflicts' }, { status: 500 });\n      }\n\n      events?.forEach(event => {\n        eventMap.set(event.id, {\n          id: event.id,\n          title: event.title ?? null,\n          start_at: event.start_at ?? null,\n          end_at: event.end_at ?? null,\n          attendee_user_id: event.attendee_user_id ?? null,\n        });\n      });\n    }\n\n    // Get conflict statistics\n    const { data: allConflicts, error: statsError } = await supabase\n      .from('calendar_conflicts')\n      .select('conflict_type, severity, is_resolved')\n      .eq('household_id', householdId);\n\n    if (statsError) {\n      console.error('Error fetching conflict stats:', statsError);\n      return NextResponse.json({ error: 'Failed to fetch conflict statistics' }, { status: 500 });\n    }\n\n    // Calculate statistics\n    const totalConflicts = allConflicts?.length || 0;\n    const unresolvedConflicts = allConflicts?.filter(c => !c.is_resolved).length || 0;\n    const resolvedConflicts = allConflicts?.filter(c => c.is_resolved).length || 0;\n\n    const conflictsByType = allConflicts?.reduce((acc, conflict) => {\n      acc[conflict.conflict_type] = (acc[conflict.conflict_type] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>) || {};\n\n    const conflictsBySeverity = allConflicts?.reduce((acc, conflict) => {\n      acc[conflict.severity] = (acc[conflict.severity] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>) || {};\n\n    const stats = {\n      totalConflicts,\n      unresolvedConflicts,\n      resolvedConflicts,\n      conflictsByType,\n      conflictsBySeverity\n    };\n\n    // Transform conflicts data\n    const transformedConflicts = conflicts?.map(conflict => {\n      const event1 = eventMap.get(conflict.event1_id) || null;\n      const event2 = eventMap.get(conflict.event2_id) || null;\n\n      return {\n      id: conflict.id,\n      household_id: conflict.household_id,\n      event1_id: conflict.event1_id,\n      event2_id: conflict.event2_id,\n      conflict_type: conflict.conflict_type,\n      severity: conflict.severity,\n      description: getConflictDescription(\n        conflict.conflict_type,\n        event1,\n        event2\n      ),\n      detected_at: conflict.created_at,\n      resolved_at: conflict.is_resolved ? conflict.updated_at : null,\n      resolution_notes: null,\n      event1: event1 ? {\n        id: event1.id,\n        title: event1.title || 'Unknown Event',\n        start_at: event1.start_at,\n        end_at: event1.end_at,\n        attendee_user_id: event1.attendee_user_id\n      } : null,\n      event2: event2 ? {\n        id: event2.id,\n        title: event2.title || 'Unknown Event',\n        start_at: event2.start_at,\n        end_at: event2.end_at,\n        attendee_user_id: event2.attendee_user_id\n      } : null\n    };\n    }) || [];\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        conflicts: transformedConflicts,\n        stats\n      }\n    });\n  } catch (error) {\n    console.error('Error in GET /api/conflicts:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n\nfunction getConflictDescription(\n  conflictType: string, \n  event1: any, \n  event2: any\n): string {\n  const formatTime = (timestamp: string) => {\n    if (!timestamp) return '';\n    return new Date(timestamp).toLocaleString();\n  };\n\n  switch (conflictType) {\n    case 'time_overlap':\n      return `\"${event1?.title || 'Event 1'}\" and \"${event2?.title || 'Event 2'}\" have overlapping times (${formatTime(event1?.start_at)} - ${formatTime(event1?.end_at)} vs ${formatTime(event2?.start_at)} - ${formatTime(event2?.end_at)})`;\n    case 'same_title':\n      return `\"${event1?.title || 'Event 1'}\" and \"${event2?.title || 'Event 2'}\" have identical titles`;\n    case 'exact_duplicate':\n      return `\"${event1?.title || 'Event 1'}\" and \"${event2?.title || 'Event 2'}\" appear to be exact duplicates (same title, start, and end times)`;\n    default:\n      return `Conflict detected between \"${event1?.title || 'Event 1'}\" and \"${event2?.title || 'Event 2'}\"`;\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\cron\\reminders\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\csrf-token\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\debug\\check-db\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\debug\\fix-onboarding\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\debug\\user-status\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\digest\\cron\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\digest\\history\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\digest\\preferences\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextResponse' is defined but never used.","line":1,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":35},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":10,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":10,"endColumn":18,"suggestions":[{"fix":{"range":[505,575],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":61,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":61,"endColumn":18,"suggestions":[{"fix":{"range":[2304,2374],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userData' is assigned a value but never used.","line":64,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { withAPISecurity } from '@/lib/security/apiProtection';\r\nimport { getDatabaseClient, getUserAndHouseholdData } from '@/lib/api/database';\r\nimport { createErrorResponse, createSuccessResponse, handleApiError } from '@/lib/api/errors';\r\nimport { DEFAULT_DIGEST_PREFERENCES } from '@/hooks/useDigestPreferences';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  return withAPISecurity(request, async (req, user) => {\r\n    try {\r\n      console.log('🚀 GET: Fetching digest preferences for user:', user.id);\r\n\r\n      // Get user and household data\r\n      const { user: userData, household, error: userError } = await getUserAndHouseholdData(user.id);\r\n      \r\n      if (userError || !household) {\r\n        return createErrorResponse('User not found or no household', 404);\r\n      }\r\n\r\n      const supabase = getDatabaseClient();\r\n\r\n      // Fetch existing preferences or return defaults\r\n      const { data: preferences, error } = await supabase\r\n        .from('digest_preferences')\r\n        .select('*')\r\n        .eq('user_id', user.id)\r\n        .eq('household_id', household.id)\r\n        .single();\r\n\r\n      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned\r\n        console.error('Error fetching digest preferences:', error);\r\n        return createErrorResponse('Failed to fetch digest preferences', 500, error.message);\r\n      }\r\n\r\n      // If no preferences exist, return defaults with user/household info\r\n      if (!preferences) {\r\n        const defaultPreferences = {\r\n          ...DEFAULT_DIGEST_PREFERENCES,\r\n          user_id: user.id,\r\n          household_id: household.id,\r\n          email_address: userData?.email || '',\r\n        };\r\n        \r\n        return createSuccessResponse(defaultPreferences, 'Default digest preferences');\r\n      }\r\n\r\n      return createSuccessResponse(preferences, 'Digest preferences fetched successfully');\r\n\r\n    } catch (error) {\r\n      return handleApiError(error, { route: '/api/digest/preferences', method: 'GET', userId: user.id });\r\n    }\r\n  }, {\r\n    requireAuth: true,\r\n    requireCSRF: false,\r\n    rateLimitConfig: 'api'\r\n  });\r\n}\r\n\r\nexport async function PUT(request: NextRequest) {\r\n  return withAPISecurity(request, async (req, user) => {\r\n    try {\r\n      console.log('🚀 PUT: Updating digest preferences for user:', user.id);\r\n\r\n      // Get user and household data\r\n      const { user: userData, household, error: userError } = await getUserAndHouseholdData(user.id);\r\n      \r\n      if (userError || !household) {\r\n        return createErrorResponse('User not found or no household', 404);\r\n      }\r\n\r\n      const body = await req.json();\r\n      const supabase = getDatabaseClient();\r\n\r\n      // Validate email if provided\r\n      if (body.email_address && !isValidEmail(body.email_address)) {\r\n        return createErrorResponse('Invalid email address', 400);\r\n      }\r\n\r\n      // Validate time format\r\n      if (body.daily_digest_time && !isValidTime(body.daily_digest_time)) {\r\n        return createErrorResponse('Invalid daily digest time format (use HH:MM)', 400);\r\n      }\r\n\r\n      if (body.weekly_digest_time && !isValidTime(body.weekly_digest_time)) {\r\n        return createErrorResponse('Invalid weekly digest time format (use HH:MM)', 400);\r\n      }\r\n\r\n      // Check if preferences exist\r\n      const { data: existingPreferences, error: fetchError } = await supabase\r\n        .from('digest_preferences')\r\n        .select('id')\r\n        .eq('user_id', user.id)\r\n        .eq('household_id', household.id)\r\n        .single();\r\n\r\n      const updateData = {\r\n        ...body,\r\n        user_id: user.id,\r\n        household_id: household.id,\r\n        updated_at: new Date().toISOString(),\r\n      };\r\n\r\n      let result;\r\n      if (existingPreferences && !fetchError) {\r\n        // Update existing preferences\r\n        const { data, error } = await supabase\r\n          .from('digest_preferences')\r\n          .update(updateData)\r\n          .eq('id', existingPreferences.id)\r\n          .select()\r\n          .single();\r\n\r\n        if (error) {\r\n          console.error('Error updating digest preferences:', error);\r\n          return createErrorResponse('Failed to update digest preferences', 500, error.message);\r\n        }\r\n\r\n        result = data;\r\n      } else {\r\n        // Create new preferences\r\n        const { data, error } = await supabase\r\n          .from('digest_preferences')\r\n          .insert({\r\n            ...updateData,\r\n            created_at: new Date().toISOString(),\r\n          })\r\n          .select()\r\n          .single();\r\n\r\n        if (error) {\r\n          console.error('Error creating digest preferences:', error);\r\n          return createErrorResponse('Failed to create digest preferences', 500, error.message);\r\n        }\r\n\r\n        result = data;\r\n      }\r\n\r\n      return createSuccessResponse(result, 'Digest preferences updated successfully');\r\n\r\n    } catch (error) {\r\n      return handleApiError(error, { route: '/api/digest/preferences', method: 'PUT', userId: user.id });\r\n    }\r\n  }, {\r\n    requireAuth: true,\r\n    requireCSRF: false,\r\n    rateLimitConfig: 'api'\r\n  });\r\n}\r\n\r\n// Helper functions\r\nfunction isValidEmail(email: string): boolean {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n}\r\n\r\nfunction isValidTime(time: string): boolean {\r\n  const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;\r\n  return timeRegex.test(time);\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\digest\\send\\route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":29,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":29,"endColumn":16,"suggestions":[{"fix":{"range":[1005,1046],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":31,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":31,"endColumn":16,"suggestions":[{"fix":{"range":[1100,1143],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":34,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":34,"endColumn":18,"suggestions":[{"fix":{"range":[1177,1225],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { getAuth } from '@clerk/nextjs/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { canAccessFeatureFromEntitlements } from '@/lib/server/canAccessFeature';\r\nimport { DigestDataService } from '@/lib/digestDataService';\r\nimport { EmailService } from '@/lib/emailService';\r\nimport { z } from 'zod';\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\r\n\r\nif (!supabaseUrl || !supabaseKey) {\r\n  throw new Error('Missing Supabase environment variables');\r\n}\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\nconst SendDigestSchema = z.object({\r\n  household_id: z.string().uuid(),\r\n  type: z.enum(['daily', 'weekly']),\r\n  user_id: z.string().optional(), // Optional - if not provided, send to all users in household\r\n});\r\n\r\n/**\r\n * Send digest email to household members\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    console.log('🔍 Digest send API called');\r\n    const { userId } = await getAuth(request);\r\n    console.log('🔍 Auth result:', { userId });\r\n    \r\n    if (!userId) {\r\n      console.log('❌ No userId found, returning 401');\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { household_id, type, user_id } = SendDigestSchema.parse(body);\r\n\r\n    // Verify user has access to this household\r\n    const { data: membership, error: membershipError } = await supabase\r\n      .from('household_members')\r\n      .select('household_id, role')\r\n      .eq('household_id', household_id)\r\n      .eq('user_id', userId)\r\n      .single();\r\n    \r\n    if (membershipError || !membership) {\r\n      return NextResponse.json({ error: 'Household not found or access denied' }, { status: 404 });\r\n    }\r\n\r\n    // Check entitlements for digest feature\r\n    const { data: entitlements, error: entitlementsError } = await supabase\r\n      .from('entitlements')\r\n      .select('*')\r\n      .eq('household_id', household_id)\r\n      .single();\r\n\r\n    if (entitlementsError || !entitlements) {\r\n      return NextResponse.json({ error: 'Entitlements not found' }, { status: 404 });\r\n    }\r\n\r\n    if (!canAccessFeatureFromEntitlements(entitlements, 'digest_max_per_day')) {\r\n      return NextResponse.json({ \r\n        error: 'Daily digest requires Pro plan',\r\n        code: 'UPGRADE_REQUIRED'\r\n      }, { status: 403 });\r\n    }\r\n\r\n    // Get household info\r\n    const { data: household, error: householdError } = await supabase\r\n      .from('households')\r\n      .select('name')\r\n      .eq('id', household_id)\r\n      .single();\r\n\r\n    if (householdError || !household) {\r\n      return NextResponse.json({ error: 'Household not found' }, { status: 404 });\r\n    }\r\n\r\n    // Get users to send digest to\r\n    let targetUsers;\r\n    if (user_id) {\r\n      // Send to specific user\r\n      const { data: user, error: userError } = await supabase\r\n        .from('users')\r\n        .select('id, email')\r\n        .eq('id', user_id)\r\n        .single();\r\n\r\n      if (userError || !user) {\r\n        return NextResponse.json({ error: 'User not found' }, { status: 404 });\r\n      }\r\n\r\n      // Verify user is in the household\r\n      const { data: membership, error: membershipError } = await supabase\r\n        .from('household_members')\r\n        .select('user_id')\r\n        .eq('user_id', user_id)\r\n        .eq('household_id', household_id)\r\n        .single();\r\n\r\n      if (membershipError || !membership) {\r\n        return NextResponse.json({ error: 'User not in household' }, { status: 404 });\r\n      }\r\n\r\n      targetUsers = [user];\r\n    } else {\r\n      // Send to all household members\r\n      const { data: members, error: membersError } = await supabase\r\n        .from('household_members')\r\n        .select('user_id')\r\n        .eq('household_id', household_id);\r\n\r\n      if (membersError || !members) {\r\n        return NextResponse.json({ error: 'Failed to fetch household members' }, { status: 500 });\r\n      }\r\n\r\n      // Get user details for each member\r\n      const userIds = members.map(member => member.user_id);\r\n      const { data: users, error: usersError } = await supabase\r\n        .from('users')\r\n        .select('id, email')\r\n        .in('id', userIds);\r\n\r\n      if (usersError || !users) {\r\n        return NextResponse.json({ error: 'Failed to fetch user details' }, { status: 500 });\r\n      }\r\n\r\n      targetUsers = users.filter(user => user && user.email);\r\n    }\r\n\r\n    if (targetUsers.length === 0) {\r\n      return NextResponse.json({ error: 'No users found to send digest to' }, { status: 400 });\r\n    }\r\n\r\n    // Check daily digest quota\r\n    if (type === 'daily') {\r\n      const today = new Date().toISOString().split('T')[0];\r\n      const { data: todayDigests } = await supabase\r\n        .from('daily_digests')\r\n        .select('id')\r\n        .eq('household_id', household_id)\r\n        .eq('digest_date', today);\r\n\r\n      if (todayDigests && todayDigests.length >= entitlements.digest_max_per_day) {\r\n        return NextResponse.json({ \r\n          error: 'Daily digest quota exceeded',\r\n          code: 'QUOTA_EXCEEDED'\r\n        }, { status: 429 });\r\n      }\r\n    }\r\n\r\n    const results = [];\r\n    let successCount = 0;\r\n    let errorCount = 0;\r\n\r\n    // Send digest to each user\r\n    for (const user of targetUsers) {\r\n      try {\r\n        // Collect digest data\r\n        const digestData = type === 'daily' \r\n          ? await DigestDataService.collectDailyDigestData(\r\n              household_id,\r\n              user.id,\r\n              user.email,\r\n              'User', // Fallback since name column doesn't exist\r\n              household.name\r\n            )\r\n          : await DigestDataService.collectWeeklyDigestData(\r\n              household_id,\r\n              user.id,\r\n              user.email,\r\n              'User', // Fallback since name column doesn't exist\r\n              household.name\r\n            );\r\n\r\n        // Send email\r\n        const emailResult = type === 'daily'\r\n          ? await EmailService.sendDailyDigest(digestData)\r\n          : await EmailService.sendWeeklyDigest(digestData);\r\n\r\n        if (emailResult.success) {\r\n          successCount++;\r\n          \r\n          // Log successful digest (only for daily digests, and only once per household per day)\r\n          if (type === 'daily') {\r\n            const today = new Date().toISOString().split('T')[0];\r\n            await supabase\r\n              .from('daily_digests')\r\n              .upsert({\r\n                household_id,\r\n                digest_date: today,\r\n                sent_at: new Date().toISOString(),\r\n                content: {\r\n                  type: 'daily',\r\n                  user_count: targetUsers.length,\r\n                  message_id: emailResult.messageId\r\n                },\r\n                status: 'sent'\r\n              }, {\r\n                onConflict: 'household_id,digest_date'\r\n              });\r\n          }\r\n\r\n          results.push({\r\n            user_id: user.id,\r\n            email: user.email,\r\n            success: true,\r\n            message_id: emailResult.messageId\r\n          });\r\n        } else {\r\n          errorCount++;\r\n          \r\n          // Log failed digest\r\n          if (type === 'daily') {\r\n            const today = new Date().toISOString().split('T')[0];\r\n            await supabase\r\n              .from('daily_digests')\r\n              .upsert({\r\n                household_id,\r\n                digest_date: today,\r\n                sent_at: new Date().toISOString(),\r\n                content: {\r\n                  type: 'daily',\r\n                  user_count: targetUsers.length,\r\n                  error: emailResult.error\r\n                },\r\n                status: 'failed',\r\n                error_message: emailResult.error\r\n              }, {\r\n                onConflict: 'household_id,digest_date'\r\n              });\r\n          }\r\n          \r\n          results.push({\r\n            user_id: user.id,\r\n            email: user.email,\r\n            success: false,\r\n            error: emailResult.error\r\n          });\r\n        }\r\n      } catch (error) {\r\n        errorCount++;\r\n        console.error(`Error sending digest to user ${user.id}:`, error);\r\n        results.push({\r\n          user_id: user.id,\r\n          email: user.email,\r\n          success: false,\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        });\r\n      }\r\n    }\r\n\r\n    // Log the digest sending for audit\r\n    await supabase\r\n      .from('audit_log')\r\n      .insert({\r\n        actor_id: userId,\r\n        household_id,\r\n        action: 'digest.send',\r\n        target_table: 'daily_digests',\r\n        meta: {\r\n          digest_type: type,\r\n          total_users: targetUsers.length,\r\n          success_count: successCount,\r\n          error_count: errorCount,\r\n          results\r\n        }\r\n      });\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: `Digest sent to ${successCount} users`,\r\n      stats: {\r\n        total_users: targetUsers.length,\r\n        success_count: successCount,\r\n        error_count: errorCount\r\n      },\r\n      results\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error sending digest:', error);\r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json({ error: 'Invalid input', details: error.errors }, { status: 400 });\r\n    }\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\digest\\test\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\entitlements\\[householdId]\\can-perform-action\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\entitlements\\[householdId]\\increment-quota\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\entitlements\\[householdId]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\entitlements\\[householdId]\\update-subscription\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\events\\[id]\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":150,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4592,4595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4592,4595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@clerk/nextjs/server';\r\nimport { getDatabaseClient } from '@/lib/api/database';\r\nimport { z } from 'zod';\r\n\r\nconst updateEventSchema = z.object({\r\n  title: z.string().min(1).optional(),\r\n  description: z.string().optional(),\r\n  startAt: z.string().datetime().optional(),\r\n  endAt: z.string().datetime().optional(),\r\n  timezone: z.string().optional(),\r\n  isAllDay: z.boolean().optional(),\r\n  rrule: z.string().optional(),\r\n  exdates: z.array(z.string().datetime()).optional(),\r\n  rdates: z.array(z.string().datetime()).optional(),\r\n  location: z.string().optional(),\r\n  calendarId: z.string().uuid().optional(),\r\n  attendees: z.array(z.object({\r\n    userId: z.string().optional(),\r\n    email: z.string().email().optional(),\r\n    status: z.enum(['accepted', 'declined', 'tentative', 'needsAction']).optional(),\r\n    isOptional: z.boolean().optional()\r\n  })).optional(),\r\n  reminders: z.array(z.object({\r\n    minutesBefore: z.number().min(0),\r\n    method: z.enum(['push', 'email', 'sms'])\r\n  })).optional()\r\n});\r\n\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: Promise<{ id: string }> }\r\n) {\r\n  try {\r\n    const { userId } = await auth();\r\n    if (!userId) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    // Await params for Next.js 15 compatibility\r\n    const { id } = await params;\r\n\r\n    const supabase = getDatabaseClient();\r\n    \r\n    // Get user's household\r\n    const { data: userData, error: userError } = await supabase\r\n      .from('users')\r\n      .select('household_id')\r\n      .eq('id', userId)\r\n      .single();\r\n\r\n    if (userError || !userData) {\r\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\r\n    }\r\n\r\n    // Get event with all related data\r\n    const { data: event, error } = await supabase\r\n      .from('events')\r\n      .select(`\r\n        *,\r\n        calendar:calendars(name, color),\r\n        attendees:event_attendees(\r\n          id,\r\n          user_id,\r\n          email,\r\n          status,\r\n          is_optional\r\n        ),\r\n        reminders:event_reminders(\r\n          minutes_before,\r\n          method\r\n        )\r\n      `)\r\n      .eq('id', id)\r\n      .eq('household_id', userData.household_id)\r\n      .single();\r\n\r\n    if (error) {\r\n      if (error.code === 'PGRST116') {\r\n        return NextResponse.json({ error: 'Event not found' }, { status: 404 });\r\n      }\r\n      console.error('Error fetching event:', error);\r\n      return NextResponse.json({ error: 'Failed to fetch event' }, { status: 500 });\r\n    }\r\n\r\n    return NextResponse.json({ event });\r\n\r\n  } catch (error) {\r\n    console.error('Error in GET /api/events/[id]:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function PATCH(\r\n  request: NextRequest,\r\n  { params }: { params: Promise<{ id: string }> }\r\n) {\r\n  try {\r\n    const { userId } = await auth();\r\n    if (!userId) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    // Await params for Next.js 15 compatibility\r\n    const { id } = await params;\r\n\r\n    const body = await request.json();\r\n    const validatedData = updateEventSchema.parse(body);\r\n\r\n    const supabase = getDatabaseClient();\r\n    \r\n    // Get user's household\r\n    const { data: userData, error: userError } = await supabase\r\n      .from('users')\r\n      .select('household_id')\r\n      .eq('id', userId)\r\n      .single();\r\n\r\n    if (userError || !userData) {\r\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\r\n    }\r\n\r\n    // Check if event exists and user has permission\r\n    const { data: existingEvent, error: checkError } = await supabase\r\n      .from('events')\r\n      .select('id, created_by')\r\n      .eq('id', id)\r\n      .eq('household_id', userData.household_id)\r\n      .single();\r\n\r\n    if (checkError || !existingEvent) {\r\n      return NextResponse.json({ error: 'Event not found' }, { status: 404 });\r\n    }\r\n\r\n    // Check if user can modify (creator or household owner)\r\n    const { data: userRole } = await supabase\r\n      .from('household_members')\r\n      .select('role')\r\n      .eq('household_id', userData.household_id)\r\n      .eq('user_id', userId)\r\n      .single();\r\n\r\n    const canModify = existingEvent.created_by === userId || userRole?.role === 'owner';\r\n    \r\n    if (!canModify) {\r\n      return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 });\r\n    }\r\n\r\n    // Prepare update data\r\n    const updateData: any = {\r\n      updated_at: new Date().toISOString()\r\n    };\r\n\r\n    if (validatedData.title !== undefined) updateData.title = validatedData.title;\r\n    if (validatedData.description !== undefined) updateData.description = validatedData.description;\r\n    if (validatedData.startAt !== undefined) updateData.start_at = validatedData.startAt;\r\n    if (validatedData.endAt !== undefined) updateData.end_at = validatedData.endAt;\r\n    if (validatedData.timezone !== undefined) updateData.timezone = validatedData.timezone;\r\n    if (validatedData.isAllDay !== undefined) updateData.is_all_day = validatedData.isAllDay;\r\n    if (validatedData.rrule !== undefined) updateData.rrule = validatedData.rrule;\r\n    if (validatedData.exdates !== undefined) updateData.exdates = validatedData.exdates;\r\n    if (validatedData.rdates !== undefined) updateData.rdates = validatedData.rdates;\r\n    if (validatedData.location !== undefined) updateData.location = validatedData.location;\r\n    if (validatedData.calendarId !== undefined) updateData.calendar_id = validatedData.calendarId;\r\n\r\n    // Update event\r\n    const { data: event, error: eventError } = await supabase\r\n      .from('events')\r\n      .update(updateData)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n\r\n    if (eventError) {\r\n      console.error('Error updating event:', eventError);\r\n      return NextResponse.json({ error: 'Failed to update event' }, { status: 500 });\r\n    }\r\n\r\n    // Update attendees if provided\r\n    if (validatedData.attendees !== undefined) {\r\n      // Delete existing attendees\r\n      await supabase\r\n        .from('event_attendees')\r\n        .delete()\r\n        .eq('event_id', id);\r\n\r\n      // Insert new attendees\r\n      if (validatedData.attendees.length > 0) {\r\n        const attendeeData = validatedData.attendees.map(attendee => ({\r\n          event_id: id,\r\n          user_id: attendee.userId || null,\r\n          email: attendee.email || null,\r\n          status: attendee.status || 'needsAction',\r\n          is_optional: attendee.isOptional || false\r\n        }));\r\n\r\n        const { error: attendeesError } = await supabase\r\n          .from('event_attendees')\r\n          .insert(attendeeData);\r\n\r\n        if (attendeesError) {\r\n          console.error('Error updating attendees:', attendeesError);\r\n          // Don't fail the entire request for attendee errors\r\n        }\r\n      }\r\n    }\r\n\r\n    // Update reminders if provided\r\n    if (validatedData.reminders !== undefined) {\r\n      // Delete existing reminders\r\n      await supabase\r\n        .from('event_reminders')\r\n        .delete()\r\n        .eq('event_id', id);\r\n\r\n      // Insert new reminders\r\n      if (validatedData.reminders.length > 0) {\r\n        const reminderData = validatedData.reminders.map(reminder => ({\r\n          event_id: id,\r\n          minutes_before: reminder.minutesBefore,\r\n          method: reminder.method\r\n        }));\r\n\r\n        const { error: remindersError } = await supabase\r\n          .from('event_reminders')\r\n          .insert(reminderData);\r\n\r\n        if (remindersError) {\r\n          console.error('Error updating reminders:', remindersError);\r\n          // Don't fail the entire request for reminder errors\r\n        }\r\n      }\r\n    }\r\n\r\n    return NextResponse.json({ \r\n      event,\r\n      message: 'Event updated successfully' \r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in PATCH /api/events/[id]:', error);\r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json({ error: 'Invalid event data', details: error.errors }, { status: 400 });\r\n    }\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function DELETE(\r\n  request: NextRequest,\r\n  { params }: { params: Promise<{ id: string }> }\r\n) {\r\n  try {\r\n    const { userId } = await auth();\r\n    if (!userId) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    // Await params for Next.js 15 compatibility\r\n    const { id } = await params;\r\n\r\n    const supabase = getDatabaseClient();\r\n    \r\n    // Get user's household\r\n    const { data: userData, error: userError } = await supabase\r\n      .from('users')\r\n      .select('household_id')\r\n      .eq('id', userId)\r\n      .single();\r\n\r\n    if (userError || !userData) {\r\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\r\n    }\r\n\r\n    // Check if event exists and user has permission\r\n    const { data: existingEvent, error: checkError } = await supabase\r\n      .from('events')\r\n      .select('id, created_by')\r\n      .eq('id', id)\r\n      .eq('household_id', userData.household_id)\r\n      .single();\r\n\r\n    if (checkError || !existingEvent) {\r\n      return NextResponse.json({ error: 'Event not found' }, { status: 404 });\r\n    }\r\n\r\n    // Check if user can delete (creator or household owner)\r\n    const { data: userRole } = await supabase\r\n      .from('household_members')\r\n      .select('role')\r\n      .eq('household_id', userData.household_id)\r\n      .eq('user_id', userId)\r\n      .single();\r\n\r\n    const canDelete = existingEvent.created_by === userId || userRole?.role === 'owner';\r\n    \r\n    if (!canDelete) {\r\n      return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 });\r\n    }\r\n\r\n    // Delete event (cascade will handle attendees and reminders)\r\n    const { error: deleteError } = await supabase\r\n      .from('events')\r\n      .delete()\r\n      .eq('id', id);\r\n\r\n    if (deleteError) {\r\n      console.error('Error deleting event:', deleteError);\r\n      return NextResponse.json({ error: 'Failed to delete event' }, { status: 500 });\r\n    }\r\n\r\n    return NextResponse.json({ \r\n      message: 'Event deleted successfully' \r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in DELETE /api/events/[id]:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\events\\log\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\events\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateEventSchema' is assigned a value but never used.","line":34,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":24},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":75,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":75,"endColumn":16,"suggestions":[{"fix":{"range":[2634,2691],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":104,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":104,"endColumn":16,"suggestions":[{"fix":{"range":[3388,3457],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":112,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":112,"endColumn":16,"suggestions":[{"fix":{"range":[3716,3766],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@clerk/nextjs/server';\r\nimport { getDatabaseClient } from '@/lib/api/database';\r\nimport { z } from 'zod';\r\nimport { generateEventOccurrences } from '@/lib/calendar/rruleUtils';\r\nimport { ConflictDetectionService } from '@/lib/conflictDetectionService';\r\nimport { canAccessFeatureFromEntitlements } from '@/lib/server/canAccessFeature';\r\n\r\n// Validation schemas\r\nconst createEventSchema = z.object({\r\n  title: z.string().min(1, 'Title is required'),\r\n  description: z.string().optional(),\r\n  startAt: z.string().datetime(),\r\n  endAt: z.string().datetime(),\r\n  timezone: z.string().default('Australia/Melbourne'),\r\n  isAllDay: z.boolean().default(false),\r\n  rrule: z.string().optional(),\r\n  exdates: z.array(z.string().datetime()).optional().default([]),\r\n  rdates: z.array(z.string().datetime()).optional().default([]),\r\n  location: z.string().optional(),\r\n  calendarId: z.string().uuid().optional(),\r\n  attendees: z.array(z.object({\r\n    userId: z.string().optional(),\r\n    email: z.string().email().optional(),\r\n    status: z.enum(['accepted', 'declined', 'tentative', 'needsAction']).default('needsAction'),\r\n    isOptional: z.boolean().default(false)\r\n  })).optional().default([]),\r\n  reminders: z.array(z.object({\r\n    minutesBefore: z.number().min(0),\r\n    method: z.enum(['push', 'email', 'sms']).default('push')\r\n  })).optional().default([])\r\n});\r\n\r\nconst updateEventSchema = createEventSchema.partial();\r\n\r\nconst getEventsSchema = z.object({\r\n  start: z.string().datetime(),\r\n  end: z.string().datetime(),\r\n  calendarId: z.string().uuid().optional()\r\n});\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { userId } = await auth();\r\n    if (!userId) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const start = searchParams.get('start');\r\n    const end = searchParams.get('end');\r\n    const calendarId = searchParams.get('calendarId');\r\n\r\n    // Validate query parameters\r\n    const validatedQuery = getEventsSchema.parse({\r\n      start,\r\n      end,\r\n      calendarId: calendarId || undefined\r\n    });\r\n\r\n    const supabase = getDatabaseClient();\r\n    \r\n    // Get user's household\r\n    const { data: userData, error: userError } = await supabase\r\n      .from('users')\r\n      .select('household_id')\r\n      .eq('id', userId)\r\n      .single();\r\n\r\n    if (userError || !userData) {\r\n      console.error('User not found:', userError);\r\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\r\n    }\r\n\r\n    console.log('User household_id:', userData.household_id);\r\n\r\n    // Build query\r\n    let query = supabase\r\n      .from('events')\r\n      .select(`\r\n        *,\r\n        calendar:calendars(name, color),\r\n        attendees:event_attendees(\r\n          id,\r\n          user_id,\r\n          email,\r\n          status,\r\n          is_optional\r\n        ),\r\n        reminders:event_reminders(\r\n          minutes_before,\r\n          method\r\n        )\r\n      `)\r\n      .eq('household_id', userData.household_id)\r\n      .gte('start_at', validatedQuery.start)\r\n      .lte('start_at', validatedQuery.end)\r\n      .order('start_at', { ascending: true });\r\n\r\n    if (validatedQuery.calendarId) {\r\n      query = query.eq('calendar_id', validatedQuery.calendarId);\r\n    }\r\n\r\n    console.log('Querying events for household:', userData.household_id);\r\n    const { data: events, error } = await query;\r\n    \r\n    if (error) {\r\n      console.error('Error fetching events:', error);\r\n      return NextResponse.json({ error: 'Failed to fetch events', details: error.message }, { status: 500 });\r\n    }\r\n    \r\n    console.log('Events found:', events?.length || 0);\r\n\r\n    // Generate occurrences for recurring events\r\n    const allOccurrences = [];\r\n    const startDate = new Date(validatedQuery.start);\r\n    const endDate = new Date(validatedQuery.end);\r\n\r\n    for (const event of events || []) {\r\n      if (event.rrule) {\r\n        // Generate occurrences for recurring events\r\n        const occurrences = generateEventOccurrences(\r\n          {\r\n            id: event.id,\r\n            title: event.title,\r\n            description: event.description,\r\n            startAt: new Date(event.start_at),\r\n            endAt: new Date(event.end_at),\r\n            timezone: event.timezone,\r\n            isAllDay: event.is_all_day,\r\n            rrule: event.rrule,\r\n            exdates: event.exdates?.map((d: string) => new Date(d)) || [],\r\n            rdates: event.rdates?.map((d: string) => new Date(d)) || [],\r\n            location: event.location\r\n          },\r\n          startDate,\r\n          endDate\r\n        );\r\n\r\n        allOccurrences.push(...occurrences.map(occ => ({\r\n          ...occ,\r\n          calendar: event.calendar,\r\n          attendees: event.attendees,\r\n          reminders: event.reminders,\r\n          isRecurring: true,\r\n          originalEventId: event.id\r\n        })));\r\n      } else {\r\n        // Single occurrence event\r\n        allOccurrences.push({\r\n          ...event,\r\n          isRecurring: false\r\n        });\r\n      }\r\n    }\r\n\r\n    // Sort all occurrences by start time\r\n    allOccurrences.sort((a, b) => \r\n      new Date(a.startAt || a.start_at).getTime() - new Date(b.startAt || b.start_at).getTime()\r\n    );\r\n\r\n    return NextResponse.json({ \r\n      events: allOccurrences,\r\n      count: allOccurrences.length \r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in GET /api/events:', error);\r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json({ error: 'Invalid query parameters', details: error.errors }, { status: 400 });\r\n    }\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { userId } = await auth();\r\n    if (!userId) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const body = await request.json();\r\n    const validatedData = createEventSchema.parse(body);\r\n\r\n    const supabase = getDatabaseClient();\r\n    \r\n    // Get user's household\r\n    const { data: userData, error: userError } = await supabase\r\n      .from('users')\r\n      .select('household_id')\r\n      .eq('id', userId)\r\n      .single();\r\n\r\n    if (userError || !userData) {\r\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\r\n    }\r\n\r\n    // Create event\r\n    const { data: event, error: eventError } = await supabase\r\n      .from('events')\r\n      .insert({\r\n        household_id: userData.household_id,\r\n        calendar_id: validatedData.calendarId || null,\r\n        title: validatedData.title,\r\n        description: validatedData.description,\r\n        start_at: validatedData.startAt,\r\n        end_at: validatedData.endAt,\r\n        timezone: validatedData.timezone,\r\n        is_all_day: validatedData.isAllDay,\r\n        rrule: validatedData.rrule || null,\r\n        exdates: validatedData.exdates || [],\r\n        rdates: validatedData.rdates || [],\r\n        location: validatedData.location,\r\n        created_by: userId\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (eventError) {\r\n      console.error('Error creating event:', eventError);\r\n      return NextResponse.json({ error: 'Failed to create event' }, { status: 500 });\r\n    }\r\n\r\n    // Add attendees\r\n    if (validatedData.attendees && validatedData.attendees.length > 0) {\r\n      const attendeeData = validatedData.attendees.map(attendee => ({\r\n        event_id: event.id,\r\n        user_id: attendee.userId || null,\r\n        email: attendee.email || null,\r\n        status: attendee.status,\r\n        is_optional: attendee.isOptional\r\n      }));\r\n\r\n      const { error: attendeesError } = await supabase\r\n        .from('event_attendees')\r\n        .insert(attendeeData);\r\n\r\n      if (attendeesError) {\r\n        console.error('Error adding attendees:', attendeesError);\r\n        // Don't fail the entire request for attendee errors\r\n      }\r\n    }\r\n\r\n    // Add reminders\r\n    if (validatedData.reminders && validatedData.reminders.length > 0) {\r\n      const reminderData = validatedData.reminders.map(reminder => ({\r\n        event_id: event.id,\r\n        minutes_before: reminder.minutesBefore,\r\n        method: reminder.method\r\n      }));\r\n\r\n      const { error: remindersError } = await supabase\r\n        .from('event_reminders')\r\n        .insert(reminderData);\r\n\r\n      if (remindersError) {\r\n        console.error('Error adding reminders:', remindersError);\r\n        // Don't fail the entire request for reminder errors\r\n      }\r\n    }\r\n\r\n    // Check for conflicts if Pro plan\r\n    let conflictResult = null;\r\n    try {\r\n      const { data: entitlements, error: entitlementsError } = await supabase\r\n        .from('entitlements')\r\n        .select('*')\r\n        .eq('household_id', userData.household_id)\r\n        .single();\r\n\r\n      if (!entitlementsError && entitlements && canAccessFeatureFromEntitlements(entitlements, 'conflict_detection')) {\r\n        conflictResult = await ConflictDetectionService.detectConflictsForEvent(\r\n          event.id,\r\n          userData.household_id,\r\n          {\r\n            id: event.id,\r\n            title: event.title,\r\n            start_at: event.start_at,\r\n            end_at: event.end_at,\r\n            is_all_day: event.is_all_day,\r\n            household_id: userData.household_id\r\n          }\r\n        );\r\n      }\r\n    } catch (conflictError) {\r\n      console.error('Error detecting conflicts:', conflictError);\r\n      // Don't fail the entire request for conflict detection errors\r\n    }\r\n\r\n    return NextResponse.json({ \r\n      event,\r\n      message: 'Event created successfully',\r\n      conflicts: conflictResult\r\n    }, { status: 201 });\r\n\r\n  } catch (error) {\r\n    console.error('Error in POST /api/events:', error);\r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json({ error: 'Invalid event data', details: error.errors }, { status: 400 });\r\n    }\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\feature-flags\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'withFeatureFlags' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\r\nimport { withAPISecurity } from \"@/lib/security/apiProtection\";\r\nimport { withFeatureFlags, createFeatureFlagContext } from \"@/lib/middleware/featureFlags\";\r\nimport { UserPlan } from \"@/lib/server/canAccessFeature\";\r\n\r\n/**\r\n * GET /api/feature-flags\r\n * Returns feature flag status for the current user\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  return withAPISecurity(request, async (req, user) => {\r\n    if (!user) {\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n    }\r\n\r\n    // Get user's plan from the request context or default to free\r\n    const userPlan = (req.headers.get('x-user-plan') as UserPlan) || 'free';\r\n    \r\n    // Create feature flag context\r\n    const context = createFeatureFlagContext(userPlan);\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        userPlan: context.userPlan,\r\n        availableFeatures: context.availableFeatures,\r\n        featureFlags: context.featureFlags,\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    });\r\n  }, {\r\n    requireAuth: true,\r\n    requireCSRF: false,\r\n    rateLimitConfig: 'api'\r\n  });\r\n}\r\n\r\n/**\r\n * POST /api/feature-flags/test\r\n * Test feature flag access for a specific feature\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  return withAPISecurity(request, async (req, user) => {\r\n    if (!user) {\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n    }\r\n\r\n    try {\r\n      const body = await req.json();\r\n      const { feature, userPlan = 'free' } = body;\r\n\r\n      if (!feature) {\r\n        return NextResponse.json({ \r\n          error: \"Feature name is required\" \r\n        }, { status: 400 });\r\n      }\r\n\r\n      // Create feature flag context\r\n      const context = createFeatureFlagContext(userPlan as UserPlan);\r\n      \r\n      // Check if feature is available\r\n      const isEnabled = context.featureFlags[feature] || false;\r\n      \r\n      return NextResponse.json({\r\n        success: true,\r\n        data: {\r\n          feature,\r\n          enabled: isEnabled,\r\n          userPlan: context.userPlan,\r\n          availableFeatures: context.availableFeatures,\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Feature flag test error:', error);\r\n      return NextResponse.json({ \r\n        error: \"Invalid request body\" \r\n      }, { status: 400 });\r\n    }\r\n  }, {\r\n    requireAuth: true,\r\n    requireCSRF: false,\r\n    rateLimitConfig: 'api'\r\n  });\r\n}\r\n\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\finance\\bills\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\finance\\bills\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\finance\\budget-envelopes\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\finance\\receipt-to-spending\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\finance\\spend-entries\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\google-calendar\\auth\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\google-calendar\\callback\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user_id' is assigned a value but never used.","line":33,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { exchangeCodeForTokens, GoogleCalendarService } from '@/lib/googleCalendar';\r\nimport { z } from 'zod';\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\r\n\r\nif (!supabaseUrl || !supabaseKey) {\r\n  throw new Error('Missing Supabase environment variables');\r\n}\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\nconst CallbackSchema = z.object({\r\n  code: z.string(),\r\n  state: z.string(),\r\n});\r\n\r\n/**\r\n * Handle Google Calendar OAuth callback\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const { code, state } = CallbackSchema.parse({\r\n      code: searchParams.get('code'),\r\n      state: searchParams.get('state'),\r\n    });\r\n\r\n    // Decode state to get household_id and user_id\r\n    const stateData = JSON.parse(Buffer.from(state, 'base64').toString());\r\n    const { household_id, user_id } = stateData;\r\n\r\n    // Exchange code for tokens\r\n    const tokens = await exchangeCodeForTokens(code);\r\n\r\n    if (!tokens.access_token) {\r\n      throw new Error('No access token received');\r\n    }\r\n\r\n    // Initialize Google Calendar service\r\n    const googleCalendar = new GoogleCalendarService(tokens.access_token);\r\n\r\n    // Get user's calendars\r\n    const calendars = await googleCalendar.getCalendarList();\r\n\r\n    // Store tokens and calendar info in database\r\n    const { error: insertError } = await supabase\r\n      .from('google_calendar_imports')\r\n      .upsert({\r\n        household_id,\r\n        google_calendar_id: 'primary', // We'll store primary calendar first\r\n        access_token: tokens.access_token,\r\n        refresh_token: tokens.refresh_token,\r\n        token_expires_at: tokens.expiry_date ? new Date(tokens.expiry_date).toISOString() : null,\r\n        last_import_at: new Date().toISOString(),\r\n        last_successful_import_at: new Date().toISOString(),\r\n        import_status: 'active',\r\n        calendars: calendars.map(cal => ({\r\n          id: cal.id,\r\n          summary: cal.summary,\r\n          accessRole: cal.accessRole,\r\n          selected: cal.selected || false\r\n        })),\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      }, {\r\n        onConflict: 'household_id,google_calendar_id'\r\n      });\r\n\r\n    if (insertError) {\r\n      console.error('Error storing Google Calendar tokens:', insertError);\r\n      return NextResponse.json({ error: 'Failed to store authentication' }, { status: 500 });\r\n    }\r\n\r\n    // Redirect back to the app with success\r\n    const redirectUrl = `${process.env.NEXT_PUBLIC_APP_URL}/calendar/sync?success=true&calendars=${calendars.length}`;\r\n    \r\n    return NextResponse.redirect(redirectUrl);\r\n\r\n  } catch (error) {\r\n    console.error('Error in Google Calendar callback:', error);\r\n    \r\n    // Redirect back to the app with error\r\n    const redirectUrl = `${process.env.NEXT_PUBLIC_APP_URL}/calendar/sync?error=authentication_failed`;\r\n    return NextResponse.redirect(redirectUrl);\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\google-calendar\\cron\\route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":28,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":28,"endColumn":16,"suggestions":[{"fix":{"range":[961,1019],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":42,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":42,"endColumn":18,"suggestions":[{"fix":{"range":[1508,1566],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":57,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":57,"endColumn":20,"suggestions":[{"fix":{"range":[1942,2022],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":61,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":61,"endColumn":22,"suggestions":[{"fix":{"range":[2178,2264],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":66,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":66,"endColumn":22,"suggestions":[{"fix":{"range":[2354,2442],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2776,2779],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2776,2779],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2830,2833],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2830,2833],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":80,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":80,"endColumn":22,"suggestions":[{"fix":{"range":[2907,2991],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":171,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":171,"endColumn":20,"suggestions":[{"fix":{"range":[6272,6389],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":179,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":179,"endColumn":16,"suggestions":[{"fix":{"range":[6658,6772],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { GoogleCalendarService } from '@/lib/googleCalendar';\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\r\n\r\nif (!supabaseUrl || !supabaseKey) {\r\n  throw new Error('Missing Supabase environment variables');\r\n}\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\n/**\r\n * Cron job for automatic Google Calendar imports\r\n * This should be called by a cron service every hour\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verify this is a legitimate cron request\r\n    const authHeader = request.headers.get('authorization');\r\n    const cronSecret = process.env.CRON_SECRET;\r\n    \r\n    if (!cronSecret || authHeader !== `Bearer ${cronSecret}`) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    console.log('🔄 Starting Google Calendar cron import...');\r\n\r\n    // Get all active Google Calendar imports\r\n    const { data: importSettings, error: importError } = await supabase\r\n      .from('google_calendar_imports')\r\n      .select('*')\r\n      .eq('import_status', 'active');\r\n\r\n    if (importError) {\r\n      console.error('Error fetching import settings:', importError);\r\n      return NextResponse.json({ error: 'Failed to fetch import settings' }, { status: 500 });\r\n    }\r\n\r\n    if (!importSettings || importSettings.length === 0) {\r\n      console.log('ℹ️ No active Google Calendar imports found');\r\n      return NextResponse.json({ \r\n        success: true, \r\n        message: 'No active imports to process',\r\n        processed: 0 \r\n      });\r\n    }\r\n\r\n    let totalProcessed = 0;\r\n    let totalImported = 0;\r\n    const errors: string[] = [];\r\n\r\n    // Process each household's Google Calendar import\r\n    for (const importSetting of importSettings) {\r\n      try {\r\n        console.log(`📅 Processing import for household ${importSetting.household_id}`);\r\n\r\n        // Check if token is expired\r\n        if (importSetting.token_expires_at && new Date(importSetting.token_expires_at) < new Date()) {\r\n          console.log(`⚠️ Token expired for household ${importSetting.household_id}, skipping`);\r\n          continue;\r\n        }\r\n\r\n        if (!importSetting.access_token) {\r\n          console.log(`⚠️ No access token for household ${importSetting.household_id}, skipping`);\r\n          continue;\r\n        }\r\n\r\n        // Initialize Google Calendar service\r\n        const googleCalendar = new GoogleCalendarService(importSetting.access_token);\r\n\r\n        // Get selected calendars\r\n        const calendars = importSetting.calendars || [];\r\n        const selectedCalendars = calendars\r\n          .filter((cal: any) => cal.selected !== false)\r\n          .map((cal: any) => cal.id);\r\n\r\n        if (selectedCalendars.length === 0) {\r\n          console.log(`ℹ️ No calendars selected for household ${importSetting.household_id}`);\r\n          continue;\r\n        }\r\n\r\n        // Set time range for import (last 24 hours to catch any missed events)\r\n        const timeMin = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();\r\n        const timeMax = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(); // Next 7 days\r\n\r\n        // Import events from selected calendars\r\n        const importResults = await googleCalendar.getEventsFromCalendars(selectedCalendars, {\r\n          timeMin,\r\n          timeMax,\r\n          maxResults: 50 // Limit for cron job\r\n        });\r\n\r\n        let householdImported = 0;\r\n        let householdSkipped = 0;\r\n\r\n        // Process each calendar's events\r\n        for (const { calendarId, events } of importResults) {\r\n          for (const googleEvent of events) {\r\n            try {\r\n              // Convert Google event to internal format\r\n              const internalEvent = GoogleCalendarService.convertToInternalEvent(googleEvent, calendarId);\r\n\r\n              // Check if event already exists (by external_id)\r\n              const { data: existingEvent } = await supabase\r\n                .from('events')\r\n                .select('id')\r\n                .eq('external_id', googleEvent.id)\r\n                .eq('external_source', 'google_calendar')\r\n                .eq('household_id', importSetting.household_id)\r\n                .single();\r\n\r\n              if (existingEvent) {\r\n                householdSkipped++;\r\n                continue;\r\n              }\r\n\r\n              // Insert new event\r\n              const { error: insertError } = await supabase\r\n                .from('events')\r\n                .insert({\r\n                  household_id: importSetting.household_id,\r\n                  ...internalEvent,\r\n                  created_by: 'system', // System import\r\n                  source: 'google_import_cron'\r\n                });\r\n\r\n              if (insertError) {\r\n                console.error(`Error inserting event for household ${importSetting.household_id}:`, insertError);\r\n                continue;\r\n              }\r\n\r\n              householdImported++;\r\n\r\n            } catch (error) {\r\n              console.error(`Error processing event for household ${importSetting.household_id}:`, error);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Update import status\r\n        await supabase\r\n          .from('google_calendar_imports')\r\n          .update({\r\n            last_import_at: new Date().toISOString(),\r\n            last_successful_import_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .eq('household_id', importSetting.household_id);\r\n\r\n        // Log the import for audit\r\n        await supabase\r\n          .from('audit_log')\r\n          .insert({\r\n            actor_id: 'system',\r\n            household_id: importSetting.household_id,\r\n            action: 'google_calendar.cron_import',\r\n            target_table: 'events',\r\n            meta: {\r\n              imported_events: householdImported,\r\n              skipped_events: householdSkipped,\r\n              calendars_processed: selectedCalendars.length,\r\n              time_range: { timeMin, timeMax }\r\n            }\r\n          });\r\n\r\n        totalProcessed++;\r\n        totalImported += householdImported;\r\n\r\n        console.log(`✅ Household ${importSetting.household_id}: ${householdImported} imported, ${householdSkipped} skipped`);\r\n\r\n      } catch (error) {\r\n        console.error(`Error processing household ${importSetting.household_id}:`, error);\r\n        errors.push(`Household ${importSetting.household_id}: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n      }\r\n    }\r\n\r\n    console.log(`🎉 Cron import completed: ${totalProcessed} households processed, ${totalImported} events imported`);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Cron import completed',\r\n      stats: {\r\n        households_processed: totalProcessed,\r\n        events_imported: totalImported,\r\n        errors: errors.length\r\n      },\r\n      errors: errors.length > 0 ? errors : undefined\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in Google Calendar cron job:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\google-calendar\\import\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\google-calendar\\status\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\household-members\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\leaderboard\\route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":18,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":18,"endColumn":16,"suggestions":[{"fix":{"range":[498,556],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":38,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":38,"endColumn":16,"suggestions":[{"fix":{"range":[1275,1327],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":53,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":53,"endColumn":18,"suggestions":[{"fix":{"range":[1866,1911],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":82,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":82,"endColumn":16,"suggestions":[{"fix":{"range":[2765,2814],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { auth } from '@clerk/nextjs/server';\r\n\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n\r\nexport async function GET(_request: NextRequest) {\r\n  try {\r\n    const { userId } = await auth();\r\n    \r\n    if (!userId) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    console.log(`🏆 Leaderboard request for user: ${userId}`);\r\n\r\n    // First, get the user's household_id from household_members table\r\n    const { data: userHousehold, error: householdError } = await supabase\r\n      .from('household_members')\r\n      .select('household_id')\r\n      .eq('user_id', userId)\r\n      .single();\r\n\r\n    if (householdError) {\r\n      console.error('❌ Error fetching user household:', householdError);\r\n      return NextResponse.json({ error: 'Failed to fetch user household' }, { status: 500 });\r\n    }\r\n\r\n    if (!userHousehold) {\r\n      console.error('❌ User not found in household_members');\r\n      return NextResponse.json({ error: 'User not found in household' }, { status: 404 });\r\n    }\r\n\r\n    const householdId = userHousehold.household_id;\r\n    console.log(`🏠 User household_id: ${householdId}`);\r\n\r\n    // Get all users in the same household with their XP\r\n    // First get the household member IDs\r\n    const { data: memberIds, error: membersError } = await supabase\r\n      .from('household_members')\r\n      .select('user_id')\r\n      .eq('household_id', householdId);\r\n\r\n    if (membersError) {\r\n      console.error('❌ Error fetching household members:', membersError);\r\n      return NextResponse.json({ error: 'Failed to fetch household members' }, { status: 500 });\r\n    }\r\n\r\n    if (!memberIds || memberIds.length === 0) {\r\n      console.log('📭 No household members found');\r\n      return NextResponse.json({ \r\n        success: true, \r\n        leaderboard: [],\r\n        householdId \r\n      });\r\n    }\r\n\r\n    // Then get the user data for all members\r\n    const userIds = memberIds.map(m => m.user_id);\r\n    const { data: users, error: usersError } = await supabase\r\n      .from('users')\r\n      .select('id, xp, email')\r\n      .in('id', userIds)\r\n      .order('xp', { ascending: false })\r\n      .limit(10);\r\n\r\n    if (usersError) {\r\n      console.error('❌ Error fetching users:', usersError);\r\n      return NextResponse.json({ error: 'Failed to fetch leaderboard data' }, { status: 500 });\r\n    }\r\n\r\n    // Transform the data to match the expected format\r\n    const leaderboard = users?.map(user => ({\r\n      id: user.id,\r\n      xp: user.xp || 0,\r\n      username: user.email || `User ${user.id.slice(-4)}`\r\n    })) || [];\r\n\r\n    console.log(`📊 Leaderboard data:`, leaderboard);\r\n\r\n    return NextResponse.json({ \r\n      success: true, \r\n      leaderboard,\r\n      householdId \r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('❌ Unexpected error:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\meal-planner\\add-week-ingredients\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\meal-planner\\assign\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\meal-planner\\clear\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\meal-planner\\copy\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\meal-planner\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\monitoring\\performance\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userData' is assigned a value but never used.","line":10,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[966,969],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[966,969],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userData' is assigned a value but never used.","line":68,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest } from 'next/server';\r\nimport { withAPISecurity } from '@/lib/security/apiProtection';\r\nimport { getUserAndHouseholdData } from '@/lib/api/database';\r\nimport { createErrorResponse, createSuccessResponse, handleApiError } from '@/lib/api/errors';\r\nimport { performanceMonitor } from '@/lib/monitoring/PerformanceMonitor';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  return withAPISecurity(request, async (req, user) => {\r\n    try {\r\n      const { user: userData, household, error: userError } = await getUserAndHouseholdData(user.id);\r\n\r\n      if (userError || !household) {\r\n        return createErrorResponse('User not found or no household', 404);\r\n      }\r\n\r\n      const { searchParams } = new URL(req.url);\r\n      const type = searchParams.get('type') || 'overview';\r\n      const timeWindow = searchParams.get('timeWindow')\r\n        ? parseInt(searchParams.get('timeWindow') as string, 10)\r\n        : 3600000;\r\n\r\n      let data: any = {};\r\n\r\n      switch (type) {\r\n        case 'overview':\r\n          data = {\r\n            aiMetrics: performanceMonitor.getAIPerformanceMetrics(timeWindow),\r\n            websocketMetrics: performanceMonitor.getWebSocketMetrics(timeWindow),\r\n            systemMetrics: performanceMonitor.getSystemMetrics(),\r\n            totalMetrics: performanceMonitor.getMetricsCount(),\r\n            isEnabled: performanceMonitor.isMonitoringEnabled(),\r\n          };\r\n          break;\r\n        case 'ai':\r\n          data = performanceMonitor.getAIPerformanceMetrics(timeWindow);\r\n          break;\r\n        case 'websocket':\r\n          data = performanceMonitor.getWebSocketMetrics(timeWindow);\r\n          break;\r\n        case 'system':\r\n          data = performanceMonitor.getSystemMetrics();\r\n          break;\r\n        case 'raw':\r\n          data = performanceMonitor.getMetrics(timeWindow);\r\n          break;\r\n        default:\r\n          return createErrorResponse('Invalid type parameter', 400);\r\n      }\r\n\r\n      return createSuccessResponse(data, 'Performance monitoring data retrieved successfully');\r\n    } catch (error) {\r\n      return handleApiError(error, {\r\n        route: '/api/monitoring/performance',\r\n        method: 'GET',\r\n        userId: user.id,\r\n      });\r\n    }\r\n  }, {\r\n    requireAuth: true,\r\n    requireCSRF: false,\r\n    rateLimitConfig: 'api',\r\n  });\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  return withAPISecurity(request, async (req, user) => {\r\n    try {\r\n      const { user: userData, household, error: userError } = await getUserAndHouseholdData(user.id);\r\n\r\n      if (userError || !household) {\r\n        return createErrorResponse('User not found or no household', 404);\r\n      }\r\n\r\n      const body = await req.json();\r\n      const { action, metric } = body;\r\n\r\n      switch (action) {\r\n        case 'clear_metrics':\r\n          performanceMonitor.clearMetrics();\r\n          return createSuccessResponse({}, 'Performance metrics cleared successfully');\r\n        case 'enable_monitoring':\r\n          performanceMonitor.enable();\r\n          return createSuccessResponse({}, 'Performance monitoring enabled');\r\n        case 'disable_monitoring':\r\n          performanceMonitor.disable();\r\n          return createSuccessResponse({}, 'Performance monitoring disabled');\r\n        case 'record_metric':\r\n          if (!metric) {\r\n            return createErrorResponse('Metric data is required', 400);\r\n          }\r\n\r\n          performanceMonitor.recordMetric({\r\n            ...metric,\r\n            userId: user.id,\r\n            householdId: household.id,\r\n          });\r\n\r\n          return createSuccessResponse({}, 'Metric recorded successfully');\r\n        default:\r\n          return createErrorResponse('Unknown action', 400);\r\n      }\r\n    } catch (error) {\r\n      return handleApiError(error, {\r\n        route: '/api/monitoring/performance',\r\n        method: 'POST',\r\n        userId: user.id,\r\n      });\r\n    }\r\n  }, {\r\n    requireAuth: true,\r\n    requireCSRF: false,\r\n    rateLimitConfig: 'api',\r\n  });\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\notifications\\send\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextResponse' is defined but never used.","line":1,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":35},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":18,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":18,"endColumn":18,"suggestions":[{"fix":{"range":[713,777],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1081,1084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1081,1084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userData' is assigned a value but never used.","line":33,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":108,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":108,"endColumn":22,"suggestions":[{"fix":{"range":[3844,3912],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":129,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":129,"endColumn":18,"suggestions":[{"fix":{"range":[4722,4807],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { withAPISecurity } from '@/lib/security/apiProtection';\r\nimport { getDatabaseClient, getUserAndHouseholdData, createAuditLog } from '@/lib/api/database';\r\nimport { createErrorResponse, createSuccessResponse, handleApiError } from '@/lib/api/errors';\r\nimport { notificationSendSchema } from '@/lib/validation/schemas';\r\nimport webpush from 'web-push';\r\n\r\n// Configure web-push\r\nwebpush.setVapidDetails(\r\n  process.env.VAPID_SUBJECT!,\r\n  process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY!,\r\n  process.env.VAPID_PRIVATE_KEY!\r\n);\r\n\r\nexport async function POST(request: NextRequest) {\r\n  return withAPISecurity(request, async (req, user) => {\r\n    try {\r\n      console.log('🚀 POST: Sending notification for user:', user.id);\r\n\r\n      // Parse and validate request body using Zod schema\r\n      let validatedData;\r\n      try {\r\n        const body = await req.json();\r\n        const tempSchema = notificationSendSchema.omit({ household_id: true });\r\n        validatedData = tempSchema.parse(body);\r\n      } catch (validationError: any) {\r\n        return createErrorResponse('Invalid input', 400, validationError.errors);\r\n      }\r\n\r\n      const { title, body: notificationBody, user_id: targetUserId } = validatedData;\r\n\r\n      // Get user and household data\r\n      const { user: userData, household, error: userError } = await getUserAndHouseholdData(user.id);\r\n      \r\n      if (userError || !household) {\r\n        return createErrorResponse('User not found or no household', 404);\r\n      }\r\n\r\n      const householdId = household.id;\r\n\r\n      // Determine who to send notifications to\r\n      let targetUserIds = [user.id];\r\n      \r\n      if (targetUserId) {\r\n        targetUserIds = [targetUserId];\r\n      } else if (householdId) {\r\n        // Get all users in the household\r\n        const supabase = getDatabaseClient();\r\n        const { data: householdMembers, error } = await supabase\r\n          .from('household_members')\r\n          .select('user_id')\r\n          .eq('household_id', householdId);\r\n\r\n        if (error) {\r\n          return createErrorResponse('Failed to fetch household members', 500, error.message);\r\n        }\r\n\r\n        targetUserIds = householdMembers.map(member => member.user_id);\r\n      }\r\n\r\n      // Get push subscriptions for target users\r\n      const supabase = getDatabaseClient();\r\n      const { data: subscriptions, error: subscriptionsError } = await supabase\r\n        .from('push_subscriptions')\r\n        .select('*')\r\n        .in('user_id', targetUserIds);\r\n\r\n      if (subscriptionsError) {\r\n        return createErrorResponse('Failed to fetch subscriptions', 500, subscriptionsError.message);\r\n      }\r\n\r\n      if (!subscriptions || subscriptions.length === 0) {\r\n        return createSuccessResponse({\r\n          success: false,\r\n          message: 'No active subscriptions found'\r\n        }, 'No subscriptions found');\r\n      }\r\n\r\n      // Prepare notification payload\r\n      const notificationPayload = {\r\n        title,\r\n        body: notificationBody,\r\n        icon: '/icons/icon-192x192.png', // Default icon\r\n        badge: '/icons/icon-72x72.png', // Default badge\r\n        tag: 'home-management', // Default tag\r\n        url: '/', // Default URL\r\n        timestamp: Date.now(),\r\n        requireInteraction: false,\r\n        silent: false,\r\n      };\r\n\r\n      // Send notifications\r\n      const sendPromises = subscriptions.map(async (subscription) => {\r\n        try {\r\n          const pushSubscription = {\r\n            endpoint: subscription.endpoint,\r\n            keys: {\r\n              p256dh: subscription.p256dh_key,\r\n              auth: subscription.auth_key,\r\n            },\r\n          };\r\n\r\n          await webpush.sendNotification(\r\n            pushSubscription,\r\n            JSON.stringify(notificationPayload)\r\n          );\r\n\r\n          console.log(`✅ Notification sent to user: ${subscription.user_id}`);\r\n          return { success: true, userId: subscription.user_id };\r\n        } catch (error) {\r\n          console.error(`❌ Failed to send notification to user: ${subscription.user_id}`, error);\r\n          \r\n          // If subscription is invalid, remove it from database\r\n          if (error instanceof Error && error.message.includes('410')) {\r\n            await supabase\r\n              .from('push_subscriptions')\r\n              .delete()\r\n              .eq('user_id', subscription.user_id);\r\n          }\r\n          \r\n          return { success: false, userId: subscription.user_id, error };\r\n        }\r\n      });\r\n\r\n      const results = await Promise.all(sendPromises);\r\n      const successCount = results.filter(r => r.success).length;\r\n      const failureCount = results.length - successCount;\r\n\r\n      console.log(`📊 Notification results: ${successCount} sent, ${failureCount} failed`);\r\n\r\n      // Create audit log\r\n      await createAuditLog({\r\n        user_id: user.id,\r\n        household_id: household.id,\r\n        action: 'notification_sent',\r\n        details: { \r\n          title, \r\n          body: notificationBody, \r\n          target_users: targetUserIds,\r\n          results: { total: results.length, successful: successCount, failed: failureCount }\r\n        }\r\n      });\r\n\r\n      return createSuccessResponse({\r\n        message: `Notifications sent: ${successCount} successful, ${failureCount} failed`,\r\n        results: {\r\n          total: results.length,\r\n          successful: successCount,\r\n          failed: failureCount,\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Unexpected error:', error);\r\n      return handleApiError(error);\r\n    }\r\n  }, {\r\n    requireAuth: true,\r\n    requireCSRF: true,\r\n    rateLimitConfig: 'api'\r\n  });\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\notifications\\settings\\route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":22,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":22,"endColumn":18,"suggestions":[{"fix":{"range":[670,713],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":26,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":26,"endColumn":16,"suggestions":[{"fix":{"range":[783,849],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":91,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":91,"endColumn":16,"suggestions":[{"fix":{"range":[2650,2717],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@clerk/nextjs/server';\r\nimport { z } from 'zod';\r\nimport { sb, ServerError, createErrorResponse } from '@/lib/server/supabaseAdmin';\r\n\r\nconst NotificationSettingsSchema = z.object({\r\n  settings: z.object({\r\n    choreReminders: z.boolean(),\r\n    mealPlanningReminders: z.boolean(),\r\n    shoppingListUpdates: z.boolean(),\r\n    achievementNotifications: z.boolean(),\r\n    householdUpdates: z.boolean(),\r\n  })\r\n});\r\n\r\n// GET - Fetch user's notification settings\r\nexport async function GET(_request: NextRequest) {\r\n  try {\r\n    const { userId } = await auth();\r\n    \r\n    if (!userId) {\r\n      console.log('❌ No userId found in auth()');\r\n      throw new ServerError('Unauthorized', 401);\r\n    }\r\n    \r\n    console.log('✅ Fetching notification settings for user:', userId);\r\n\r\n    const { data, error } = await sb()\r\n      .from('notification_settings')\r\n      .select('*')\r\n      .eq('user_id', userId)\r\n      .single();\r\n\r\n    if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned\r\n      console.error('Error fetching notification settings:', error);\r\n      throw new ServerError('Failed to fetch settings', 500);\r\n    }\r\n\r\n    // Return default settings if none exist\r\n    const defaultSettings = {\r\n      choreReminders: true,\r\n      mealPlanningReminders: true,\r\n      shoppingListUpdates: true,\r\n      achievementNotifications: true,\r\n      householdUpdates: true,\r\n    };\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      settings: data?.settings || defaultSettings\r\n    });\r\n\r\n  } catch (error) {\r\n    if (error instanceof ServerError) {\r\n      return createErrorResponse(error);\r\n    }\r\n    console.error('Unexpected error:', error);\r\n    return createErrorResponse(new ServerError('Internal server error', 500));\r\n  }\r\n}\r\n\r\n// POST - Update user's notification settings\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { userId } = await auth();\r\n    \r\n    if (!userId) {\r\n      throw new ServerError('Unauthorized', 401);\r\n    }\r\n\r\n    const body = await request.json();\r\n    const validatedData = NotificationSettingsSchema.parse(body);\r\n    const { settings } = validatedData;\r\n\r\n    // Upsert the settings\r\n    const { error } = await sb()\r\n      .from('notification_settings')\r\n      .upsert({\r\n        user_id: userId,\r\n        settings,\r\n        updated_at: new Date().toISOString(),\r\n      }, {\r\n        onConflict: 'user_id'\r\n      });\r\n\r\n    if (error) {\r\n      console.error('Error saving notification settings:', error);\r\n      throw new ServerError('Failed to save settings', 500);\r\n    }\r\n\r\n    console.log(`✅ Updated notification settings for user: ${userId}`);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Settings saved successfully',\r\n      settings\r\n    });\r\n\r\n  } catch (error) {\r\n    if (error instanceof ServerError) {\r\n      return createErrorResponse(error);\r\n    }\r\n    console.error('Unexpected error:', error);\r\n    return createErrorResponse(new ServerError('Internal server error', 500));\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\notifications\\subscribe\\route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":49,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":49,"endColumn":18,"suggestions":[{"fix":{"range":[1382,1445],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":67,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":67,"endColumn":18,"suggestions":[{"fix":{"range":[1961,2024],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@clerk/nextjs/server';\r\nimport { z } from 'zod';\r\nimport { sb, ServerError, createErrorResponse } from '@/lib/server/supabaseAdmin';\r\n\r\nconst SubscribeSchema = z.object({\r\n  endpoint: z.string().url(),\r\n  keys: z.object({\r\n    p256dh: z.string(),\r\n    auth: z.string(),\r\n  }),\r\n});\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { userId } = await auth();\r\n    \r\n    if (!userId) {\r\n      throw new ServerError('Unauthorized', 401);\r\n    }\r\n\r\n    const body = await request.json();\r\n    const validatedData = SubscribeSchema.parse(body);\r\n    const { endpoint, keys } = validatedData;\r\n\r\n    // Check if subscription already exists\r\n    const { data: existing } = await sb()\r\n      .from('push_subscriptions')\r\n      .select('id')\r\n      .eq('user_id', userId)\r\n      .eq('endpoint', endpoint)\r\n      .single();\r\n\r\n    if (existing) {\r\n      // Update existing subscription\r\n      const { error: updateError } = await sb()\r\n        .from('push_subscriptions')\r\n        .update({\r\n          keys,\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .eq('id', existing.id);\r\n\r\n      if (updateError) {\r\n        console.error('Error updating subscription:', updateError);\r\n        throw new ServerError('Failed to update subscription', 500);\r\n      }\r\n\r\n      console.log(`✅ Updated push subscription for user: ${userId}`);\r\n    } else {\r\n      // Create new subscription\r\n      const { error: insertError } = await sb()\r\n        .from('push_subscriptions')\r\n        .insert({\r\n          user_id: userId,\r\n          endpoint,\r\n          keys,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString(),\r\n        });\r\n\r\n      if (insertError) {\r\n        console.error('Error creating subscription:', insertError);\r\n        throw new ServerError('Failed to create subscription', 500);\r\n      }\r\n\r\n      console.log(`✅ Created push subscription for user: ${userId}`);\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Subscription saved successfully',\r\n    });\r\n\r\n  } catch (error) {\r\n    if (error instanceof ServerError) {\r\n      return createErrorResponse(error);\r\n    }\r\n    console.error('Unexpected error:', error);\r\n    return createErrorResponse(new ServerError('Internal server error', 500));\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\notifications\\test\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\onboarding\\complete\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\onboarding\\household\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\onboarding\\seed\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'auth' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":147,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":147,"endColumn":16,"suggestions":[{"fix":{"range":[4255,4363],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { auth } from '@clerk/nextjs/server';\nimport { z } from 'zod';\nimport { sb, ServerError, createErrorResponse } from '@/lib/server/supabaseAdmin';\nimport { withAPISecurity } from '@/lib/security/apiProtection';\n\nconst SeedDataSchema = z.object({\n  sampleRecipes: z.boolean().default(true),\n  samplePlans: z.boolean().default(true),\n});\n\n// Sample data generators\nconst generateSampleRecipes = () => [\n  {\n    name: 'Quick Breakfast Bowl',\n    ingredients: [\n      { name: 'Oats', amount: 1, unit: 'cup' },\n      { name: 'Banana', amount: 1, unit: 'piece' },\n      { name: 'Honey', amount: 2, unit: 'tbsp' },\n      { name: 'Almonds', amount: 0.25, unit: 'cup' }\n    ],\n    instructions: [\n      'Cook oats with water according to package directions',\n      'Slice banana and add to bowl',\n      'Drizzle with honey and sprinkle almonds',\n      'Serve hot or cold'\n    ],\n    prepTime: 5,\n    cookTime: 10,\n    servings: 1,\n    difficulty: 'easy'\n  },\n  {\n    name: 'Simple Pasta Dinner',\n    ingredients: [\n      { name: 'Pasta', amount: 8, unit: 'oz' },\n      { name: 'Olive Oil', amount: 2, unit: 'tbsp' },\n      { name: 'Garlic', amount: 3, unit: 'cloves' },\n      { name: 'Parmesan', amount: 0.5, unit: 'cup' }\n    ],\n    instructions: [\n      'Boil pasta according to package directions',\n      'Heat oil in pan and sauté minced garlic',\n      'Toss cooked pasta with garlic oil',\n      'Top with grated parmesan and serve'\n    ],\n    prepTime: 10,\n    cookTime: 15,\n    servings: 4,\n    difficulty: 'easy'\n  }\n];\n\nconst generateSamplePlans = () => [\n  {\n    title: 'Weekly Grocery Shopping',\n    description: 'Plan meals and create shopping list for the week',\n    points: 25,\n    frequency: 'weekly',\n    category: 'planning'\n  },\n  {\n    title: 'House Cleaning',\n    description: 'Deep clean kitchen and bathrooms',\n    points: 50,\n    frequency: 'weekly',\n    category: 'cleaning'\n  },\n  {\n    title: 'Laundry Day',\n    description: 'Wash, dry, and fold all household laundry',\n    points: 30,\n    frequency: 'weekly',\n    category: 'household'\n  }\n];\n\nexport async function POST(request: NextRequest) {\n  return withAPISecurity(request, async (req, user) => {\n    try {\n\n    const body = await req.json();\n    const validatedData = SeedDataSchema.parse(body);\n    const { sampleRecipes, samplePlans } = validatedData;\n\n    // Get user's household\n    const { data: userData, error: userError } = await sb()\n      .from('users')\n      .select('household_id')\n      .eq('id', user.id)\n      .single();\n\n    if (userError || !userData?.household_id) {\n      throw new ServerError('User not found or not in household', 400);\n    }\n\n    const householdId = userData.household_id;\n    let recipesAdded = 0;\n    let plansAdded = 0;\n\n    // Generate and seed sample recipes if requested\n    if (sampleRecipes) {\n      const sampleRecipesData = generateSampleRecipes();\n      const recipesWithHousehold = sampleRecipesData.map(recipe => ({\n        ...recipe,\n        household_id: householdId,\n        created_by: userId,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      }));\n\n      const { error: recipesError } = await sb()\n        .from('recipes')\n        .insert(recipesWithHousehold);\n\n      if (recipesError) {\n        console.error('Error seeding recipes:', recipesError);\n        // Don't fail the entire request, just log the error\n      } else {\n        recipesAdded = sampleRecipesData.length;\n      }\n    }\n\n    // Generate and seed sample planner items if requested\n    if (samplePlans) {\n      const samplePlansData = generateSamplePlans();\n      const plansWithHousehold = samplePlansData.map(plan => ({\n        ...plan,\n        household_id: householdId,\n        created_by: userId,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      }));\n\n      const { error: plansError } = await sb()\n        .from('chores')\n        .insert(plansWithHousehold);\n\n      if (plansError) {\n        console.error('Error seeding planner items:', plansError);\n        // Don't fail the entire request, just log the error\n      } else {\n        plansAdded = samplePlansData.length;\n      }\n    }\n\n    console.log(`✅ Seeded data for household: ${householdId} - Recipes: ${recipesAdded}, Plans: ${plansAdded}`);\n\n    return NextResponse.json({\n      success: true,\n      message: 'Data seeded successfully',\n      recipesAdded,\n      plansAdded\n    });\n\n  } catch (error) {\n    if (error instanceof ServerError) {\n      return createErrorResponse(error);\n    }\n    console.error('Unexpected error:', error);\n    return createErrorResponse(new ServerError('Internal server error', 500));\n    }\n  }, {\n    requireAuth: true,\n    requireCSRF: true,\n    rateLimitConfig: 'api'\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\planner\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextResponse' is defined but never used.","line":1,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\r\nimport { z } from 'zod'\r\n\r\nimport { getUserAndHousehold } from '@/lib/server/supabaseAdmin'\r\nimport { withAPISecurity } from '@/lib/security/apiProtection'\r\nimport { sanitizeDeep, sanitizeText } from '@/lib/security/sanitize'\r\nimport { logger } from '@/lib/logging/logger'\r\nimport { createSuccessResponse, createValidationErrorResponse, handleApiError } from '@/lib/api/errors'\r\nimport { plannerCreateSchema, plannerUpdateSchema } from '@/lib/validation/schemas'\r\nimport { getDatabaseClient } from '@/lib/api/database'\r\n\r\nconst plannerQuerySchema = z.object({\r\n  category: z.string().max(50).optional(),\r\n  status: z.string().max(50).optional(),\r\n  priority: z.string().max(20).optional()\r\n})\r\n\r\nexport async function GET(request: NextRequest) {\r\n  return withAPISecurity(request, async (req, user) => {\r\n    try {\r\n      const { householdId } = await getUserAndHousehold()\r\n\r\n      const url = new URL(req.url)\r\n      const queryValidation = plannerQuerySchema.safeParse(Object.fromEntries(url.searchParams))\r\n      if (!queryValidation.success) {\r\n        return createValidationErrorResponse(queryValidation.error.errors)\r\n      }\r\n\r\n      const { category, priority, status } = queryValidation.data\r\n      const supabase = getDatabaseClient()\r\n\r\n      let query = supabase\r\n        .from('planner_items')\r\n        .select('*')\r\n        .eq('household_id', householdId)\r\n        .order('created_at', { ascending: false })\r\n\r\n      if (category) query = query.eq('category', sanitizeText(category))\r\n      if (status) query = query.eq('status', sanitizeText(status))\r\n      if (priority) query = query.eq('priority', sanitizeText(priority))\r\n\r\n      const { data, error } = await query\r\n      if (error) {\r\n        throw error\r\n      }\r\n\r\n      return createSuccessResponse({ items: data ?? [] }, 'Planner items fetched successfully')\r\n    } catch (error) {\r\n      return handleApiError(error, { route: '/api/planner', method: 'GET', userId: user?.id })\r\n    }\r\n  }, {\r\n    requireAuth: true,\r\n    requireCSRF: false,\r\n    rateLimitConfig: 'api'\r\n  })\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  return withAPISecurity(request, async (req, user) => {\r\n    try {\r\n      const { userId, householdId } = await getUserAndHousehold()\r\n\r\n      const body = await req.json()\r\n      const sanitizedBody = sanitizeDeep(body, { description: 'rich' })\r\n      const validation = plannerCreateSchema.safeParse({ ...sanitizedBody, household_id: householdId })\r\n\r\n      if (!validation.success) {\r\n        return createValidationErrorResponse(validation.error.errors)\r\n      }\r\n\r\n      const payload = validation.data\r\n      const supabase = getDatabaseClient()\r\n\r\n      const { data, error } = await supabase\r\n        .from('planner_items')\r\n        .insert([{ ...payload, created_by: userId }])\r\n        .select('*')\r\n        .single()\r\n\r\n      if (error) {\r\n        throw error\r\n      }\r\n\r\n      await logger.info('Planner item created', {\r\n        userId,\r\n        householdId,\r\n        plannerItemId: data.id,\r\n        securityEvent: false\r\n      })\r\n\r\n      return createSuccessResponse({ item: data }, 'Planner item created', 201)\r\n    } catch (error) {\r\n      return handleApiError(error, { route: '/api/planner', method: 'POST', userId: user?.id })\r\n    }\r\n  })\r\n}\r\n\r\nexport async function PUT(request: NextRequest) {\r\n  return withAPISecurity(request, async (req, user) => {\r\n    try {\r\n      const { householdId } = await getUserAndHousehold()\r\n      const body = await req.json()\r\n      const sanitizedBody = sanitizeDeep(body, { description: 'rich' })\r\n\r\n      const validation = plannerUpdateSchema.safeParse(sanitizedBody)\r\n      if (!validation.success) {\r\n        return createValidationErrorResponse(validation.error.errors)\r\n      }\r\n\r\n      const { id, ...updates } = validation.data\r\n\r\n      const supabase = getDatabaseClient()\r\n      const { data, error } = await supabase\r\n        .from('planner_items')\r\n        .update({ ...updates, updated_at: new Date().toISOString() })\r\n        .eq('id', id)\r\n        .eq('household_id', householdId)\r\n        .select('*')\r\n        .single()\r\n\r\n      if (error) {\r\n        throw error\r\n      }\r\n\r\n      return createSuccessResponse({ item: data }, 'Planner item updated')\r\n    } catch (error) {\r\n      return handleApiError(error, { route: '/api/planner', method: 'PUT', userId: user?.id })\r\n    }\r\n  })\r\n}\r\n\r\nexport async function DELETE(request: NextRequest) {\r\n  return withAPISecurity(request, async (req, user) => {\r\n    try {\r\n      const { householdId } = await getUserAndHousehold()\r\n      const url = new URL(req.url)\r\n      const id = url.searchParams.get('id')\r\n\r\n      if (!id) {\r\n        return createValidationErrorResponse([\r\n          {\r\n            path: ['id'],\r\n            message: 'id is required',\r\n            code: 'custom'\r\n          }\r\n        ])\r\n      }\r\n\r\n      const supabase = getDatabaseClient()\r\n      const { error } = await supabase\r\n        .from('planner_items')\r\n        .delete()\r\n        .eq('id', id)\r\n        .eq('household_id', householdId)\r\n\r\n      if (error) {\r\n        throw error\r\n      }\r\n\r\n      return createSuccessResponse({ id }, 'Planner item deleted')\r\n    } catch (error) {\r\n      return handleApiError(error, { route: '/api/planner', method: 'DELETE', userId: user?.id })\r\n    }\r\n  }, {\r\n    requireCSRF: true\r\n  })\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\power-ups\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\quiet-hours\\route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":163,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":163,"endColumn":16,"suggestions":[{"fix":{"range":[5477,5537],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":165,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":165,"endColumn":18,"suggestions":[{"fix":{"range":[5565,5623],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { getAuth } from '@clerk/nextjs/server';\r\nimport { z } from 'zod';\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\r\n\r\nif (!supabaseUrl || !supabaseKey) {\r\n  throw new Error('Missing Supabase environment variables');\r\n}\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\nconst GetQuietHoursSchema = z.object({\r\n  household_id: z.string().uuid(),\r\n});\r\n\r\nconst SetQuietHoursSchema = z.object({\r\n  household_id: z.string().uuid(),\r\n  enabled: z.boolean(),\r\n  start_time: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/),\r\n  end_time: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/),\r\n  days_of_week: z.array(z.number().min(0).max(6)).min(1),\r\n});\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { userId } = await getAuth(request);\r\n    if (!userId) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const householdId = searchParams.get('household_id');\r\n    \r\n    if (!householdId) {\r\n      return NextResponse.json({ error: 'household_id is required' }, { status: 400 });\r\n    }\r\n\r\n    const { household_id } = GetQuietHoursSchema.parse({ household_id: householdId });\r\n\r\n    // Verify user has access to this household\r\n    const { data: membership, error: membershipError } = await supabase\r\n      .from('household_members')\r\n      .select('household_id')\r\n      .eq('household_id', household_id)\r\n      .eq('user_id', userId)\r\n      .single();\r\n    \r\n    if (membershipError || !membership) {\r\n      return NextResponse.json({ error: 'Household not found or access denied' }, { status: 404 });\r\n    }\r\n\r\n    // Get quiet hours settings\r\n    const { data: quietHours, error: quietHoursError } = await supabase\r\n      .from('quiet_hours')\r\n      .select('*')\r\n      .eq('household_id', household_id)\r\n      .eq('is_active', true)\r\n      .single();\r\n\r\n    if (quietHoursError && quietHoursError.code !== 'PGRST116') {\r\n      console.error('Error fetching quiet hours:', quietHoursError);\r\n      return NextResponse.json({ error: 'Failed to fetch quiet hours' }, { status: 500 });\r\n    }\r\n\r\n    // Calculate current status\r\n    const now = new Date();\r\n    const currentDay = now.getDay();\r\n    const currentTime = now.toTimeString().slice(0, 5); // HH:MM format\r\n\r\n    let isQuietHours = false;\r\n    let nextChange = null;\r\n\r\n    if (quietHours && quietHours.is_active) {\r\n      const { start_time, end_time, days_of_week } = quietHours;\r\n      const isDayActive = days_of_week.includes(currentDay);\r\n      \r\n      if (isDayActive) {\r\n        // Check if we're in the time range\r\n        if (start_time <= end_time) {\r\n          // Same day range (e.g., 22:00 to 07:00)\r\n          isQuietHours = currentTime >= start_time || currentTime <= end_time;\r\n        } else {\r\n          // Overnight range (e.g., 22:00 to 07:00)\r\n          isQuietHours = currentTime >= start_time || currentTime <= end_time;\r\n        }\r\n      }\r\n\r\n      // Calculate next change\r\n      const tomorrow = new Date(now);\r\n      tomorrow.setDate(tomorrow.getDate() + 1);\r\n      \r\n      if (isQuietHours) {\r\n        // Currently in quiet hours, next change is when they end\r\n        const endTimeToday = new Date(now);\r\n        const [endHour, endMinute] = end_time.split(':').map(Number);\r\n        endTimeToday.setHours(endHour, endMinute, 0, 0);\r\n        \r\n        if (endTimeToday <= now) {\r\n          endTimeToday.setDate(endTimeToday.getDate() + 1);\r\n        }\r\n        \r\n        nextChange = endTimeToday.toISOString();\r\n      } else {\r\n        // Currently not in quiet hours, next change is when they start\r\n        const startTimeToday = new Date(now);\r\n        const [startHour, startMinute] = start_time.split(':').map(Number);\r\n        startTimeToday.setHours(startHour, startMinute, 0, 0);\r\n        \r\n        if (startTimeToday <= now) {\r\n          startTimeToday.setDate(startTimeToday.getDate() + 1);\r\n        }\r\n        \r\n        nextChange = startTimeToday.toISOString();\r\n      }\r\n    }\r\n\r\n    const settings = quietHours ? {\r\n      enabled: quietHours.is_active,\r\n      start_time: quietHours.start_time,\r\n      end_time: quietHours.end_time,\r\n      days_of_week: quietHours.days_of_week\r\n    } : {\r\n      enabled: false,\r\n      start_time: '22:00',\r\n      end_time: '07:00',\r\n      days_of_week: [0, 1, 2, 3, 4, 5, 6]\r\n    };\r\n\r\n    const status = {\r\n      is_quiet_hours: isQuietHours,\r\n      settings,\r\n      next_change: nextChange,\r\n      formatted: {\r\n        next_change: nextChange ? new Date(nextChange).toLocaleString() : null,\r\n        days_of_week: quietHours ? \r\n          quietHours.days_of_week.map(d => ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][d]).join(', ') : \r\n          null,\r\n        time_range: quietHours ? \r\n          `${quietHours.start_time} - ${quietHours.end_time}` : \r\n          null\r\n      }\r\n    };\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        settings,\r\n        status\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error in GET /api/quiet-hours:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { userId } = await getAuth(request);\r\n    console.log('🔐 Quiet hours POST auth result:', { userId });\r\n    if (!userId) {\r\n      console.log('❌ No user ID from auth in quiet hours POST');\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { household_id, enabled, start_time, end_time, days_of_week } = SetQuietHoursSchema.parse(body);\r\n\r\n    // Verify user has access to this household\r\n    const { data: membership, error: membershipError } = await supabase\r\n      .from('household_members')\r\n      .select('household_id')\r\n      .eq('household_id', household_id)\r\n      .eq('user_id', userId)\r\n      .single();\r\n    \r\n    if (membershipError || !membership) {\r\n      return NextResponse.json({ error: 'Household not found or access denied' }, { status: 404 });\r\n    }\r\n\r\n    if (enabled) {\r\n      // Upsert quiet hours settings\r\n      const { data, error } = await supabase\r\n        .from('quiet_hours')\r\n        .upsert({\r\n          household_id,\r\n          start_time,\r\n          end_time,\r\n          days_of_week,\r\n          is_active: true,\r\n          updated_at: new Date().toISOString()\r\n        }, {\r\n          onConflict: 'household_id'\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error('Error saving quiet hours:', error);\r\n        return NextResponse.json({ error: 'Failed to save quiet hours settings' }, { status: 500 });\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        data,\r\n        message: 'Quiet hours settings saved successfully'\r\n      });\r\n    } else {\r\n      // Disable quiet hours\r\n      const { error } = await supabase\r\n        .from('quiet_hours')\r\n        .update({ is_active: false })\r\n        .eq('household_id', household_id);\r\n\r\n      if (error) {\r\n        console.error('Error disabling quiet hours:', error);\r\n        return NextResponse.json({ error: 'Failed to disable quiet hours' }, { status: 500 });\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        message: 'Quiet hours disabled successfully'\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error in POST /api/quiet-hours:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\quiet-hours\\status\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\receipt-items\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\recipes\\[id]\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextResponse' is defined but never used.","line":1,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userData' is assigned a value but never used.","line":20,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userData' is assigned a value but never used.","line":89,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":99,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":99,"endColumn":20,"suggestions":[{"fix":{"range":[3231,3266],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3436,3439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3436,3439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":104,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":104,"endColumn":20,"suggestions":[{"fix":{"range":[3452,3510],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":165,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":165,"endColumn":18,"suggestions":[{"fix":{"range":[5692,5744],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":199,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6912,6915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6912,6915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { withAPISecurity } from '@/lib/security/apiProtection';\r\nimport { getDatabaseClient, getUserAndHouseholdData, createAuditLog } from '@/lib/api/database';\r\nimport { createErrorResponse, createSuccessResponse, handleApiError } from '@/lib/api/errors';\r\nimport { createRecipeSchema } from '@/lib/validation/schemas';\r\n\r\nexport async function DELETE(\r\n  request: NextRequest,\r\n  { params }: { params: Promise<{ id: string }> }\r\n) {\r\n  return withAPISecurity(request, async (req, user) => {\r\n    try {\r\n      const { id: recipeId } = await params;\r\n\r\n      if (!recipeId) {\r\n        return createErrorResponse('Recipe ID is required', 400);\r\n      }\r\n\r\n      // Get user and household data\r\n      const { user: userData, household, error: userError } = await getUserAndHouseholdData(user.id);\r\n      \r\n      if (userError || !household) {\r\n        return createErrorResponse('User not found or no household', 404);\r\n      }\r\n\r\n      const supabase = getDatabaseClient();\r\n\r\n      // First, verify the recipe belongs to the user's household\r\n      const { data: existingRecipe, error: fetchError } = await supabase\r\n        .from('recipes')\r\n        .select('id, household_id, title')\r\n        .eq('id', recipeId)\r\n        .eq('household_id', household.id)\r\n        .single();\r\n\r\n      if (fetchError || !existingRecipe) {\r\n        return createErrorResponse('Recipe not found or access denied', 404);\r\n      }\r\n\r\n      // Delete the recipe\r\n      const { error: deleteError } = await supabase\r\n        .from('recipes')\r\n        .delete()\r\n        .eq('id', recipeId)\r\n        .eq('household_id', household.id);\r\n\r\n      if (deleteError) {\r\n        console.error('Error deleting recipe:', deleteError);\r\n        return createErrorResponse('Failed to delete recipe', 500, deleteError.message);\r\n      }\r\n\r\n      // Add audit log entry\r\n      await createAuditLog({\r\n        action: 'recipe.deleted',\r\n        targetTable: 'recipes',\r\n        targetId: recipeId,\r\n        userId: user.id,\r\n        metadata: { \r\n          recipe_title: existingRecipe.title,\r\n          household_id: household.id\r\n        }\r\n      });\r\n\r\n      return createSuccessResponse({}, 'Recipe deleted successfully');\r\n\r\n    } catch (error) {\r\n      return handleApiError(error, { route: '/api/recipes/[id]', method: 'DELETE', userId: user.id });\r\n    }\r\n  }, {\r\n    requireAuth: true,\r\n    requireCSRF: true,\r\n    rateLimitConfig: 'api'\r\n  });\r\n}\r\n\r\nexport async function PUT(\r\n  request: NextRequest,\r\n  { params }: { params: Promise<{ id: string }> }\r\n) {\r\n  return withAPISecurity(request, async (req, user) => {\r\n    try {\r\n      const { id: recipeId } = await params;\r\n\r\n      if (!recipeId) {\r\n        return createErrorResponse('Recipe ID is required', 400);\r\n      }\r\n\r\n      // Get user and household data\r\n      const { user: userData, household, error: userError } = await getUserAndHouseholdData(user.id);\r\n      \r\n      if (userError || !household) {\r\n        return createErrorResponse('User not found or no household', 404);\r\n      }\r\n\r\n      // Parse and validate request body using Zod schema\r\n      let validatedData;\r\n      try {\r\n        const body = await req.json();\r\n        console.log('Request body:', body);\r\n        \r\n        const tempSchema = createRecipeSchema.omit({ household_id: true });\r\n        validatedData = tempSchema.parse(body);\r\n      } catch (validationError: any) {\r\n        console.log('Validation failed:', validationError.errors);\r\n        return createErrorResponse('Invalid input', 400, validationError.errors);\r\n      }\r\n\r\n      const supabase = getDatabaseClient();\r\n\r\n      // First, verify the recipe belongs to the user's household\r\n      const { data: existingRecipe, error: fetchError } = await supabase\r\n        .from('recipes')\r\n        .select('id, household_id, title')\r\n        .eq('id', recipeId)\r\n        .eq('household_id', household.id)\r\n        .single();\r\n\r\n      if (fetchError || !existingRecipe) {\r\n        return createErrorResponse('Recipe not found or access denied', 404);\r\n      }\r\n\r\n      // Parse ingredients from text to structured format\r\n      const parsedIngredients = parseIngredients(validatedData.ingredients);\r\n      \r\n      // Parse instructions from text to array\r\n      const parsedInstructions = parseInstructions(validatedData.instructions);\r\n\r\n      // Update the recipe in the database with validated data\r\n      const { data: recipe, error: updateError } = await supabase\r\n        .from('recipes')\r\n        .update({\r\n          title: validatedData.title,\r\n          description: validatedData.description || '',\r\n          ingredients: parsedIngredients, // JSONB array\r\n          instructions: parsedInstructions, // TEXT array\r\n          prep_time: validatedData.prep_time,\r\n          cook_time: validatedData.cook_time,\r\n          servings: validatedData.servings,\r\n          tags: validatedData.tags || [],\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('id', recipeId)\r\n        .eq('household_id', household.id)\r\n        .select('*')\r\n        .single();\r\n\r\n      if (updateError) {\r\n        console.error('Database update error:', updateError);\r\n        return createErrorResponse('Failed to update recipe in database', 500, updateError.message);\r\n      }\r\n\r\n      // Add audit log entry\r\n      await createAuditLog({\r\n        action: 'recipe.updated',\r\n        targetTable: 'recipes',\r\n        targetId: recipeId,\r\n        userId: user.id,\r\n        metadata: { \r\n          recipe_title: validatedData.title,\r\n          household_id: household.id,\r\n          ingredients_count: parsedIngredients.length\r\n        }\r\n      });\r\n\r\n      console.log('Recipe updated successfully:', recipe);\r\n\r\n      return createSuccessResponse({ \r\n        recipe: {\r\n          id: recipe.id,\r\n          name: recipe.title, // Map back to 'name' for frontend compatibility\r\n          description: recipe.description,\r\n          prep_time: recipe.prep_time,\r\n          cook_time: recipe.cook_time,\r\n          servings: recipe.servings,\r\n          ingredients: recipe.ingredients,\r\n          instructions: recipe.instructions,\r\n          created_at: recipe.created_at,\r\n          household_id: recipe.household_id,\r\n          created_by: recipe.created_by,\r\n          updated_at: recipe.updated_at,\r\n          image_url: recipe.image_url,\r\n          tags: recipe.tags || [],\r\n          is_favorite: false, // Default value\r\n          difficulty: 'medium' // Default value\r\n        }\r\n      }, 'Recipe updated successfully');\r\n\r\n    } catch (error) {\r\n      return handleApiError(error, { route: '/api/recipes/[id]', method: 'PUT', userId: user.id });\r\n    }\r\n  }, {\r\n    requireAuth: true,\r\n    requireCSRF: true,\r\n    rateLimitConfig: 'api'\r\n  });\r\n}\r\n\r\n// Helper function to parse ingredients text into structured format\r\nfunction parseIngredients(ingredientsText: string): any[] {\r\n  if (!ingredientsText) return [];\r\n  \r\n  // Split by newlines or commas and clean up\r\n  const lines = ingredientsText.split(/[\\n,]+/).map(line => line.trim()).filter(Boolean);\r\n  \r\n  return lines.map((line, index) => {\r\n    // Try to parse quantity and unit from the line\r\n    const match = line.match(/^(\\d+(?:\\.\\d+)?)?\\s*([a-zA-Z]+)?\\s*(.+)$/);\r\n    \r\n    if (match) {\r\n      const [, amount, unit, name] = match;\r\n      return {\r\n        id: `temp-${index}`,\r\n        recipe_id: '', // Will be set by database\r\n        name: (name || line).trim(), // Fallback to full line if name is undefined\r\n        amount: amount ? parseFloat(amount) : 1,\r\n        unit: unit ? unit.trim() : '',\r\n        notes: ''\r\n      };\r\n    }\r\n    \r\n    // If no quantity/unit pattern, treat as just a name\r\n    return {\r\n      id: `temp-${index}`,\r\n      recipe_id: '', // Will be set by database\r\n      name: line,\r\n      amount: 1,\r\n      unit: '',\r\n      notes: ''\r\n    };\r\n  });\r\n}\r\n\r\n// Helper function to parse instructions text into array format\r\nfunction parseInstructions(instructionsText: string): string[] {\r\n  if (!instructionsText) return [];\r\n  \r\n  // Split by newlines and clean up\r\n  return instructionsText\r\n    .split('\\n')\r\n    .map(line => line.trim())\r\n    .filter(Boolean)\r\n    .map((line, _index) => {\r\n      // Remove step numbers if they exist (e.g., \"1. \", \"Step 1: \")\r\n      const cleaned = line.replace(/^(\\d+\\.?\\s*|Step\\s*\\d+:\\s*)/i, '').trim();\r\n      return cleaned || line; // If cleaning results in empty string, use original\r\n    });\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\recipes\\import\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\recipes\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextResponse' is defined but never used.","line":1,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":35},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":10,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":10,"endColumn":18,"suggestions":[{"fix":{"range":[514,573],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userData' is assigned a value but never used.","line":13,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":73,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":73,"endColumn":18,"suggestions":[{"fix":{"range":[2789,2848],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userData' is assigned a value but never used.","line":76,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":86,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":86,"endColumn":20,"suggestions":[{"fix":{"range":[3272,3307],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3413,3416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3413,3416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":90,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":90,"endColumn":20,"suggestions":[{"fix":{"range":[3429,3487],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":138,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":138,"endColumn":18,"suggestions":[{"fix":{"range":[5181,5233],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":172,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6397,6400],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6397,6400],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { withAPISecurity } from '@/lib/security/apiProtection';\r\nimport { getDatabaseClient, getUserAndHouseholdData, createAuditLog } from '@/lib/api/database';\r\nimport { createErrorResponse, createSuccessResponse, handleApiError } from '@/lib/api/errors';\r\nimport { createRecipeInputSchema } from '@/lib/validation/schemas';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  return withAPISecurity(request, async (req, user) => {\r\n    try {\r\n      console.log('🚀 GET: Fetching recipes for user:', user.id);\r\n\r\n      // Get user and household data\r\n      const { user: userData, household, error: userError } = await getUserAndHouseholdData(user.id);\r\n      \r\n      if (userError || !household) {\r\n        return createErrorResponse('User not found or no household', 404);\r\n      }\r\n\r\n      const supabase = getDatabaseClient();\r\n      \r\n      // Get all recipes for the household (shared between members)\r\n      const { data: recipes, error } = await supabase\r\n        .from('recipes')\r\n        .select('*')\r\n        .eq('household_id', household.id)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        console.error('Error fetching recipes:', error);\r\n        return createErrorResponse('Failed to fetch recipes', 500, error.message);\r\n      }\r\n\r\n      // Transform recipes to match frontend expectations\r\n      const transformedRecipes = recipes?.map(recipe => ({\r\n        id: recipe.id,\r\n        name: recipe.title, // Map 'title' to 'name' for frontend compatibility\r\n        description: recipe.description,\r\n        prep_time: recipe.prep_time,\r\n        cook_time: recipe.cook_time,\r\n        servings: recipe.servings,\r\n        ingredients: recipe.ingredients,\r\n        instructions: recipe.instructions,\r\n        created_at: recipe.created_at,\r\n        updated_at: recipe.updated_at,\r\n        household_id: recipe.household_id,\r\n        created_by: recipe.created_by,\r\n        tags: recipe.tags || [],\r\n        image_url: recipe.image_url,\r\n        is_favorite: false, // TODO: Implement favorites system\r\n        difficulty: 'medium', // TODO: Implement difficulty calculation\r\n        created_by_user: {\r\n          email: 'Unknown',\r\n          first_name: 'Unknown',\r\n          last_name: 'User'\r\n        }\r\n      })) || [];\r\n\r\n      return createSuccessResponse({ recipes: transformedRecipes }, 'Recipes fetched successfully');\r\n\r\n    } catch (error) {\r\n      return handleApiError(error, { route: '/api/recipes', method: 'GET', userId: user.id });\r\n    }\r\n  }, {\r\n    requireAuth: true,\r\n    requireCSRF: true,\r\n    rateLimitConfig: 'api'\r\n  });\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  return withAPISecurity(request, async (req, user) => {\r\n    try {\r\n      console.log('🚀 POST: Creating recipe for user:', user.id);\r\n\r\n      // Get user and household data\r\n      const { user: userData, household, error: userError } = await getUserAndHouseholdData(user.id);\r\n      \r\n      if (userError || !household) {\r\n        return createErrorResponse('User not found or no household', 404);\r\n      }\r\n\r\n      // Parse and validate request body using Zod schema\r\n      let validatedData;\r\n      try {\r\n        const body = await req.json();\r\n        console.log('Request body:', body);\r\n        \r\n        validatedData = createRecipeInputSchema.parse(body);\r\n      } catch (validationError: any) {\r\n        console.log('Validation failed:', validationError.errors);\r\n        return createErrorResponse('Invalid input', 400, validationError.errors);\r\n      }\r\n\r\n      // Parse ingredients from text to structured format\r\n      const parsedIngredients = parseIngredients(validatedData.ingredients);\r\n      \r\n      // Parse instructions from text to array\r\n      const parsedInstructions = parseInstructions(validatedData.instructions);\r\n\r\n      const supabase = getDatabaseClient();\r\n\r\n      // Create the recipe in the database with validated data\r\n      const { data: recipe, error: insertError } = await supabase\r\n        .from('recipes')\r\n        .insert([{\r\n          household_id: household.id,\r\n          title: validatedData.title,\r\n          description: validatedData.description || '',\r\n          ingredients: parsedIngredients, // JSONB array\r\n          instructions: parsedInstructions, // TEXT array\r\n          prep_time: validatedData.prep_time,\r\n          cook_time: validatedData.cook_time,\r\n          servings: validatedData.servings,\r\n          tags: validatedData.tags || [],\r\n          created_by: user.id\r\n        }])\r\n        .select('*')\r\n        .single();\r\n\r\n      if (insertError) {\r\n        console.error('Database insert error:', insertError);\r\n        return createErrorResponse('Failed to save recipe to database', 500, insertError.message);\r\n      }\r\n\r\n      // Add audit log entry\r\n      await createAuditLog({\r\n        action: 'recipe.created',\r\n        targetTable: 'recipes',\r\n        targetId: recipe.id,\r\n        userId: user.id,\r\n        metadata: { \r\n          recipe_title: validatedData.title,\r\n          household_id: household.id,\r\n          ingredients_count: parsedIngredients.length\r\n        }\r\n      });\r\n\r\n      console.log('Recipe created successfully:', recipe);\r\n\r\n      return createSuccessResponse({ \r\n        recipe: {\r\n          id: recipe.id,\r\n          name: recipe.title, // Map back to 'name' for frontend compatibility\r\n          description: recipe.description,\r\n          prep_time: recipe.prep_time,\r\n          cook_time: recipe.cook_time,\r\n          servings: recipe.servings,\r\n          ingredients: recipe.ingredients,\r\n          instructions: recipe.instructions,\r\n          created_at: recipe.created_at,\r\n          household_id: recipe.household_id,\r\n          created_by: recipe.created_by,\r\n          updated_at: recipe.updated_at,\r\n          image_url: recipe.image_url,\r\n          tags: recipe.tags || [],\r\n          is_favorite: false, // Default value\r\n          difficulty: 'medium' // Default value\r\n        }\r\n      }, 'Recipe created successfully');\r\n\r\n    } catch (error) {\r\n      return handleApiError(error, { route: '/api/recipes', method: 'POST', userId: user.id });\r\n    }\r\n  }, {\r\n    requireAuth: true,\r\n    requireCSRF: true,\r\n    rateLimitConfig: 'api'\r\n  });\r\n}\r\n\r\n// Helper function to parse ingredients text into structured format\r\nfunction parseIngredients(ingredientsText: string): any[] {\r\n  if (!ingredientsText) return [];\r\n  \r\n  // Split by newlines and clean up\r\n  const lines = ingredientsText.split('\\n').map(line => line.trim()).filter(Boolean);\r\n  \r\n  return lines.map((line, index) => {\r\n    // Try to parse quantity and unit from the line - improved regex\r\n    // Look for: optional number + optional unit + ingredient name\r\n    const match = line.match(/^(\\d+(?:\\.\\d+)?)\\s+([a-zA-Z]+)\\s+(.+)$/);\r\n    \r\n    if (match) {\r\n      const [, amount, unit, name] = match;\r\n      return {\r\n        id: `temp-${index}`,\r\n        recipe_id: '', // Will be set by database\r\n        name: name.trim(),\r\n        amount: parseFloat(amount),\r\n        unit: unit.trim(),\r\n        notes: ''\r\n      };\r\n    }\r\n    \r\n    // Try to parse just quantity + ingredient name (no unit)\r\n    const simpleMatch = line.match(/^(\\d+(?:\\.\\d+)?)\\s+(.+)$/);\r\n    if (simpleMatch) {\r\n      const [, amount, name] = simpleMatch;\r\n      return {\r\n        id: `temp-${index}`,\r\n        recipe_id: '', // Will be set by database\r\n        name: name.trim(),\r\n        amount: parseFloat(amount),\r\n        unit: '',\r\n        notes: ''\r\n      };\r\n    }\r\n    \r\n    // If no quantity pattern, treat as just a name\r\n    return {\r\n      id: `temp-${index}`,\r\n      recipe_id: '', // Will be set by database\r\n      name: line.trim(),\r\n      amount: 1,\r\n      unit: '',\r\n      notes: ''\r\n    };\r\n  });\r\n}\r\n\r\n// Helper function to parse instructions text into array format\r\nfunction parseInstructions(instructionsText: string): string[] {\r\n  if (!instructionsText) return [];\r\n  \r\n  // Split by newlines and clean up\r\n  return instructionsText\r\n    .split('\\n')\r\n    .map(line => line.trim())\r\n    .filter(Boolean)\r\n    .map((line, _index) => {\r\n      // Remove step numbers if they exist (e.g., \"1. \", \"Step 1: \")\r\n      const cleaned = line.replace(/^(\\d+\\.?\\s*|Step\\s*\\d+:\\s*)/i, '').trim();\r\n      return cleaned || line; // If cleaning results in empty string, use original\r\n    });\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\rewards\\claim\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\rewards\\redemptions\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\rewards\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\security\\dashboard\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":9,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is defined but never used. Allowed unused args must match /^_/u.","line":9,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Security Dashboard API Route\r\n// Provides security metrics and monitoring data\r\n\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport { withAdminAPISecurity } from \"@/lib/security/apiProtection\";\r\nimport { securityMonitor } from \"@/lib/security/monitoring\";\r\n\r\nexport async function GET(request: NextRequest) {\r\n  return withAdminAPISecurity(request, async (req, user) => {\r\n    try {\r\n      // Get security metrics\r\n      const metrics = securityMonitor.getSecurityMetrics();\r\n      \r\n      // Get recent events\r\n      const recentEvents = securityMonitor.getRecentEvents(100);\r\n      \r\n      // Get events by severity\r\n      const criticalEvents = securityMonitor.getEventsBySeverity('critical', 20);\r\n      const highEvents = securityMonitor.getEventsBySeverity('high', 20);\r\n      \r\n      // Get events by type\r\n      const rateLimitEvents = securityMonitor.getEventsByType('rate_limit_exceeded', 20);\r\n      const csrfEvents = securityMonitor.getEventsByType('csrf_failure', 20);\r\n      const unauthorizedEvents = securityMonitor.getEventsByType('unauthorized_access', 20);\r\n      \r\n      return NextResponse.json({\r\n        success: true,\r\n        data: {\r\n          metrics,\r\n          recentEvents,\r\n          eventsBySeverity: {\r\n            critical: criticalEvents,\r\n            high: highEvents\r\n          },\r\n          eventsByType: {\r\n            rateLimit: rateLimitEvents,\r\n            csrf: csrfEvents,\r\n            unauthorized: unauthorizedEvents\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Security dashboard error:', error);\r\n      return NextResponse.json(\r\n        { error: 'Failed to fetch security data' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n  });\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\security\\events\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\security\\metrics\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { currentUser } from '@clerk/nextjs/server';\r\nimport { createServerComponentClient } from '@supabase/auth-helpers-nextjs';\r\nimport { cookies } from 'next/headers';\r\nimport { logger, createRequestLogger } from '@/lib/logging/logger';\r\n\r\nexport async function GET(req: NextRequest) {\r\n  const requestId = logger.generateRequestId();\r\n  const log = createRequestLogger(requestId);\r\n  \r\n  try {\r\n    log.apiCall('GET', '/api/security/metrics');\r\n    \r\n    // Get authenticated user\r\n    const clerkUser = await currentUser();\r\n    if (!clerkUser) {\r\n      log.apiError('GET', '/api/security/metrics', new Error('Unauthorized'), { status: 401 });\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    // Get Supabase client\r\n    const supabase = createServerComponentClient({ cookies });\r\n    \r\n    // Check if user is admin (you can customize this logic)\r\n    const { data: userRole } = await supabase\r\n      .from('users')\r\n      .select('role')\r\n      .eq('id', clerkUser.id)\r\n      .single();\r\n\r\n    if (userRole?.role !== 'admin') {\r\n      log.apiError('GET', '/api/security/metrics', new Error('Forbidden'), { status: 403 });\r\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\r\n    }\r\n\r\n    // Fetch security metrics from the security_dashboard view\r\n    const { data: metrics, error } = await supabase\r\n      .from('security_dashboard')\r\n      .select('*');\r\n\r\n    if (error) {\r\n      log.error('Failed to fetch security metrics', error, { userId: clerkUser.id });\r\n      return NextResponse.json({ error: 'Failed to fetch security metrics' }, { status: 500 });\r\n    }\r\n\r\n    log.apiSuccess('GET', '/api/security/metrics', { userId: clerkUser.id, metricsCount: metrics?.length || 0 });\r\n    \r\n    return NextResponse.json(metrics || []);\r\n    \r\n  } catch (error) {\r\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\r\n    log.apiError('GET', '/api/security/metrics', new Error(errorMessage), { userId: clerkUser?.id });\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Internal server error' }, \r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\sentry-example-api\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\set-role\\route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":15,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":15,"endColumn":14,"suggestions":[{"fix":{"range":[503,538],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":20,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":20,"endColumn":16,"suggestions":[{"fix":{"range":[614,659],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":42,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":42,"endColumn":16,"suggestions":[{"fix":{"range":[1236,1314],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_updatedUserInUsers' is assigned a value but never used.","line":92,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":92,"endColumn":38},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":105,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":105,"endColumn":16,"suggestions":[{"fix":{"range":[3363,3431],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\r\nimport { getAuth } from \"@clerk/nextjs/server\";\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\r\n\r\nif (!supabaseUrl || !supabaseKey) {\r\n  throw new Error('Missing Supabase environment variables');\r\n}\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\nexport async function POST(request: NextRequest) {\r\n  console.log('Set role API called');\r\n  \r\n  const { userId } = await getAuth(request);\r\n\r\n  if (!userId) {\r\n    console.log('No userId found, unauthorized');\r\n    return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n  }\r\n\r\n  try {\r\n    // Parse request body\r\n    const body = await request.json();\r\n    const { clerkId, role } = body;\r\n\r\n    // Validate request body\r\n    if (!clerkId || !role) {\r\n      return NextResponse.json({ \r\n        error: \"Missing required fields: clerkId and role\" \r\n      }, { status: 400 });\r\n    }\r\n\r\n    if (!['owner', 'member'].includes(role)) {\r\n      return NextResponse.json({ \r\n        error: \"Invalid role. Must be 'owner' or 'member'\" \r\n      }, { status: 400 });\r\n    }\r\n\r\n    console.log(`User ${userId} attempting to set role of ${clerkId} to ${role}`);\r\n\r\n    // Check if current user is an owner in household_members\r\n    const { data: currentUser, error: currentUserError } = await supabase\r\n      .from('household_members')\r\n      .select('role')\r\n      .eq('user_id', userId)\r\n      .single();\r\n\r\n    if (currentUserError) {\r\n      console.error('Error fetching current user:', currentUserError);\r\n      return NextResponse.json({ \r\n        error: \"Failed to verify current user permissions\" \r\n      }, { status: 500 });\r\n    }\r\n\r\n    if (!currentUser) {\r\n      return NextResponse.json({ \r\n        error: \"Current user not found in household\" \r\n      }, { status: 404 });\r\n    }\r\n\r\n    if (currentUser.role !== 'owner') {\r\n      return NextResponse.json({ \r\n        error: \"Insufficient permissions. Only owners can set user roles\" \r\n      }, { status: 403 });\r\n    }\r\n\r\n    // Update the target user's role in household_members\r\n    const { data: updatedUser, error: updateError } = await supabase\r\n      .from('household_members')\r\n      .update({ role })\r\n      .eq('user_id', clerkId)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      console.error('Error updating user role in household_members:', updateError);\r\n      return NextResponse.json({ \r\n        error: \"Failed to update user role in household\" \r\n      }, { status: 500 });\r\n    }\r\n\r\n    if (!updatedUser) {\r\n      return NextResponse.json({ \r\n        error: \"Target user not found in household\" \r\n      }, { status: 404 });\r\n    }\r\n\r\n    // Also update the role in the users table\r\n    const { data: _updatedUserInUsers, error: usersUpdateError } = await supabase\r\n      .from('users')\r\n      .update({ role })\r\n      .eq('clerk_id', clerkId)\r\n      .select()\r\n      .single();\r\n\r\n    if (usersUpdateError) {\r\n      console.error('Error updating user role in users table:', usersUpdateError);\r\n      // Don't fail the request, just log the error since household_members was updated successfully\r\n      console.warn('Warning: Failed to sync role to users table, but household_members was updated');\r\n    }\r\n\r\n    console.log(`Successfully updated user ${clerkId} role to ${role}`);\r\n    return NextResponse.json({ \r\n      success: true,\r\n      message: `User role updated successfully to ${role}`,\r\n      user: {\r\n        userId: updatedUser.user_id,\r\n        role: updatedUser.role\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Exception in set role API:', error);\r\n    return NextResponse.json({ \r\n      error: error instanceof Error ? error.message : 'Unknown error occurred' \r\n    }, { status: 500 });\r\n  }\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\shopping-items\\toggle\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextResponse' is defined but never used.","line":1,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[842,845],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[842,845],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userData' is assigned a value but never used.","line":29,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2352,2355],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2352,2355],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"object-shorthand","severity":1,"message":"Expected property shorthand.","line":172,"column":13,"nodeType":"Property","messageId":"expectedPropertyShorthand","endLine":172,"endColumn":37,"fix":{"range":[6214,6238],"text":"is_complete"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { withAPISecurity } from '@/lib/security/apiProtection';\r\nimport { getDatabaseClient, getUserAndHouseholdData, createAuditLog } from '@/lib/api/database';\r\nimport { createErrorResponse, createSuccessResponse, handleApiError } from '@/lib/api/errors';\r\nimport { toggleShoppingItemSchema } from '@/lib/validation/schemas';\r\nimport { logger } from '@/lib/logging/logger';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  return withAPISecurity(request, async (req, user) => {\r\n    try {\r\n      // Parse and validate input using Zod schema\r\n      let validatedData;\r\n      try {\r\n        const body = await req.json();\r\n        \r\n        // Validate the input using our schema\r\n        validatedData = toggleShoppingItemSchema.parse(body);\r\n      } catch (validationError: any) {\r\n        logger.warn('Shopping item toggle validation failed', {\r\n          userId: user.id,\r\n          errors: validationError.errors,\r\n        });\r\n        return createErrorResponse('Invalid input', 400, validationError.errors);\r\n      }\r\n\r\n      const { id: itemId, is_complete } = validatedData;\r\n\r\n      // Get user and household data\r\n      const { user: userData, household, error: userError } = await getUserAndHouseholdData(user.id);\r\n      \r\n      if (userError || !household) {\r\n        return createErrorResponse('User not found or no household', 404);\r\n      }\r\n\r\n      // First get the current item to check its completion status and household\r\n      const supabase = getDatabaseClient();\r\n      const { data: currentItem, error: fetchError } = await supabase\r\n        .from('shopping_items')\r\n        .select(`\r\n          is_complete,\r\n          shopping_lists!inner(household_id)\r\n        `)\r\n        .eq('id', itemId)\r\n        .single();\r\n\r\n      if (fetchError) {\r\n        logger.error('Error fetching shopping item before toggle', fetchError, {\r\n          userId: user.id,\r\n          itemId,\r\n        });\r\n        return createErrorResponse('Failed to fetch shopping item', 500, fetchError.message);\r\n      }\r\n\r\n      // Check if item was previously incomplete (to award rewards only once)\r\n      const wasIncomplete = !currentItem.is_complete;\r\n      // Fix: Access household_id correctly from the joined shopping_lists\r\n      const itemHouseholdId = (currentItem.shopping_lists as any)?.household_id;\r\n\r\n      if (!itemHouseholdId) {\r\n        logger.error('Shopping item missing household_id', new Error('household_id missing'), {\r\n          userId: user.id,\r\n          itemId,\r\n        });\r\n        return createErrorResponse('Shopping item not associated with a household', 400);\r\n      }\r\n\r\n      // Verify the item belongs to the user's household\r\n      if (itemHouseholdId !== household.id) {\r\n        return createErrorResponse('Access denied to shopping item', 403);\r\n      }\r\n\r\n      if (is_complete && wasIncomplete) {\r\n        // Complete the item and award rewards\r\n        // First, get the current user's XP and coins\r\n        const { data: userData, error: userError } = await supabase\r\n          .from('users')\r\n          .select('xp, coins')\r\n          .eq('id', user.id);\r\n\r\n        if (userError) {\r\n          logger.error('Error fetching user rewards before toggle', userError, {\r\n            userId: user.id,\r\n            itemId,\r\n          });\r\n          return createErrorResponse('Failed to fetch user data', 500, userError.message);\r\n        }\r\n\r\n        if (!userData || userData.length === 0) {\r\n          logger.warn('No user data found during shopping item toggle', {\r\n            userId: user.id,\r\n            itemId,\r\n          });\r\n          return createErrorResponse('User not found', 404);\r\n        }\r\n\r\n        const userDataRecord = userData[0];\r\n\r\n        // Update the shopping item completion status\r\n        const { data: updatedItem, error: itemError } = await supabase\r\n          .from('shopping_items')\r\n          .update({\r\n            is_complete: true,\r\n            completed_by: user.id,\r\n            completed_at: new Date().toISOString()\r\n          })\r\n          .eq('id', itemId)\r\n          .select()\r\n          .single();\r\n\r\n        if (itemError) {\r\n          logger.error('Error updating shopping item completion', itemError, {\r\n            userId: user.id,\r\n            itemId,\r\n          });\r\n          return createErrorResponse('Failed to update shopping item', 500, itemError.message);\r\n        }\r\n\r\n        // Update user XP and coins\r\n        const currentXp = userDataRecord?.xp ?? 0;\r\n        const currentCoins = userDataRecord?.coins ?? 0;\r\n        const newXp = currentXp + 10;\r\n        const newCoins = currentCoins + 1;\r\n\r\n        const { error: updateError } = await supabase\r\n          .from('users')\r\n          .update({\r\n            xp: newXp,\r\n            coins: newCoins\r\n          })\r\n          .eq('id', user.id);\r\n\r\n        if (updateError) {\r\n          logger.error('Error updating user rewards after shopping completion', updateError, {\r\n            userId: user.id,\r\n            itemId,\r\n            newXp,\r\n            newCoins,\r\n          });\r\n          return createErrorResponse('Failed to update user rewards', 500, updateError.message);\r\n        }\r\n\r\n        // Add audit log entry for completion\r\n        await createAuditLog({\r\n          action: 'shopping_item.completed',\r\n          targetTable: 'shopping_items',\r\n          targetId: itemId,\r\n          userId: user.id,\r\n          metadata: { \r\n            household_id: household.id,\r\n            xp_awarded: 10,\r\n            coins_awarded: 1,\r\n            previous_status: false\r\n          }\r\n        });\r\n\r\n        logger.info('Shopping item completed with rewards', {\r\n          userId: user.id,\r\n          householdId: household.id,\r\n          itemId,\r\n          xpAwarded: 10,\r\n          coinsAwarded: 1,\r\n        });\r\n        return createSuccessResponse({ \r\n          item: updatedItem,\r\n          rewards: { xp: 10, coins: 1 }\r\n        }, 'Shopping item completed and rewards awarded');\r\n      } else {\r\n        // Toggle the item to the requested state\r\n        const { data: updatedItem, error: itemError } = await supabase\r\n          .from('shopping_items')\r\n          .update({\r\n            is_complete: is_complete,\r\n            completed_by: is_complete ? user.id : null,\r\n            completed_at: is_complete ? new Date().toISOString() : null\r\n          })\r\n          .eq('id', itemId)\r\n          .select()\r\n          .single();\r\n\r\n        if (itemError) {\r\n          logger.error('Error updating shopping item toggle state', itemError, {\r\n            userId: user.id,\r\n            itemId,\r\n            newState: is_complete,\r\n          });\r\n          return createErrorResponse('Failed to update shopping item', 500, itemError.message);\r\n        }\r\n\r\n        // Add audit log entry for status change\r\n        await createAuditLog({\r\n          action: is_complete ? 'shopping_item.completed' : 'shopping_item.uncompleted',\r\n          targetTable: 'shopping_items',\r\n          targetId: itemId,\r\n          userId: user.id,\r\n          metadata: { \r\n            household_id: household.id,\r\n            previous_status: !is_complete,\r\n            new_status: is_complete\r\n          }\r\n        });\r\n\r\n        logger.info('Shopping item toggled', {\r\n          userId: user.id,\r\n          householdId: household.id,\r\n          itemId,\r\n          newState: is_complete,\r\n        });\r\n        return createSuccessResponse({ item: updatedItem }, 'Shopping item toggled successfully');\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error('Shopping item toggle failed', error as Error, {\r\n        userId: user.id,\r\n        route: '/api/shopping-items/toggle',\r\n      });\r\n      return handleApiError(error, { route: '/api/shopping-items/toggle', method: 'POST', userId: user.id });\r\n    }\r\n  }, {\r\n    requireAuth: true,\r\n    requireCSRF: true,\r\n    rateLimitConfig: 'shopping'\r\n  });\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\shopping-lists\\[id]\\items\\[itemId]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\shopping-lists\\[id]\\items\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\shopping-lists\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\shopping-lists\\add-recipe-ingredients-auto\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\shopping-lists\\add-recipe-ingredients\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\shopping-lists\\confirm-auto-added\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\shopping-lists\\confirm-items\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\shopping-lists\\merge-duplicates\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\shopping-lists\\pending-confirmations\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\shopping-lists\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\stripe\\create-checkout-session\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\stripe\\create-portal-session\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\stripe\\webhook\\route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":54,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":54,"endColumn":22,"suggestions":[{"fix":{"range":[1850,1912],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":105,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":105,"endColumn":22,"suggestions":[{"fix":{"range":[3509,3571],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":115,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":115,"endColumn":20,"suggestions":[{"fix":{"range":[3823,3880],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":120,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":120,"endColumn":20,"suggestions":[{"fix":{"range":[3933,3984],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { stripe } from '@/lib/stripe';\r\nimport { headers } from 'next/headers';\r\nimport { createClient } from '@/lib/supabaseClient';\r\n\r\nconst webhookSecret = process.env.STRIPE_WEBHOOK_SECRET!;\r\n\r\nexport async function POST(req: NextRequest) {\r\n  const body = await req.text();\r\n  const signature = headers().get('stripe-signature')!;\r\n\r\n  let event;\r\n\r\n  try {\r\n    event = stripe.webhooks.constructEvent(body, signature, webhookSecret);\r\n  } catch (err) {\r\n    console.error('Webhook signature verification failed:', err);\r\n    return NextResponse.json({ error: 'Invalid signature' }, { status: 400 });\r\n  }\r\n\r\n  const supabase = createClient();\r\n\r\n  try {\r\n    switch (event.type) {\r\n      case 'checkout.session.completed': {\r\n        const session = event.data.object;\r\n        const customerId = session.customer as string;\r\n        const subscriptionId = session.subscription as string;\r\n        const priceId = session.line_items?.data[0]?.price?.id;\r\n\r\n        if (!priceId) {\r\n          console.error('No price ID found in checkout session');\r\n          break;\r\n        }\r\n\r\n        // Get the plan from the price ID\r\n        const plan = priceId === process.env.STRIPE_PRO_PRICE_ID ? 'pro' : \r\n                    priceId === process.env.STRIPE_PRO_PLUS_PRICE_ID ? 'pro_plus' : 'free';\r\n\r\n        // Update household plan in database\r\n        const { error } = await supabase\r\n          .from('households')\r\n          .update({ \r\n            plan,\r\n            stripe_customer_id: customerId,\r\n            stripe_subscription_id: subscriptionId,\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .eq('stripe_customer_id', customerId);\r\n\r\n        if (error) {\r\n          console.error('Error updating household plan:', error);\r\n        } else {\r\n          console.log(`Successfully updated household to ${plan} plan`);\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 'customer.subscription.updated': {\r\n        const subscription = event.data.object;\r\n        const customerId = subscription.customer as string;\r\n        const priceId = subscription.items.data[0]?.price?.id;\r\n\r\n        if (!priceId) {\r\n          console.error('No price ID found in subscription update');\r\n          break;\r\n        }\r\n\r\n        const plan = priceId === process.env.STRIPE_PRO_PRICE_ID ? 'pro' : \r\n                    priceId === process.env.STRIPE_PRO_PLUS_PRICE_ID ? 'pro_plus' : 'free';\r\n\r\n        // Update household plan\r\n        const { error } = await supabase\r\n          .from('households')\r\n          .update({ \r\n            plan,\r\n            stripe_subscription_id: subscription.id,\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .eq('stripe_customer_id', customerId);\r\n\r\n        if (error) {\r\n          console.error('Error updating subscription:', error);\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 'customer.subscription.deleted': {\r\n        const subscription = event.data.object;\r\n        const customerId = subscription.customer as string;\r\n\r\n        // Downgrade to free plan\r\n        const { error } = await supabase\r\n          .from('households')\r\n          .update({ \r\n            plan: 'free',\r\n            stripe_subscription_id: null,\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .eq('stripe_customer_id', customerId);\r\n\r\n        if (error) {\r\n          console.error('Error downgrading subscription:', error);\r\n        } else {\r\n          console.log('Successfully downgraded household to free plan');\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 'invoice.payment_failed': {\r\n        const invoice = event.data.object;\r\n        const customerId = invoice.customer as string;\r\n\r\n        // You might want to send an email notification here\r\n        console.log(`Payment failed for customer ${customerId}`);\r\n        break;\r\n      }\r\n\r\n      default:\r\n        console.log(`Unhandled event type: ${event.type}`);\r\n    }\r\n\r\n    return NextResponse.json({ received: true });\r\n  } catch (error) {\r\n    console.error('Error processing webhook:', error);\r\n    return NextResponse.json({ error: 'Webhook processing failed' }, { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\sync-user\\route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":8,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":8,"endColumn":18,"suggestions":[{"fix":{"range":[296,331],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":9,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":9,"endColumn":18,"suggestions":[{"fix":{"range":[339,380],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":21,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":21,"endColumn":18,"suggestions":[{"fix":{"range":[763,825],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":23,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":23,"endColumn":18,"suggestions":[{"fix":{"range":[901,938],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\r\nimport { withAPISecurity } from \"@/lib/security/apiProtection\";\r\nimport { syncUser } from \"@/lib/syncUser\";\r\n\r\nexport async function POST(request: NextRequest) {\r\n  return withAPISecurity(request, async (req, user) => {\r\n    try {\r\n      console.log(\"🚀 API route called\");\r\n      console.log(\"🔄 Syncing user\", user?.id);\r\n\r\n      if (!user) {\r\n        console.error(\"❌ No Clerk user found\");\r\n        return NextResponse.json({ error: \"No user\" }, { status: 401 });\r\n      }\r\n\r\n      const email = user.emailAddresses?.[0]?.emailAddress || \"\";\r\n      const name = user.firstName && user.lastName\r\n        ? `${user.firstName} ${user.lastName}`\r\n        : user.firstName || user.lastName || \"\";\r\n\r\n      console.log(\"📧 User details:\", { id: user.id, email, name });\r\n      const result = await syncUser({ id: user.id, email, name });\r\n      console.log(\"✅ Sync result\", result);\r\n\r\n      return NextResponse.json({ success: true });\r\n    } catch (e) {\r\n      console.error(\"❌ Sync user error\", e);\r\n      return NextResponse.json({ error: \"Internal error\" }, { status: 500 });\r\n    }\r\n  }, {\r\n    requireAuth: true,\r\n    requireCSRF: false, // Sync user doesn't need CSRF\r\n    rateLimitConfig: 'api'\r\n  });\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\test-calendar\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\test-db\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\test-validation\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":47,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@clerk/nextjs/server';\r\nimport { schemas } from '@/lib/validation/schemas';\r\nimport { requireFeatureAccess, getAvailableFeatures } from '@/lib/server/canAccessFeature';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { userId } = await auth();\r\n    if (!userId) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    // Test Zod validation\r\n    let validatedData;\r\n    try {\r\n      const body = await request.json();\r\n      // Test with shopping list schema\r\n      validatedData = schemas.createShoppingList.parse(body);\r\n    } catch (validationError: unknown) {\r\n      if (validationError instanceof Error && 'errors' in validationError) {\r\n        return NextResponse.json(\r\n          {\r\n            error: 'Validation failed',\r\n            details: (validationError as { errors: unknown }).errors,\r\n            schema: 'createShoppingList',\r\n          },\r\n          { status: 400 },\r\n        );\r\n      }\r\n\r\n      return NextResponse.json(\r\n        {\r\n          error: 'Validation failed',\r\n          details: 'Unknown validation error',\r\n          schema: 'createShoppingList',\r\n        },\r\n        { status: 400 },\r\n      );\r\n    }\r\n\r\n    // Test feature access\r\n    const testPlan = 'free'; // You can change this to test different plans\r\n    const availableFeatures = getAvailableFeatures(testPlan);\r\n    \r\n    try {\r\n      requireFeatureAccess(testPlan, 'meal_planner');\r\n    } catch (error) {\r\n      return NextResponse.json(\r\n        {\r\n          error: 'Feature access test failed',\r\n          requiredPlan: 'pro',\r\n          currentPlan: testPlan,\r\n          availableFeatures,\r\n        },\r\n        { status: 403 },\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'All validation tests passed!',\r\n      validatedData,\r\n      testPlan,\r\n      availableFeatures,\r\n      featureAccess: 'meal_planner',\r\n    });\r\n  } catch (error) {\r\n    console.error('Test validation error:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function GET() {\r\n  // Test endpoint to show available schemas and features\r\n  return NextResponse.json({\r\n    success: true,\r\n    message: 'Validation test endpoint',\r\n    availableSchemas: Object.keys(schemas),\r\n    featureKeys: [\r\n      'grocery_auto_gen',\r\n      'leaderboard', \r\n      'meal_planner',\r\n      'advanced_analytics',\r\n      'ai_insights',\r\n      'automation_rules',\r\n      'priority_support',\r\n      'data_export',\r\n      'recurring_chores',\r\n      'calendar_sync'\r\n    ],\r\n    usage: {\r\n      'POST /api/test-validation': 'Test Zod validation with shopping list data',\r\n      'GET /api/test-validation': 'Show available schemas and features'\r\n    }\r\n  });\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\today-view\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\update-game-mode\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\update-plan\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\user-data\\export\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UsersRow' is defined but never used.","line":11,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChoresRow' is defined but never used.","line":12,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MealPlanIngredientRow' is defined but never used.","line":16,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ShoppingItemRow' is defined but never used.","line":21,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MissingIngredient' is defined but never used.","line":60,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userData' is assigned a value but never used.","line":88,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { withAPISecurity } from '@/lib/security/apiProtection';\r\nimport { getDatabaseClient, getUserAndHouseholdData, createAuditLog } from '@/lib/api/database';\r\nimport { createErrorResponse, handleApiError } from '@/lib/api/errors';\r\nimport { logger, createRequestLogger } from '@/lib/logging/logger';\r\nimport type { SupabaseClient } from '@supabase/supabase-js';\r\nimport type { Database } from '@/types/database.types';\r\n\r\ntype SupabaseClientType = SupabaseClient<Database>;\r\n\r\ntype UsersRow = Database['public']['Tables']['users']['Row'];\r\ntype ChoresRow = Database['public']['Tables']['chores']['Row'];\r\ntype RewardRedemptionRow = Database['public']['Tables']['reward_redemptions']['Row'];\r\ntype ShoppingListRow = Database['public']['Tables']['shopping_lists']['Row'];\r\ntype MealPlanRow = Database['public']['Tables']['meal_plans']['Row'];\r\ntype MealPlanIngredientRow = Database['public']['Tables']['meal_plan_ingredients']['Row'] & {\r\n  meal_plans?: MealPlanRow | null;\r\n};\r\ntype RecipeRow = Database['public']['Tables']['recipes']['Row'];\r\ntype BillRow = Database['public']['Tables']['bills']['Row'];\r\ntype ShoppingItemRow = Database['public']['Tables']['shopping_items']['Row'];\r\n\r\ninterface UserProfileExport {\r\n  id: string;\r\n  email: string | null;\r\n  name: string | null;\r\n  xp: number | null;\r\n  created_at: string | null;\r\n}\r\n\r\ninterface UserChoreExport {\r\n  id: string;\r\n  title: string;\r\n  description: string | null;\r\n  status: string | null;\r\n  assigned_to: string | null;\r\n  created_at: string | null;\r\n  completed_at: string | null;\r\n}\r\n\r\ninterface UserDataExport {\r\n  profile?: UserProfileExport;\r\n  chores?: UserChoreExport[];\r\n  rewards?: RewardRedemptionRow[];\r\n}\r\n\r\ninterface HouseholdDataExport {\r\n  info?: {\r\n    id: string;\r\n    name: string | null;\r\n    game_mode: string | null;\r\n    created_at: string | null;\r\n  };\r\n  shopping_lists?: ShoppingListRow[];\r\n  meal_plans?: MealPlanRow[];\r\n  recipes?: RecipeRow[];\r\n  bills?: BillRow[];\r\n}\r\n\r\ninterface MissingIngredient {\r\n  ingredient_name: string;\r\n  meal_name: string;\r\n  meal_type: string;\r\n  quantity_needed: string;\r\n}\r\n\r\ntype AuditTrailEntry = Record<string, unknown>;\r\n\r\ninterface ExportPayload {\r\n  export_date: string;\r\n  user_id: string;\r\n  user_data: UserDataExport;\r\n  household_data: HouseholdDataExport;\r\n  audit_trail: AuditTrailEntry[];\r\n  export_format: 'json';\r\n  privacy_notice: string;\r\n}\r\n\r\nexport async function GET(req: NextRequest) {\r\n  return withAPISecurity(req, async (request, user) => {\r\n    const requestId = logger.generateRequestId();\r\n    const log = createRequestLogger(requestId);\r\n    \r\n    try {\r\n      log.apiCall('GET', '/api/user-data/export');\r\n      \r\n      // Get user and household data\r\n      const { user: userData, household, error: userError } = await getUserAndHouseholdData(user.id);\r\n      \r\n      if (userError || !household) {\r\n        log.apiError('GET', '/api/user-data/export', new Error('No household found'), { status: 404 });\r\n        return createErrorResponse('No household found', 404);\r\n      }\r\n\r\n      const supabase = getDatabaseClient();\r\n      log.info('Starting data export', { userId: user.id, householdId: household.id });\r\n\r\n      // Export user's personal data\r\n      const userDataExport = await exportUserData(supabase, user.id);\r\n      \r\n      // Export household data (if user is a member)\r\n      const householdData = await exportHouseholdData(supabase, household.id);\r\n      \r\n      // Export audit trail\r\n      const auditData = await exportAuditData(supabase, user.id);\r\n\r\n      const exportData: ExportPayload = {\r\n        export_date: new Date().toISOString(),\r\n        user_id: user.id,\r\n        user_data: userDataExport,\r\n        household_data: householdData,\r\n        audit_trail: auditData,\r\n        export_format: 'json',\r\n        privacy_notice: 'This export contains all your personal data stored in the application.'\r\n      };\r\n\r\n      log.apiSuccess('GET', '/api/user-data/export', { \r\n        userId: user.id, \r\n        householdId: household.id,\r\n        exportSize: JSON.stringify(exportData).length \r\n      });\r\n\r\n      // Add audit log entry\r\n      await createAuditLog({\r\n        action: 'user_data.exported',\r\n        targetTable: 'users',\r\n        targetId: user.id,\r\n        userId: user.id,\r\n        metadata: { \r\n          household_id: household.id,\r\n          export_size: JSON.stringify(exportData).length\r\n        }\r\n      });\r\n\r\n      // Return as downloadable JSON file\r\n      return new NextResponse(JSON.stringify(exportData, null, 2), {\r\n        status: 200,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Content-Disposition': `attachment; filename=\"user-data-export-${new Date().toISOString().split('T')[0]}.json\"`\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      return handleApiError(error, { route: '/api/user-data/export', method: 'GET', userId: user.id });\r\n    }\r\n  }, {\r\n    requireAuth: true,\r\n    requireCSRF: false,\r\n    rateLimitConfig: 'api'\r\n  });\r\n}\r\n\r\n// Export user's personal data\r\nasync function exportUserData(\r\n  supabase: SupabaseClientType,\r\n  userId: string,\r\n): Promise<UserDataExport> {\r\n  const userData: UserDataExport = {};\r\n\r\n  // User profile\r\n  const { data: userProfile } = await supabase\r\n    .from('users')\r\n    .select('*')\r\n    .eq('id', userId)\r\n    .single();\r\n  \r\n  if (userProfile) {\r\n    userData.profile = {\r\n      id: userProfile.id,\r\n      email: userProfile.email,\r\n      name: userProfile.name,\r\n      xp: userProfile.xp,\r\n      created_at: userProfile.created_at\r\n    };\r\n  }\r\n\r\n  // User's chores\r\n  const { data: userChores } = await supabase\r\n    .from('chores')\r\n    .select('*')\r\n    .eq('assigned_to', userId);\r\n  \r\n  if (userChores) {\r\n    userData.chores = userChores.map((chore) => ({\r\n      id: chore.id,\r\n      title: chore.title,\r\n      description: chore.description,\r\n      status: chore.status,\r\n      assigned_to: chore.assigned_to,\r\n      created_at: chore.created_at,\r\n      completed_at: chore.completed_at\r\n    }));\r\n  }\r\n\r\n  // User's rewards and redemptions\r\n  const { data: userRewards } = await supabase\r\n    .from('reward_redemptions')\r\n    .select('*')\r\n    .eq('user_id', userId);\r\n  \r\n  if (userRewards) {\r\n    userData.rewards = userRewards;\r\n  }\r\n\r\n  return userData;\r\n}\r\n\r\n// Export household data\r\nasync function exportHouseholdData(\r\n  supabase: SupabaseClientType,\r\n  householdId: string,\r\n): Promise<HouseholdDataExport> {\r\n  const householdData: HouseholdDataExport = {};\r\n\r\n  // Household info\r\n  const { data: household } = await supabase\r\n    .from('households')\r\n    .select('*')\r\n    .eq('id', householdId)\r\n    .single();\r\n  \r\n  if (household) {\r\n    householdData.info = {\r\n      id: household.id,\r\n      name: household.name,\r\n      game_mode: household.game_mode,\r\n      created_at: household.created_at\r\n    };\r\n  }\r\n\r\n  // Shopping lists\r\n  const { data: shoppingLists } = await supabase\r\n    .from('shopping_lists')\r\n    .select('*')\r\n    .eq('household_id', householdId);\r\n  \r\n  if (shoppingLists) {\r\n    householdData.shopping_lists = shoppingLists;\r\n  }\r\n\r\n  // Meal plans\r\n  const { data: mealPlans } = await supabase\r\n    .from('meal_plans')\r\n    .select('*')\r\n    .eq('household_id', householdId);\r\n  \r\n  if (mealPlans) {\r\n    householdData.meal_plans = mealPlans;\r\n  }\r\n\r\n  // Recipes\r\n  const { data: recipes } = await supabase\r\n    .from('recipes')\r\n    .select('*')\r\n    .eq('household_id', householdId);\r\n  \r\n  if (recipes) {\r\n    householdData.recipes = recipes;\r\n  }\r\n\r\n  // Bills\r\n  const { data: bills } = await supabase\r\n    .from('bills')\r\n    .select('*')\r\n    .eq('household_id', householdId);\r\n  \r\n  if (bills) {\r\n    householdData.bills = bills;\r\n  }\r\n\r\n  return householdData;\r\n}\r\n\r\n// Export audit trail\r\nasync function exportAuditData(supabase: SupabaseClientType, userId: string): Promise<AuditTrailEntry[]> {\r\n  const { data: auditTrail } = await supabase\r\n    .rpc('get_user_audit_trail', { p_user_id: userId, p_limit: 1000 });\r\n  \r\n  return auditTrail || [];\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\user-data\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\user-role\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\api\\websocket\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userData' is assigned a value but never used.","line":14,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userData' is assigned a value but never used.","line":49,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// WebSocket API Route for Real-time AI Processing\r\n// This can be easily removed if the WebSocket implementation doesn't work\r\n\r\nimport type { NextRequest } from 'next/server';\r\nimport { withAPISecurity } from '@/lib/security/apiProtection';\r\nimport { getUserAndHouseholdData } from '@/lib/api/database';\r\nimport { createErrorResponse, createSuccessResponse, handleApiError } from '@/lib/api/errors';\r\nimport { webSocketManager } from '@/lib/websocket/WebSocketServer';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  return withAPISecurity(request, async (req, user) => {\r\n    try {\r\n      // Get user and household data\r\n      const { user: userData, household, error: userError } = await getUserAndHouseholdData(user.id);\r\n      \r\n      if (userError || !household) {\r\n        return createErrorResponse('User not found or no household', 404);\r\n      }\r\n\r\n      // Check if WebSocket is initialized\r\n      if (!webSocketManager.isInitialized()) {\r\n        return createErrorResponse('WebSocket server not initialized', 503);\r\n      }\r\n\r\n      // Get WebSocket status\r\n      const status = {\r\n        initialized: webSocketManager.isInitialized(),\r\n        connectedUsers: webSocketManager.getConnectedUsersCount(),\r\n        householdRooms: webSocketManager.getHouseholdRoomsCount(),\r\n        websocketUrl: `${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/websocket`\r\n      };\r\n\r\n      return createSuccessResponse(status, 'WebSocket status retrieved successfully');\r\n\r\n    } catch (error) {\r\n      return handleApiError(error, { route: '/api/websocket', method: 'GET', userId: user.id });\r\n    }\r\n  }, {\r\n    requireAuth: true,\r\n    requireCSRF: false,\r\n    rateLimitConfig: 'api'\r\n  });\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  return withAPISecurity(request, async (req, user) => {\r\n    try {\r\n      // Get user and household data\r\n      const { user: userData, household, error: userError } = await getUserAndHouseholdData(user.id);\r\n      \r\n      if (userError || !household) {\r\n        return createErrorResponse('User not found or no household', 404);\r\n      }\r\n\r\n      const body = await req.json();\r\n      const { action } = body as { action?: string };\r\n\r\n      switch (action) {\r\n        case 'test_connection':\r\n          return createSuccessResponse({\r\n            connected: webSocketManager.isInitialized(),\r\n            message: 'WebSocket connection test completed'\r\n          }, 'Connection test completed');\r\n\r\n        case 'get_status':\r\n          return createSuccessResponse({\r\n            initialized: webSocketManager.isInitialized(),\r\n            connectedUsers: webSocketManager.getConnectedUsersCount(),\r\n            householdRooms: webSocketManager.getHouseholdRoomsCount()\r\n          }, 'WebSocket status retrieved');\r\n\r\n        default:\r\n          return createErrorResponse('Unknown action', 400);\r\n      }\r\n\r\n    } catch (error) {\r\n      return handleApiError(error, { route: '/api/websocket', method: 'POST', userId: user.id });\r\n    }\r\n  }, {\r\n    requireAuth: true,\r\n    requireCSRF: true,\r\n    rateLimitConfig: 'api'\r\n  });\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\attachments\\page.tsx","messages":[{"ruleId":"no-alert","severity":1,"message":"Unexpected confirm.","line":94,"column":10,"nodeType":"CallExpression","messageId":"unexpected","endLine":94,"endColumn":69},{"ruleId":"jsx-a11y/alt-text","severity":1,"message":"Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","line":152,"column":14,"nodeType":"JSXOpeningElement","endLine":152,"endColumn":43},{"ruleId":"prefer-template","severity":1,"message":"Unexpected string concatenation.","line":174,"column":12,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":174,"endColumn":76,"fix":{"range":[5377,5441],"text":"`${parseFloat((bytes / Math.pow(k, i)).toFixed(2))  } ${  sizes[i]}`"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":276,"column":30,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":281,"endColumn":30,"fix":{"range":[10159,10473],"text":"attachment.receipt_store ? <Badge variant=\"outline\" className=\"flex items-center gap-1\">\r\n                                <Store className=\"h-3 w-3\" />\r\n                                {attachment.receipt_store}\r\n                              </Badge> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":282,"column":30,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":287,"endColumn":30,"fix":{"range":[10505,10838],"text":"attachment.receipt_total ? <Badge variant=\"outline\" className=\"flex items-center gap-1\">\r\n                                <DollarSign className=\"h-3 w-3\" />\r\n                                ${attachment.receipt_total.toFixed(2)}\r\n                              </Badge> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":288,"column":30,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":292,"endColumn":30,"fix":{"range":[10870,11139],"text":"attachment.receipt_items && attachment.receipt_items.length > 0 ? <Badge variant=\"outline\">\r\n                                {attachment.receipt_items.length} items\r\n                              </Badge> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":385,"column":8,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":392,"endColumn":8,"fix":{"range":[14910,15123],"text":"selectedAttachment ? <div className=\"mt-8\">\r\n          <ReceiptItemsDisplay \r\n            attachmentId={selectedAttachment}\r\n            className=\"border-t pt-8\"\r\n          />\r\n        </div> : null"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":5,"source":"'use client';\r\n\r\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\r\nimport { useAuth } from '@clerk/nextjs';\r\nimport { useRouter } from 'next/navigation';\r\nimport { Card, CardContent } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Input } from '@/components/ui/input';\r\nimport {\r\n  FileText,\r\n  Image,\r\n  Receipt,\r\n  Search,\r\n  Store,\r\n  DollarSign,\r\n  CheckCircle,\r\n  AlertCircle,\r\n  Clock,\r\n} from 'lucide-react';\r\nimport { FileUpload } from '@/components/attachments/FileUpload';\r\nimport { ReceiptItemsDisplay } from '@/components/attachments/ReceiptItemsDisplay';\r\nimport { format } from 'date-fns';\r\nimport { toast } from 'sonner';\r\n\r\ninterface ReceiptItem {\r\n  id: string;\r\n  item_name: string;\r\n  item_price: number;\r\n  item_category?: string;\r\n  confidence_score: number;\r\n}\r\n\r\ninterface Attachment {\r\n  id: string;\r\n  file_name: string;\r\n  file_type: string;\r\n  file_size: number;\r\n  ocr_status: string;\r\n  ocr_confidence?: number;\r\n  receipt_total?: number;\r\n  receipt_date?: string;\r\n  receipt_store?: string;\r\n  receipt_items?: ReceiptItem[];\r\n  created_at: string;\r\n}\r\n\r\nexport default function AttachmentsPage() {\r\n  const { isSignedIn, isLoaded } = useAuth();\r\n  const router = useRouter();\r\n  const [attachments, setAttachments] = useState<Attachment[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedAttachment, setSelectedAttachment] = useState<string | null>(null);\r\n  const [filterStatus, setFilterStatus] = useState<string>('all');\r\n\r\n  const fetchAttachments = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch('/api/attachments');\r\n      const data = await response.json();\r\n\r\n      if (data.success) {\r\n        setAttachments(data.attachments || []);\r\n      } else {\r\n        toast.error('Failed to load attachments');\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error fetching attachments:', error);\r\n      toast.error('Failed to load attachments');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!isLoaded) return;\r\n\r\n    if (!isSignedIn) {\r\n      router.push('/sign-in');\r\n      return;\r\n    }\r\n\r\n    void fetchAttachments();\r\n  }, [fetchAttachments, isLoaded, isSignedIn, router]);\r\n\r\n  const handleUploadComplete = useCallback((attachment: Attachment) => {\r\n    void fetchAttachments();\r\n    setSelectedAttachment(attachment.id);\r\n  }, [fetchAttachments]);\r\n\r\n  const handleDeleteAttachment = useCallback(async (attachmentId: string) => {\r\n    if (!confirm('Are you sure you want to delete this attachment?')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('/api/attachments', {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ attachment_id: attachmentId })\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        toast.success('Attachment deleted successfully');\r\n        setAttachments((prev) => prev.filter((a) => a.id !== attachmentId));\r\n        if (selectedAttachment === attachmentId) {\r\n          setSelectedAttachment(null);\r\n        }\r\n      } else {\r\n        toast.error(data.error || 'Failed to delete attachment');\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error deleting attachment:', error);\r\n      toast.error('Failed to delete attachment');\r\n    }\r\n  }, [selectedAttachment]);\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'completed':\r\n        return 'bg-green-100 text-green-800';\r\n      case 'processing':\r\n        return 'bg-blue-100 text-blue-800';\r\n      case 'failed':\r\n        return 'bg-red-100 text-red-800';\r\n      case 'pending':\r\n        return 'bg-yellow-100 text-yellow-800';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'completed':\r\n        return <CheckCircle className=\"h-4 w-4\" />;\r\n      case 'processing':\r\n        return <Clock className=\"h-4 w-4\" />;\r\n      case 'failed':\r\n        return <AlertCircle className=\"h-4 w-4\" />;\r\n      default:\r\n        return <Clock className=\"h-4 w-4\" />;\r\n    }\r\n  };\r\n\r\n  const getFileIcon = (fileType: string) => {\r\n    if (fileType.startsWith('image/')) {\r\n      return <Image className=\"h-4 w-4\" />;\r\n    }\r\n    return <FileText className=\"h-4 w-4\" />;\r\n  };\r\n\r\n  const filteredAttachments = useMemo(() => {\r\n    return attachments.filter((attachment) => {\r\n      const matchesSearch =\r\n        attachment.file_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        attachment.receipt_store?.toLowerCase().includes(searchTerm.toLowerCase());\r\n\r\n      const matchesFilter = filterStatus === 'all' || attachment.ocr_status === filterStatus;\r\n\r\n      return matchesSearch && matchesFilter;\r\n    });\r\n  }, [attachments, filterStatus, searchTerm]);\r\n\r\n  const formatFileSize = (bytes: number) => {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  };\r\n\r\n  if (!isLoaded || loading) {\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"flex items-center justify-center min-h-64\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      {/* Header */}\r\n      <div className=\"mb-8\">\r\n        <div className=\"flex items-center gap-3 mb-4\">\r\n          <Receipt className=\"h-8 w-8 text-blue-500\" />\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">Receipts & Documents</h1>\r\n          <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\r\n            OCR-Powered\r\n          </Badge>\r\n        </div>\r\n        <p className=\"text-gray-600 text-lg\">\r\n          Upload receipts and documents for automatic text extraction and shopping list integration\r\n        </p>\r\n      </div>\r\n\r\n      <Tabs defaultValue=\"upload\" className=\"space-y-6\">\r\n        <TabsList className=\"grid w-full grid-cols-3\">\r\n          <TabsTrigger value=\"upload\">Upload</TabsTrigger>\r\n          <TabsTrigger value=\"receipts\">Receipts ({attachments.filter(a => a.ocr_status === 'completed').length})</TabsTrigger>\r\n          <TabsTrigger value=\"processing\">Processing ({attachments.filter(a => a.ocr_status === 'processing' || a.ocr_status === 'pending').length})</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"upload\" className=\"space-y-6\">\r\n          <FileUpload \r\n            onUploadComplete={handleUploadComplete}\r\n            onUploadError={(error) => toast.error(error)}\r\n          />\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"receipts\" className=\"space-y-6\">\r\n          {/* Search and Filter */}\r\n          <div className=\"flex gap-4\">\r\n            <div className=\"flex-1\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 transform text-gray-400 h-4 w-4\" />\r\n                <Input\r\n                  placeholder=\"Search receipts by name or store...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <select\r\n              value={filterStatus}\r\n              onChange={(e) => setFilterStatus(e.target.value)}\r\n              className=\"px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n            >\r\n              <option value=\"all\">All Status</option>\r\n              <option value=\"completed\">Completed</option>\r\n              <option value=\"processing\">Processing</option>\r\n              <option value=\"failed\">Failed</option>\r\n            </select>\r\n          </div>\r\n\r\n          {/* Attachments List */}\r\n          <div className=\"grid gap-4\">\r\n            {filteredAttachments.map((attachment) => (\r\n              <Card \r\n                key={attachment.id} \r\n                className={`cursor-pointer transition-colors ${\r\n                  selectedAttachment === attachment.id ? 'ring-2 ring-blue-500' : 'hover:bg-gray-50'\r\n                }`}\r\n                onClick={() => setSelectedAttachment(attachment.id)}\r\n              >\r\n                <CardContent className=\"p-4\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"flex items-center gap-3 flex-1 min-w-0\">\r\n                      {getFileIcon(attachment.file_type)}\r\n                      <div className=\"flex-1 min-w-0\">\r\n                        <h3 className=\"font-medium text-gray-900 truncate\">\r\n                          {attachment.file_name}\r\n                        </h3>\r\n                        <div className=\"flex items-center gap-2 mt-1\">\r\n                          <Badge className={getStatusColor(attachment.ocr_status)}>\r\n                            {getStatusIcon(attachment.ocr_status)}\r\n                            <span className=\"ml-1 capitalize\">{attachment.ocr_status}</span>\r\n                          </Badge>\r\n                          <span className=\"text-sm text-gray-500\">\r\n                            {formatFileSize(attachment.file_size)}\r\n                          </span>\r\n                          <span className=\"text-sm text-gray-500\">\r\n                            {format(new Date(attachment.created_at), 'MMM dd, yyyy')}\r\n                          </span>\r\n                        </div>\r\n                        \r\n                        {attachment.ocr_status === 'completed' && (\r\n                          <div className=\"flex items-center gap-2 mt-2\">\r\n                            {attachment.receipt_store && (\r\n                            <Badge variant=\"outline\" className=\"flex items-center gap-1\">\r\n                                <Store className=\"h-3 w-3\" />\r\n                                {attachment.receipt_store}\r\n                              </Badge>\r\n                            )}\r\n                            {attachment.receipt_total && (\r\n                              <Badge variant=\"outline\" className=\"flex items-center gap-1\">\r\n                                <DollarSign className=\"h-3 w-3\" />\r\n                                ${attachment.receipt_total.toFixed(2)}\r\n                              </Badge>\r\n                            )}\r\n                            {attachment.receipt_items && attachment.receipt_items.length > 0 && (\r\n                              <Badge variant=\"outline\">\r\n                                {attachment.receipt_items.length} items\r\n                              </Badge>\r\n                            )}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"flex items-center gap-2\">\r\n                      {attachment.ocr_status === 'completed' && (\r\n                        <Button\r\n                          size=\"sm\"\r\n                          variant=\"outline\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            setSelectedAttachment(attachment.id);\r\n                          }}\r\n                        >\r\n                          View Items\r\n                        </Button>\r\n                      )}\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"ghost\"\r\n                        onClick={(e) => {\r\n                          e.stopPropagation();\r\n                          handleDeleteAttachment(attachment.id);\r\n                        }}\r\n                        className=\"text-red-600 hover:text-red-700\"\r\n                      >\r\n                        Delete\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n\r\n          {filteredAttachments.length === 0 && (\r\n            <Card>\r\n              <CardContent className=\"p-8 text-center\">\r\n                <Receipt className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\r\n                <p className=\"text-gray-600\">\r\n                  {searchTerm || filterStatus !== 'all' \r\n                    ? 'No receipts match your search criteria'\r\n                    : 'No receipts uploaded yet. Upload your first receipt to get started!'\r\n                  }\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"processing\" className=\"space-y-6\">\r\n          <div className=\"grid gap-4\">\r\n            {attachments\r\n              .filter(a => a.ocr_status === 'processing' || a.ocr_status === 'pending')\r\n              .map((attachment) => (\r\n                <Card key={attachment.id}>\r\n                  <CardContent className=\"p-4\">\r\n                    <div className=\"flex items-center gap-3\">\r\n                      {getFileIcon(attachment.file_type)}\r\n                      <div className=\"flex-1\">\r\n                        <h3 className=\"font-medium text-gray-900\">\r\n                          {attachment.file_name}\r\n                        </h3>\r\n                        <div className=\"flex items-center gap-2 mt-1\">\r\n                          <Badge className={getStatusColor(attachment.ocr_status)}>\r\n                            {getStatusIcon(attachment.ocr_status)}\r\n                            <span className=\"ml-1 capitalize\">{attachment.ocr_status}</span>\r\n                          </Badge>\r\n                          <span className=\"text-sm text-gray-500\">\r\n                            Processing OCR...\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n          </div>\r\n\r\n          {attachments.filter(a => a.ocr_status === 'processing' || a.ocr_status === 'pending').length === 0 && (\r\n            <Card>\r\n              <CardContent className=\"p-8 text-center\">\r\n                <Clock className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\r\n                <p className=\"text-gray-600\">No files currently being processed</p>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n        </TabsContent>\r\n      </Tabs>\r\n\r\n      {/* Receipt Items Display */}\r\n      {selectedAttachment && (\r\n        <div className=\"mt-8\">\r\n          <ReceiptItemsDisplay \r\n            attachmentId={selectedAttachment}\r\n            className=\"border-t pt-8\"\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\batch-processing\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\bills\\[id]\\edit\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userData' is assigned a value but never used.","line":29,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":19},{"ruleId":"no-alert","severity":1,"message":"Unexpected confirm.","line":116,"column":10,"nodeType":"CallExpression","messageId":"unexpected","endLine":116,"endColumn":93},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":141,"column":11,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":141,"endColumn":99,"fix":{"range":[4147,4154],"text":" />"}},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":154,"column":57,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4612,4685],"text":"The bill you&apos;re looking for doesn't exist or you don't have access to it."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4612,4685],"text":"The bill you&lsquo;re looking for doesn't exist or you don't have access to it."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4612,4685],"text":"The bill you&#39;re looking for doesn't exist or you don't have access to it."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4612,4685],"text":"The bill you&rsquo;re looking for doesn't exist or you don't have access to it."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":154,"column":78,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4612,4685],"text":"The bill you're looking for doesn&apos;t exist or you don't have access to it."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4612,4685],"text":"The bill you're looking for doesn&lsquo;t exist or you don't have access to it."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4612,4685],"text":"The bill you're looking for doesn&#39;t exist or you don't have access to it."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4612,4685],"text":"The bill you're looking for doesn&rsquo;t exist or you don't have access to it."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":154,"column":97,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4612,4685],"text":"The bill you're looking for doesn't exist or you don&apos;t have access to it."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4612,4685],"text":"The bill you're looking for doesn't exist or you don&lsquo;t have access to it."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4612,4685],"text":"The bill you're looking for doesn't exist or you don&#39;t have access to it."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4612,4685],"text":"The bill you're looking for doesn't exist or you don&rsquo;t have access to it."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":261,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":261,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9302,9305],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9302,9305],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useRouter } from 'next/navigation';\r\nimport { useUser } from '@clerk/nextjs';\r\nimport { toast } from 'sonner';\r\nimport { useUserData } from '@/hooks/useUserData';\r\n\r\ninterface Bill {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  amount: number;\r\n  currency: string;\r\n  due_date: string;\r\n  issued_date: string;\r\n  paid_date?: string;\r\n  status: 'pending' | 'paid' | 'overdue' | 'cancelled';\r\n  category?: string;\r\n  priority: 'low' | 'medium' | 'high' | 'urgent';\r\n  source: string;\r\n  created_at: string;\r\n}\r\n\r\nexport default function EditBillPage() {\r\n  const params = useParams();\r\n  const router = useRouter();\r\n  const { user } = useUser();\r\n  const { userData } = useUserData();\r\n  const [bill, setBill] = useState<Bill | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  \r\n  // Form state\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    description: '',\r\n    amount: '',\r\n    due_date: '',\r\n    category: 'General',\r\n    priority: 'medium' as const\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (params.id && user) {\r\n      void fetchBill();\r\n    }\r\n  }, [fetchBill, params.id, user]);\r\n\r\n  const fetchBill = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(`/api/bills/${params.id}`);\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const billData = data.bill;\r\n        setBill(billData);\r\n        setFormData({\r\n          title: billData.title || '',\r\n          description: billData.description || '',\r\n          amount: billData.amount?.toString() || '',\r\n          due_date: billData.due_date || '',\r\n          category: billData.category || 'General',\r\n          priority: billData.priority || 'medium'\r\n        });\r\n      } else {\r\n        console.error('Failed to fetch bill');\r\n        toast.error('Failed to load bill');\r\n        router.push('/bills');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching bill:', error);\r\n      toast.error('Error loading bill');\r\n      router.push('/bills');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [params.id, router]);\r\n\r\n  const handleSave = useCallback(async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!formData.title || !formData.amount || !formData.due_date) {\r\n      toast.error('Please fill in all required fields');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setSaving(true);\r\n      \r\n      const response = await fetch(`/api/bills/${params.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        toast.success('Bill updated successfully!');\r\n        router.push('/bills');\r\n      } else {\r\n        const error = await response.json();\r\n        toast.error(error.error || 'Failed to update bill');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating bill:', error);\r\n      toast.error('Something went wrong. Please try again.');\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  }, [formData, params.id, router]);\r\n\r\n  const handleDelete = useCallback(async () => {\r\n    if (!confirm('Are you sure you want to delete this bill? This action cannot be undone.')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`/api/bills/${params.id}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (response.ok) {\r\n        toast.success('Bill deleted successfully!');\r\n        router.push('/bills');\r\n      } else {\r\n        toast.error('Failed to delete bill');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting bill:', error);\r\n      toast.error('Something went wrong');\r\n    }\r\n  }, [params.id, router]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\r\n          <p className=\"mt-4 text-gray-600\">Loading bill...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!bill) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"text-gray-400 text-6xl mb-4\">💰</div>\r\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Bill not found</h3>\r\n          <p className=\"text-gray-600 mb-4\">The bill you're looking for doesn't exist or you don't have access to it.</p>\r\n          <button\r\n            onClick={() => router.push('/bills')}\r\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\"\r\n          >\r\n            Back to Bills\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      <div className=\"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n        {/* Header */}\r\n        <div className=\"mb-8\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Edit Bill</h1>\r\n              <p className=\"text-gray-600\">Update bill details and information</p>\r\n            </div>\r\n            <button\r\n              onClick={handleDelete}\r\n              className=\"px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors\"\r\n            >\r\n              Delete Bill\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Edit Form */}\r\n        <div className=\"bg-white rounded-lg shadow p-6\">\r\n          <form onSubmit={handleSave} className=\"space-y-4\">\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <label htmlFor=\"title\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Bill Title *\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"title\"\r\n                  required\r\n                  value={formData.title}\r\n                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  placeholder=\"e.g., Electricity Bill - January 2024\"\r\n                />\r\n              </div>\r\n              \r\n              <div>\r\n                <label htmlFor=\"amount\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Amount (AUD) *\r\n                </label>\r\n                <input\r\n                  type=\"number\"\r\n                  id=\"amount\"\r\n                  required\r\n                  step=\"0.01\"\r\n                  min=\"0\"\r\n                  value={formData.amount}\r\n                  onChange={(e) => setFormData({ ...formData, amount: e.target.value })}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  placeholder=\"89.50\"\r\n                />\r\n              </div>\r\n              \r\n              <div>\r\n                <label htmlFor=\"due_date\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Due Date *\r\n                </label>\r\n                <input\r\n                  type=\"date\"\r\n                  id=\"due_date\"\r\n                  required\r\n                  value={formData.due_date}\r\n                  onChange={(e) => setFormData({ ...formData, due_date: e.target.value })}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                />\r\n              </div>\r\n              \r\n              <div>\r\n                <label htmlFor=\"category\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Category\r\n                </label>\r\n                <select\r\n                  id=\"category\"\r\n                  value={formData.category}\r\n                  onChange={(e) => setFormData({ ...formData, category: e.target.value })}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                >\r\n                  <option value=\"General\">General</option>\r\n                  <option value=\"Utilities\">Utilities</option>\r\n                  <option value=\"Insurance\">Insurance</option>\r\n                  <option value=\"Rent/Mortgage\">Rent/Mortgage</option>\r\n                  <option value=\"Subscriptions\">Subscriptions</option>\r\n                  <option value=\"Other\">Other</option>\r\n                </select>\r\n              </div>\r\n              \r\n              <div>\r\n                <label htmlFor=\"priority\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Priority\r\n                </label>\r\n                <select\r\n                  id=\"priority\"\r\n                  value={formData.priority}\r\n                  onChange={(e) => setFormData({ ...formData, priority: e.target.value as any })}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                >\r\n                  <option value=\"low\">Low</option>\r\n                  <option value=\"medium\">Medium</option>\r\n                  <option value=\"high\">High</option>\r\n                  <option value=\"urgent\">Urgent</option>\r\n                </select>\r\n              </div>\r\n              \r\n              <div className=\"md:col-span-2\">\r\n                <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Description\r\n                </label>\r\n                <textarea\r\n                  id=\"description\"\r\n                  rows={3}\r\n                  value={formData.description}\r\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  placeholder=\"Optional description or notes about this bill\"\r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-end space-x-3 pt-4\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => router.push('/bills')}\r\n                className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors\"\r\n              >\r\n                Cancel\r\n              </button>\r\n              <button\r\n                type=\"submit\"\r\n                disabled={saving}\r\n                className=\"px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n              >\r\n                {saving ? 'Saving...' : 'Save Changes'}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\bills\\page.tsx","messages":[{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":218,"column":11,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":218,"endColumn":99,"fix":{"range":[6738,6745],"text":" />"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":253,"column":10,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":373,"endColumn":10,"fix":{"range":[8039,13954],"text":"showCreateForm ? <div className=\"bg-white rounded-lg shadow p-6 mb-8\">\r\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Create New Bill</h2>\r\n            <form onSubmit={handleCreateBill} className=\"space-y-4\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div>\r\n                  <label htmlFor=\"title\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Bill Title *\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"title\"\r\n                    required\r\n                    value={formData.title}\r\n                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    placeholder=\"e.g., Electricity Bill - January 2024\"\r\n                  />\r\n                </div>\r\n                \r\n                <div>\r\n                  <label htmlFor=\"amount\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Amount (AUD) *\r\n                  </label>\r\n                  <input\r\n                    type=\"number\"\r\n                    id=\"amount\"\r\n                    required\r\n                    step=\"0.01\"\r\n                    min=\"0\"\r\n                    value={formData.amount}\r\n                    onChange={(e) => setFormData({ ...formData, amount: e.target.value })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    placeholder=\"89.50\"\r\n                  />\r\n                </div>\r\n                \r\n                <div>\r\n                  <label htmlFor=\"due_date\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Due Date *\r\n                  </label>\r\n                  <input\r\n                    type=\"date\"\r\n                    id=\"due_date\"\r\n                    required\r\n                    value={formData.due_date}\r\n                    onChange={(e) => setFormData({ ...formData, due_date: e.target.value })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  />\r\n                </div>\r\n                \r\n                <div>\r\n                  <label htmlFor=\"category\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Category\r\n                  </label>\r\n                  <select\r\n                    id=\"category\"\r\n                    value={formData.category}\r\n                    onChange={(e) => setFormData({ ...formData, category: e.target.value })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  >\r\n                    <option value=\"General\">General</option>\r\n                    <option value=\"Utilities\">Utilities</option>\r\n                    <option value=\"Insurance\">Insurance</option>\r\n                    <option value=\"Rent/Mortgage\">Rent/Mortgage</option>\r\n                    <option value=\"Subscriptions\">Subscriptions</option>\r\n                    <option value=\"Other\">Other</option>\r\n                  </select>\r\n                </div>\r\n                \r\n                <div>\r\n                  <label htmlFor=\"priority\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Priority\r\n                  </label>\r\n                  <select\r\n                    id=\"priority\"\r\n                    value={formData.priority}\r\n                    onChange={(e) => setFormData({ ...formData, priority: e.target.value as any })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  >\r\n                    <option value=\"low\">Low</option>\r\n                    <option value=\"medium\">Medium</option>\r\n                    <option value=\"high\">High</option>\r\n                    <option value=\"urgent\">Urgent</option>\r\n                  </select>\r\n                </div>\r\n                \r\n                <div className=\"md:col-span-2\">\r\n                  <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Description\r\n                  </label>\r\n                  <textarea\r\n                    id=\"description\"\r\n                    rows={3}\r\n                    value={formData.description}\r\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    placeholder=\"Optional description or notes about this bill\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"flex justify-end space-x-3\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => setShowCreateForm(false)}\r\n                  className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button\r\n                  type=\"submit\"\r\n                  disabled={creatingBill}\r\n                  className=\"px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n                >\r\n                  {creatingBill ? 'Creating...' : 'Create Bill'}\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div> : null"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":330,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":330,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11898,11901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11898,11901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":416,"column":24,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":418,"endColumn":24,"fix":{"range":[16092,16228],"text":"bill.description ? <p className=\"text-gray-600 text-sm mb-2\">{bill.description}</p> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":423,"column":26,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":423,"endColumn":132,"fix":{"range":[16624,16730],"text":"bill.category ? <span>Category: <span className=\"font-medium text-gray-900\">{bill.category}</span></span> : null"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":4,"source":"'use client';\r\n\r\nimport { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { useUser } from '@clerk/nextjs';\r\nimport { useRouter } from 'next/navigation';\r\nimport { toast } from 'sonner';\r\nimport { postEventTypes } from '@/lib/postEvent';\r\nimport { useUserData } from '@/hooks/useUserData';\r\n\r\ninterface Bill {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  amount: number;\r\n  currency: string;\r\n  due_date: string;\r\n  issued_date: string;\r\n  paid_date?: string;\r\n  status: 'pending' | 'paid' | 'overdue' | 'cancelled';\r\n  category?: string;\r\n  priority: 'low' | 'medium' | 'high' | 'urgent';\r\n  source: string;\r\n  created_at: string;\r\n}\r\n\r\nexport default function BillsPage() {\r\n  const { user } = useUser();\r\n  const { userData } = useUserData();\r\n  const router = useRouter();\r\n  const [bills, setBills] = useState<Bill[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [creatingBill, setCreatingBill] = useState(false);\r\n  const [showCreateForm, setShowCreateForm] = useState(false);\r\n  \r\n  // Form state\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    description: '',\r\n    amount: '',\r\n    due_date: '',\r\n    category: 'General',\r\n    priority: 'medium' as Bill['priority'],\r\n  });\r\n\r\n  const fetchBills = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch('/api/bills');\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setBills(data.bills || []);\r\n      } else {\r\n        console.error('Failed to fetch bills');\r\n        toast.error('Failed to load bills');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching bills:', error);\r\n      toast.error('Error loading bills');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      void fetchBills();\r\n    }\r\n  }, [fetchBills, user]);\r\n\r\n  const handleCreateBill = useCallback(async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!formData.title || !formData.amount || !formData.due_date) {\r\n      toast.error('Please fill in all required fields');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setCreatingBill(true);\r\n      \r\n      const response = await fetch('/api/bills', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        await response.json();\r\n        toast.success('Bill created successfully!');\r\n        \r\n        // Reset form and refresh bills\r\n        setFormData({\r\n          title: '',\r\n          description: '',\r\n          amount: '',\r\n          due_date: '',\r\n          category: 'General',\r\n          priority: 'medium'\r\n        });\r\n        setShowCreateForm(false);\r\n        void fetchBills();\r\n        \r\n        // Trigger automation event\r\n        try {\r\n          if (userData?.household_id) {\r\n            await postEventTypes.billCreated({\r\n              household_id: userData.household_id,\r\n              title: formData.title,\r\n              amount: parseFloat(formData.amount),\r\n              due_date: formData.due_date,\r\n              category: formData.category\r\n            });\r\n          }\r\n        } catch (error) {\r\n          console.error('Failed to trigger automation event:', error);\r\n        }\r\n      } else {\r\n        const error = await response.json();\r\n        toast.error(error.error || 'Failed to create bill');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating bill:', error);\r\n      toast.error('Something went wrong. Please try again.');\r\n    } finally {\r\n      setCreatingBill(false);\r\n    }\r\n  }, [fetchBills, formData, userData?.household_id]);\r\n\r\n  const handleMarkAsPaid = useCallback(async (billId: string) => {\r\n    try {\r\n      const response = await fetch(`/api/bills/${billId}/mark-paid`, {\r\n        method: 'POST',\r\n      });\r\n\r\n      if (response.ok) {\r\n        toast.success('Bill marked as paid!');\r\n        void fetchBills();\r\n        \r\n        // Trigger automation event\r\n        try {\r\n          if (userData?.household_id) {\r\n            await postEventTypes.billPaid({ \r\n              household_id: userData.household_id,\r\n              bill_id: billId \r\n            });\r\n          }\r\n        } catch (error) {\r\n          console.error('Failed to trigger automation event:', error);\r\n        }\r\n      } else {\r\n        toast.error('Failed to mark bill as paid');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error marking bill as paid:', error);\r\n      toast.error('Something went wrong');\r\n    }\r\n  }, [fetchBills, userData?.household_id]);\r\n\r\n  const handleTestAutomation = useCallback(async () => {\r\n    try {\r\n      if (!userData?.household_id) {\r\n        toast.error('Please complete onboarding first');\r\n        return;\r\n      }\r\n      \r\n      // Trigger a test bill event\r\n      await postEventTypes.billEmailReceived({\r\n        household_id: userData.household_id,\r\n        subject: 'Test Electricity Bill',\r\n        amount: 89.50,\r\n        due_date: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n        vendor: 'Origin Energy'\r\n      });\r\n      \r\n      toast.success('Test automation event triggered! Check the Inbox for details.');\r\n    } catch (error) {\r\n      console.error('Error triggering test automation:', error);\r\n      toast.error('Failed to trigger test automation');\r\n    }\r\n  }, [userData?.household_id]);\r\n\r\n  const getStatusColor = useCallback((status: Bill['status']) => {\r\n    switch (status) {\r\n      case 'paid': return 'text-green-600 bg-green-100';\r\n      case 'overdue': return 'text-red-600 bg-red-100';\r\n      case 'pending': return 'text-yellow-600 bg-yellow-100';\r\n      default: return 'text-gray-600 bg-gray-100';\r\n    }\r\n  }, []);\r\n\r\n  const getPriorityColor = useCallback((priority: Bill['priority']) => {\r\n    switch (priority) {\r\n      case 'urgent': return 'text-red-600 bg-red-100';\r\n      case 'high': return 'text-orange-600 bg-orange-100';\r\n      case 'medium': return 'text-yellow-600 bg-yellow-100';\r\n      case 'low': return 'text-green-600 bg-green-100';\r\n      default: return 'text-gray-600 bg-gray-100';\r\n    }\r\n  }, []);\r\n\r\n  const pendingCount = useMemo(\r\n    () => bills.filter((bill) => bill.status === 'pending').length,\r\n    [bills],\r\n  );\r\n\r\n  const overdueCount = useMemo(\r\n    () => bills.filter((bill) => bill.status === 'overdue').length,\r\n    [bills],\r\n  );\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\r\n          <p className=\"mt-4 text-gray-600\">Loading bills...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n        {/* Header */}\r\n        <div className=\"mb-8\">\r\n          <div className=\"flex justify-between items-center\">\r\n            <div>\r\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">💰 Bills</h1>\r\n              <p className=\"text-gray-600\">Manage your household bills and automate bill tracking</p>\r\n            </div>\r\n            <div className=\"flex space-x-3\">\r\n              <button\r\n                onClick={handleTestAutomation}\r\n                className=\"px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors\"\r\n              >\r\n                🧪 Test Automation\r\n              </button>\r\n              <button\r\n                onClick={() => setShowCreateForm(!showCreateForm)}\r\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\"\r\n              >\r\n                {showCreateForm ? 'Cancel' : '+ Add Bill'}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Create Bill Form */}\r\n        {showCreateForm && (\r\n          <div className=\"bg-white rounded-lg shadow p-6 mb-8\">\r\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Create New Bill</h2>\r\n            <form onSubmit={handleCreateBill} className=\"space-y-4\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div>\r\n                  <label htmlFor=\"title\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Bill Title *\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"title\"\r\n                    required\r\n                    value={formData.title}\r\n                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    placeholder=\"e.g., Electricity Bill - January 2024\"\r\n                  />\r\n                </div>\r\n                \r\n                <div>\r\n                  <label htmlFor=\"amount\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Amount (AUD) *\r\n                  </label>\r\n                  <input\r\n                    type=\"number\"\r\n                    id=\"amount\"\r\n                    required\r\n                    step=\"0.01\"\r\n                    min=\"0\"\r\n                    value={formData.amount}\r\n                    onChange={(e) => setFormData({ ...formData, amount: e.target.value })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    placeholder=\"89.50\"\r\n                  />\r\n                </div>\r\n                \r\n                <div>\r\n                  <label htmlFor=\"due_date\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Due Date *\r\n                  </label>\r\n                  <input\r\n                    type=\"date\"\r\n                    id=\"due_date\"\r\n                    required\r\n                    value={formData.due_date}\r\n                    onChange={(e) => setFormData({ ...formData, due_date: e.target.value })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  />\r\n                </div>\r\n                \r\n                <div>\r\n                  <label htmlFor=\"category\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Category\r\n                  </label>\r\n                  <select\r\n                    id=\"category\"\r\n                    value={formData.category}\r\n                    onChange={(e) => setFormData({ ...formData, category: e.target.value })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  >\r\n                    <option value=\"General\">General</option>\r\n                    <option value=\"Utilities\">Utilities</option>\r\n                    <option value=\"Insurance\">Insurance</option>\r\n                    <option value=\"Rent/Mortgage\">Rent/Mortgage</option>\r\n                    <option value=\"Subscriptions\">Subscriptions</option>\r\n                    <option value=\"Other\">Other</option>\r\n                  </select>\r\n                </div>\r\n                \r\n                <div>\r\n                  <label htmlFor=\"priority\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Priority\r\n                  </label>\r\n                  <select\r\n                    id=\"priority\"\r\n                    value={formData.priority}\r\n                    onChange={(e) => setFormData({ ...formData, priority: e.target.value as any })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                  >\r\n                    <option value=\"low\">Low</option>\r\n                    <option value=\"medium\">Medium</option>\r\n                    <option value=\"high\">High</option>\r\n                    <option value=\"urgent\">Urgent</option>\r\n                  </select>\r\n                </div>\r\n                \r\n                <div className=\"md:col-span-2\">\r\n                  <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Description\r\n                  </label>\r\n                  <textarea\r\n                    id=\"description\"\r\n                    rows={3}\r\n                    value={formData.description}\r\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    placeholder=\"Optional description or notes about this bill\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"flex justify-end space-x-3\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => setShowCreateForm(false)}\r\n                  className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button\r\n                  type=\"submit\"\r\n                  disabled={creatingBill}\r\n                  className=\"px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n                >\r\n                  {creatingBill ? 'Creating...' : 'Create Bill'}\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        )}\r\n\r\n        {/* Bills List */}\r\n        <div className=\"bg-white rounded-lg shadow\">\r\n          <div className=\"px-6 py-4 border-b border-gray-200\">\r\n            <h2 className=\"text-lg font-semibold text-gray-900\">Your Bills</h2>\r\n            <p className=\"text-sm text-gray-600 mt-1\">\r\n              {bills.length} bill{bills.length !== 1 ? 's' : ''} • \r\n              {pendingCount} pending • \r\n              {overdueCount} overdue\r\n            </p>\r\n          </div>\r\n          \r\n          {bills.length === 0 ? (\r\n            <div className=\"px-6 py-12 text-center\">\r\n              <div className=\"text-gray-400 text-6xl mb-4\">💰</div>\r\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No bills yet</h3>\r\n              <p className=\"text-gray-600 mb-4\">\r\n                Create your first bill to get started with automated bill management.\r\n              </p>\r\n              <button\r\n                onClick={() => setShowCreateForm(true)}\r\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\"\r\n              >\r\n                Create Your First Bill\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"divide-y divide-gray-200\">\r\n              {bills.map((bill) => (\r\n                <div key={bill.id} className=\"px-6 py-4 hover:bg-gray-50 transition-colors\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"flex-1\">\r\n                      <div className=\"flex items-center space-x-3 mb-2\">\r\n                        <h3 className=\"text-lg font-medium text-gray-900\">{bill.title}</h3>\r\n                        <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(bill.status)}`}>\r\n                          {bill.status}\r\n                        </span>\r\n                        <span className={`px-2 py-1 text-xs font-medium rounded-full ${getPriorityColor(bill.priority)}`}>\r\n                          {bill.priority}\r\n                        </span>\r\n                      </div>\r\n                      \r\n                      {bill.description && (\r\n                        <p className=\"text-gray-600 text-sm mb-2\">{bill.description}</p>\r\n                      )}\r\n                      \r\n                      <div className=\"flex items-center space-x-6 text-sm text-gray-500\">\r\n                        <span>Amount: <span className=\"font-medium text-gray-900\">${bill.amount}</span></span>\r\n                        <span>Due: <span className=\"font-medium text-gray-900\">{new Date(bill.due_date).toLocaleDateString()}</span></span>\r\n                        {bill.category && <span>Category: <span className=\"font-medium text-gray-900\">{bill.category}</span></span>}\r\n                        <span>Source: <span className=\"font-medium text-gray-900\">{bill.source}</span></span>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"flex items-center space-x-2\">\r\n                      {bill.status === 'pending' && (\r\n                        <button\r\n                          onClick={() => handleMarkAsPaid(bill.id)}\r\n                          className=\"px-3 py-1 bg-green-600 text-white text-sm rounded-md hover:bg-green-700 transition-colors\"\r\n                        >\r\n                          Mark Paid\r\n                        </button>\r\n                      )}\r\n                      <button \r\n                        onClick={() => router.push(`/bills/${bill.id}/edit`)}\r\n                        className=\"px-3 py-1 border border-gray-300 text-gray-700 text-sm rounded-md hover:bg-gray-50 transition-colors\"\r\n                      >\r\n                        Edit\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Automation Info */}\r\n        <div className=\"mt-8 bg-blue-50 rounded-lg p-6\">\r\n          <h3 className=\"text-lg font-semibold text-blue-900 mb-3\">🤖 Automation Features</h3>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-blue-800\">\r\n            <div>\r\n              <h4 className=\"font-medium mb-1\">📧 Email Integration</h4>\r\n              <p>Automatically create bills from email receipts</p>\r\n            </div>\r\n            <div>\r\n              <h4 className=\"font-medium mb-1\">⏰ Smart Reminders</h4>\r\n              <p>Get notified before bills are due</p>\r\n            </div>\r\n            <div>\r\n              <h4 className=\"font-medium mb-1\">📊 Status Tracking</h4>\r\n              <p>Automatically mark bills as overdue</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\calendar\\[[...rest]]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\calendar\\sync\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\calendar\\templates\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\chores\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HouseholdMember' is defined but never used.","line":77,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AssignmentRecommendation' is defined but never used.","line":84,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":30},{"ruleId":"no-alert","severity":1,"message":"Unexpected confirm.","line":229,"column":10,"nodeType":"CallExpression","messageId":"unexpected","endLine":229,"endColumn":64},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'choreForm'. Either include it or remove the dependency array. You can also do a functional update 'setChoreForm(c => ...)' if you only need 'choreForm' in the 'setChoreForm' call.","line":302,"column":6,"nodeType":"ArrayExpression","endLine":302,"endColumn":76,"suggestions":[{"desc":"Update the dependencies array to be: [choreForm, householdId]","fix":{"range":[9187,9257],"text":"[choreForm, householdId]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'completionRate' is assigned a value but never used.","line":314,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":314,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'avgDifficulty' is assigned a value but never used.","line":319,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":319,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'totalEstimatedTime' is assigned a value but never used.","line":327,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":327,"endColumn":27},{"ruleId":"object-shorthand","severity":1,"message":"Expected property shorthand.","line":370,"column":9,"nodeType":"Property","messageId":"expectedPropertyShorthand","endLine":370,"endColumn":21,"fix":{"range":[11613,11625],"text":"rrule"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":522,"column":8,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":568,"endColumn":8,"fix":{"range":[16585,18788],"text":"aiInsights ? <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Total Chores</CardTitle>\r\n              <Target className=\"h-4 w-4 text-blue-500\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{aiInsights.total_chores}</div>\r\n              <p className=\"text-xs text-gray-500\">Chores created</p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\r\n              <Clock className=\"h-4 w-4 text-orange-500\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{aiInsights.pending_chores}</div>\r\n              <p className=\"text-xs text-gray-500\">Awaiting completion</p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Fairness Score</CardTitle>\r\n              <Users className=\"h-4 w-4 text-green-500\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{aiInsights.fairness_score}%</div>\r\n              <p className=\"text-xs text-gray-500\">Workload balance</p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">AI Learning</CardTitle>\r\n              <Brain className=\"h-4 w-4 text-purple-500\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{aiInsights.ai_learning_progress}%</div>\r\n              <p className=\"text-xs text-gray-500\">Pattern recognition</p>\r\n            </CardContent>\r\n          </Card>\r\n        </div> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":648,"column":28,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":653,"endColumn":28,"fix":{"range":[22196,22506],"text":"chore.ai_suggested ? <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-800 text-xs\">\r\n                              <Sparkles className=\"h-3 w-3 mr-1\" />\r\n                              AI Suggested\r\n                            </Badge> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":687,"column":12,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":711,"endColumn":12,"fix":{"range":[24095,25170],"text":"aiInsights ? <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Brain className=\"h-5 w-5 text-purple-500\" />\r\n                  AI Learning Progress\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  How well the AI understands your household patterns\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex justify-between text-sm\">\r\n                    <span>Pattern Recognition</span>\r\n                    <span>{aiInsights.ai_learning_progress}%</span>\r\n                  </div>\r\n                  <Progress value={aiInsights.ai_learning_progress} />\r\n                  <p className=\"text-sm text-gray-600\">\r\n                    The AI is learning from your chore patterns to provide better assignments and suggestions\r\n                  </p>\r\n                </div>\r\n              </CardContent>\r\n            </Card> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":736,"column":28,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":741,"endColumn":28,"fix":{"range":[26238,26548],"text":"chore.ai_suggested ? <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-800 text-xs\">\r\n                              <Sparkles className=\"h-3 w-3 mr-1\" />\r\n                              AI Suggested\r\n                            </Badge> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":750,"column":26,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":752,"endColumn":26,"fix":{"range":[26970,27104],"text":"chore.description ? <p className=\"text-gray-600 mb-3\">{chore.description}</p> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":765,"column":26,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":770,"endColumn":26,"fix":{"range":[27829,28130],"text":"chore.due_at ? <div className=\"text-sm text-gray-600 mb-4\">\r\n                            <Clock className=\"h-4 w-4 inline mr-1\" />\r\n                            Due: {new Date(chore.due_at).toLocaleDateString()}\r\n                          </div> : null"}},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":1001,"column":31,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":1001,"endColumn":36},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":1022,"column":12,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":1043,"endColumn":12,"fix":{"range":[39610,40572],"text":"aiInsights?.optimal_scheduling && aiInsights.optimal_scheduling.length > 0 ? <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Clock className=\"h-5 w-5 text-green-500\" />\r\n                  Optimal Scheduling\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  AI-recommended times for different types of chores\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-3\">\r\n                  {aiInsights.optimal_scheduling.map((schedule, index) => (\r\n                    <div key={index} className=\"p-3 bg-green-50 rounded-lg border border-green-200\">\r\n                      <p className=\"text-sm text-green-800\">{schedule}</p>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card> : null"}},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":1036,"column":31,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":1036,"endColumn":36},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":1046,"column":12,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":1067,"endColumn":12,"fix":{"range":[40618,41553],"text":"aiInsights?.skill_gaps && aiInsights.skill_gaps.length > 0 ? <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Target className=\"h-5 w-5 text-orange-500\" />\r\n                  Skill Gaps\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  Areas where household members could improve their skills\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-3\">\r\n                  {aiInsights.skill_gaps.map((skill, index) => (\r\n                    <div key={index} className=\"p-3 bg-orange-50 rounded-lg border border-orange-200\">\r\n                      <p className=\"text-sm text-orange-800\">{skill}</p>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card> : null"}},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":1060,"column":31,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":1060,"endColumn":36},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":1070,"column":12,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":1091,"endColumn":12,"fix":{"range":[41607,42589],"text":"aiInsights?.household_patterns && aiInsights.household_patterns.length > 0 ? <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <TrendingUp className=\"h-5 w-5 text-purple-500\" />\r\n                  Household Patterns\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  Patterns the AI has identified in your household's chore habits\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-3\">\r\n                  {aiInsights.household_patterns.map((pattern, index) => (\r\n                    <div key={index} className=\"p-3 bg-purple-50 rounded-lg border border-purple-200\">\r\n                      <p className=\"text-sm text-purple-800\">{pattern}</p>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card> : null"}},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":1078,"column":67,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[41972,42073],"text":"\r\n                  Patterns the AI has identified in your household&apos;s chore habits\r\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[41972,42073],"text":"\r\n                  Patterns the AI has identified in your household&lsquo;s chore habits\r\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[41972,42073],"text":"\r\n                  Patterns the AI has identified in your household&#39;s chore habits\r\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[41972,42073],"text":"\r\n                  Patterns the AI has identified in your household&rsquo;s chore habits\r\n                "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":1084,"column":31,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":1084,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1177,"column":96,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1177,"endColumn":99,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[46764,46767],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[46764,46767],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":1369,"column":24,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":1398,"endColumn":24,"fix":{"range":[56920,58675],"text":"showRecommendations && assignmentRecommendations.length > 0 ? <div className=\"mt-4 p-4 bg-gray-50 rounded-lg\">\r\n                          <h5 className=\"font-medium text-gray-900 mb-3\">AI Recommendations</h5>\r\n                          <div className=\"space-y-3\">\r\n                            {assignmentRecommendations.map((rec, index) => (\r\n                              <div key={index} className=\"flex items-center justify-between p-3 bg-white rounded border\">\r\n                                <div className=\"flex-1\">\r\n                                  <div className=\"flex items-center gap-2 mb-1\">\r\n                                    <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\r\n                                      {rec.strategy}\r\n                                    </Badge>\r\n                                    <span className=\"text-sm font-medium\">\r\n                                      Confidence: {rec.confidence}%\r\n                                    </span>\r\n                                  </div>\r\n                                  <p className=\"text-sm text-gray-600\">{rec.reasoning}</p>\r\n                                </div>\r\n                                <Button\r\n                                  type=\"button\"\r\n                                  size=\"sm\"\r\n                                  onClick={() => executeAIAssignment(rec.strategy)}\r\n                                  className=\"ml-3\"\r\n                                >\r\n                                  Use This\r\n                                </Button>\r\n                              </div>\r\n                            ))}\r\n                          </div>\r\n                        </div> : null"}},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":1374,"column":41,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":1374,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":11,"source":"'use client';\r\n\r\nimport { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { useAuth } from '@clerk/nextjs';\r\nimport { useUserData } from '@/hooks/useUserData';\r\nimport { toast } from 'sonner';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n\r\nimport {\r\n  Plus,\r\n  Clock,\r\n  Brain,\r\n  Lightbulb,\r\n  Target,\r\n  Users,\r\n  Zap,\r\n  Sparkles,\r\n  RotateCcw,\r\n  CheckCircle,\r\n  X,\r\n  BarChart3,\r\n  TrendingUp,\r\n} from 'lucide-react';\r\n\r\ninterface Chore {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  assigned_to?: string;\r\n  due_at?: string;\r\n  recurrence?: string;\r\n  created_by: string;\r\n  household_id: string;\r\n  category: string;\r\n  priority: 'low' | 'medium' | 'high' | 'urgent';\r\n  status: 'pending' | 'assigned' | 'in_progress' | 'completed' | 'skipped';\r\n  ai_difficulty_rating: number;\r\n  ai_estimated_duration: number;\r\n  ai_preferred_time: string;\r\n  ai_energy_level: 'low' | 'medium' | 'high';\r\n  ai_skill_requirements: string[];\r\n  ai_confidence: number;\r\n  ai_suggested: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\ninterface AIChoreInsights {\r\n  total_chores: number;\r\n  pending_chores: number;\r\n  completed_chores: number;\r\n  ai_suggested_chores: number;\r\n  average_difficulty: number;\r\n  average_duration: number;\r\n  fairness_score: number;\r\n  household_patterns: string[];\r\n  suggested_improvements: string[];\r\n  ai_learning_progress: number;\r\n  optimal_scheduling: string[];\r\n  skill_gaps: string[];\r\n  energy_distribution: {\r\n    low: number;\r\n    medium: number;\r\n    high: number;\r\n  };\r\n  category_breakdown: Record<string, number>;\r\n  user_workload_distribution: Record<string, number>;\r\n  completion_efficiency: number;\r\n}\r\n\r\ntype AssignmentStrategy = 'auto' | 'round_robin' | 'fairness' | 'preference' | 'ai_hybrid' | 'manual';\r\n\r\ntype HouseholdMember = {\r\n  userId: string;\r\n  name: string | null;\r\n  email: string | null;\r\n  role: string | null;\r\n};\r\n\r\ntype AssignmentRecommendation = {\r\n  strategy: AssignmentStrategy;\r\n  confidence: number;\r\n  reasoning: string;\r\n};\r\n\r\nconst isAssignmentStrategy = (value: string): value is AssignmentStrategy =>\r\n  ['auto', 'round_robin', 'fairness', 'preference', 'ai_hybrid', 'manual'].includes(value);\r\n\r\nexport default function ChoresPage() {\r\n  const { userId } = useAuth();\r\n  const { userData } = useUserData();\r\n  const [chores, setChores] = useState<Chore[]>([]);\r\n  const [aiInsights, setAiInsights] = useState<AIChoreInsights | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [activeTab, setActiveTab] = useState('overview');\r\n  const [householdId, setHouseholdId] = useState<string | null>(null);\r\n\r\n  const [choreForm, setChoreForm] = useState({\r\n    title: '',\r\n    description: '',\r\n    category: 'general',\r\n    due_at: '',\r\n    priority: 'medium' as Chore['priority'],\r\n    ai_estimated_duration: 30,\r\n    recurrence_type: 'none',\r\n    recurrence_day: 1,\r\n    recurrence_interval: 1,\r\n    custom_rrule: '',\r\n    assignment_strategy: 'auto' as AssignmentStrategy,\r\n    assigned_to: ''\r\n  });\r\n\r\n  const [assignmentLoading, setAssignmentLoading] = useState(false);\r\n  const [assignmentRecommendations, setAssignmentRecommendations] = useState<AssignmentRecommendation[]>([]);\r\n  const [householdMembers, setHouseholdMembers] = useState<HouseholdMember[]>([]);\r\n  const [showRecommendations, setShowRecommendations] = useState(false);\r\n\r\n  // Get household ID from user data\r\n  useEffect(() => {\r\n    if (userData?.household_id) {\r\n      setHouseholdId(userData.household_id);\r\n    }\r\n  }, [userData?.household_id]);\r\n\r\n  const fetchChores = useCallback(async () => {\r\n    if (!householdId) {\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('/api/chores');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setChores(data.data?.chores || []);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching chores:', error);\r\n      toast.error('Failed to load chores');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [householdId]);\r\n\r\n  const fetchHouseholdMembers = useCallback(async () => {\r\n    if (!householdId) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('/api/household-members');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch household members');\r\n      }\r\n\r\n      const data: { members: HouseholdMember[] } = await response.json();\r\n      setHouseholdMembers(data.members ?? []);\r\n    } catch (error) {\r\n      console.error('Error fetching household members:', error);\r\n      toast.error('Failed to load household members');\r\n    }\r\n  }, [householdId]);\r\n\r\n  const fetchAIInsights = useCallback(async () => {\r\n    try {\r\n      const response = await fetch('/api/ai/chore-insights');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setAiInsights(data.insights);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching AI insights:', error);\r\n      toast.error('Failed to load AI insights');\r\n    }\r\n  }, []);\r\n\r\n  // Chore completion and management functions\r\n  const completeChore = useCallback(async (choreId: string) => {\r\n    try {\r\n      const response = await fetch(`/api/chores/completions`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          id: choreId,\r\n          completed_by: userId,\r\n          completion_notes: ''\r\n        })\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Update local state\r\n        setChores((prev) =>\r\n          prev.map((chore) =>\r\n            chore.id === choreId ? { ...chore, status: 'completed' as const } : chore\r\n          )\r\n        );\r\n        void fetchChores();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error completing chore:', error);\r\n    }\r\n  }, [fetchChores, userId]);\r\n\r\n  const updateChoreStatus = useCallback(async (choreId: string, newStatus: Chore['status']) => {\r\n    try {\r\n      const response = await fetch(`/api/chores/${choreId}`, {\r\n        method: 'PATCH',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ status: newStatus })\r\n      });\r\n\r\n      if (response.ok) {\r\n        setChores((prev) =>\r\n          prev.map((chore) =>\r\n            chore.id === choreId ? { ...chore, status: newStatus } : chore\r\n          )\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating chore status:', error);\r\n    }\r\n  }, []);\r\n\r\n  const deleteChore = useCallback(async (choreId: string) => {\r\n    if (!confirm('Are you sure you want to delete this chore?')) return;\r\n    \r\n    try {\r\n      const response = await fetch(`/api/chores/${choreId}`, {\r\n        method: 'DELETE'\r\n      });\r\n\r\n      if (response.ok) {\r\n        setChores((prev) => prev.filter((chore) => chore.id !== choreId));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting chore:', error);\r\n    }\r\n  }, []);\r\n\r\n  // AI Assignment Functions\r\n  const getAssignmentRecommendations = useCallback(async () => {\r\n    if (!choreForm.title || !choreForm.category) {\r\n      toast.error('Please fill in chore title and category first');\r\n      return;\r\n    }\r\n\r\n    setAssignmentLoading(true);\r\n    try {\r\n      const response = await fetch(`/api/ai/chore-assignment?choreId=temp&householdId=${householdId}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setAssignmentRecommendations(data.recommendations || []);\r\n        setShowRecommendations(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error getting assignment recommendations:', error);\r\n    } finally {\r\n      setAssignmentLoading(false);\r\n    }\r\n  }, [choreForm.category, choreForm.title, householdId]);\r\n\r\n  const executeAIAssignment = useCallback(async (strategy: string) => {\r\n    try {\r\n      const mockChore = {\r\n        id: 'temp',\r\n        title: choreForm.title,\r\n        category: choreForm.category,\r\n        ai_difficulty_rating: 50,\r\n        ai_energy_level: 'medium',\r\n        priority: choreForm.priority\r\n      };\r\n\r\n      const response = await fetch('/api/ai/chore-assignment', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          chore: mockChore,\r\n          strategy,\r\n          householdId,\r\n        })\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        // Update the form with the AI assignment\r\n        setChoreForm((prev) => ({\r\n          ...prev,\r\n          assignment_strategy: strategy as typeof choreForm.assignment_strategy,\r\n          assigned_to: data.assignment.assignedTo\r\n        }));\r\n        \r\n        toast.success(`AI assigned chore using ${strategy} strategy!`);\r\n        setShowRecommendations(false);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error executing AI assignment:', error);\r\n    }\r\n  }, [choreForm.category, choreForm.priority, choreForm.title, householdId]);\r\n\r\n  // Calculate chore statistics\r\n  const choreStats = useMemo(() => ({\r\n    total: chores.length,\r\n    pending: chores.filter(c => c.status === 'pending').length,\r\n    inProgress: chores.filter(c => c.status === 'in_progress').length,\r\n    completed: chores.filter(c => c.status === 'completed').length,\r\n    overdue: chores.filter(c => c.due_at && new Date(c.due_at) < new Date() && c.status !== 'completed').length,\r\n    highPriority: chores.filter(c => c.priority === 'high' || c.priority === 'urgent').length,\r\n  }), [chores]);\r\n\r\n  const completionRate = useMemo(\r\n    () => (chores.length > 0 ? Math.round((choreStats.completed / chores.length) * 100) : 0),\r\n    [choreStats.completed, chores.length]\r\n  );\r\n\r\n  const avgDifficulty = useMemo(\r\n    () =>\r\n      chores.length > 0\r\n        ? Math.round(chores.reduce((sum, c) => sum + (c.ai_difficulty_rating || 50), 0) / chores.length)\r\n        : 50,\r\n    [chores]\r\n  );\r\n\r\n  const totalEstimatedTime = useMemo(\r\n    () =>\r\n      chores\r\n        .filter((c) => c.status !== 'completed')\r\n        .reduce((sum, c) => sum + (c.ai_estimated_duration || 30), 0),\r\n    [chores]\r\n  );\r\n\r\n  // Generate RRULE based on recurrence settings\r\n  const generateRRULE = () => {\r\n    if (choreForm.recurrence_type === 'none') return null;\r\n    if (choreForm.recurrence_type === 'custom') return choreForm.custom_rrule;\r\n    \r\n    let rrule = '';\r\n    \r\n    switch (choreForm.recurrence_type) {\r\n      case 'daily':\r\n        rrule = `FREQ=DAILY;INTERVAL=${choreForm.recurrence_interval}`;\r\n        break;\r\n      case 'weekly':\r\n        rrule = `FREQ=WEEKLY;INTERVAL=${choreForm.recurrence_interval};BYDAY=${choreForm.recurrence_day}`;\r\n        break;\r\n      case 'monthly':\r\n        rrule = `FREQ=MONTHLY;INTERVAL=${choreForm.recurrence_interval};BYMONTHDAY=${choreForm.recurrence_day}`;\r\n        break;\r\n    }\r\n    \r\n    return rrule;\r\n  };\r\n\r\n  // Handle chore creation\r\n  const handleCreateChore = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    try {\r\n      const rrule = generateRRULE();\r\n    const choreData = {\r\n        title: choreForm.title,\r\n        description: choreForm.description,\r\n        category: choreForm.category,\r\n        due_at: choreForm.due_at || null,\r\n        priority: choreForm.priority,\r\n        ai_estimated_duration: choreForm.ai_estimated_duration,\r\n        rrule: rrule,\r\n        dtstart: choreForm.due_at ? new Date(choreForm.due_at).toISOString() : null,\r\n        assignment_strategy: choreForm.assignment_strategy,\r\n        assigned_to: choreForm.assignment_strategy === 'manual' ? choreForm.assigned_to : null\r\n      };\r\n\r\n      const response = await fetch('/api/chores', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(choreData),\r\n      });\r\n\r\n      if (response.ok) {\r\n                 // Reset form and refresh chores\r\n         setChoreForm({\r\n           title: '',\r\n           description: '',\r\n           category: 'general',\r\n           due_at: '',\r\n           priority: 'medium',\r\n           ai_estimated_duration: 30,\r\n           recurrence_type: 'none',\r\n           recurrence_day: 1,\r\n           recurrence_interval: 1,\r\n           custom_rrule: '',\r\n           assignment_strategy: 'auto',\r\n           assigned_to: ''\r\n         });\r\n        setActiveTab('overview');\r\n        fetchChores();\r\n      } else {\r\n        console.error('Failed to create chore');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating chore:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userId && householdId) {\r\n      void fetchChores();\r\n      void fetchAIInsights();\r\n      void fetchHouseholdMembers();\r\n    } else if (userId && !householdId) {\r\n      // User authenticated but householdId not loaded yet, keep loading\r\n      setLoading(true);\r\n    } else {\r\n      // User not authenticated, stop loading\r\n      setLoading(false);\r\n    }\r\n  }, [fetchAIInsights, fetchChores, fetchHouseholdMembers, householdId, userId]);\r\n\r\n  // Redirect unauthenticated users\r\n  if (!userId) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-center\">\r\n          <Target className=\"h-12 w-12 mx-auto mb-4 text-blue-500\" />\r\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Authentication Required</h2>\r\n          <p className=\"text-gray-600 mb-4\">Please sign in to access the Smart Chores system.</p>\r\n          <Button onClick={() => window.location.href = '/sign-in'}>\r\n            Sign In\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  \r\n\r\ntype AssignmentStrategy = 'auto' | 'round_robin' | 'fairness' | 'preference' | 'ai_hybrid' | 'manual';\r\n\r\ntype HouseholdMember = {\r\n  userId: string;\r\n  name: string | null;\r\n  email: string | null;\r\n  role: string | null;\r\n};\r\n\r\ntype AssignmentRecommendation = {\r\n  strategy: AssignmentStrategy;\r\n  confidence: number;\r\n  reasoning: string;\r\n};\r\n\r\nconst getPriorityColor = (priority: string) => {\r\n    switch (priority) {\r\n      case 'urgent': return 'bg-red-100 text-red-800';\r\n      case 'high': return 'bg-orange-100 text-orange-800';\r\n      case 'medium': return 'bg-blue-100 text-blue-800';\r\n      case 'low': return 'bg-green-100 text-green-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'completed': return 'bg-green-100 text-green-800';\r\n      case 'in_progress': return 'bg-blue-100 text-blue-800';\r\n      case 'assigned': return 'bg-purple-100 text-purple-800';\r\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getDifficultyColor = (difficulty: number) => {\r\n    if (difficulty >= 80) return 'text-red-600';\r\n    if (difficulty >= 60) return 'text-orange-600';\r\n    if (difficulty >= 40) return 'text-yellow-600';\r\n    return 'text-green-600';\r\n  };\r\n\r\n  const getEnergyColor = (energy: string) => {\r\n    switch (energy) {\r\n      case 'high': return 'text-red-600';\r\n      case 'medium': return 'text-yellow-600';\r\n      case 'low': return 'text-green-600';\r\n      default: return 'text-gray-600';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-center\">\r\n          <Target className=\"h-12 w-12 animate-pulse mx-auto mb-4 text-blue-500\" />\r\n          <p className=\"text-lg text-gray-600\">Loading Smart Chores...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      {/* Header */}\r\n      <div className=\"mb-8\">\r\n        <div className=\"flex items-center gap-3 mb-4\">\r\n          <Target className=\"h-8 w-8 text-blue-500\" />\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">Smart Chore Management</h1>\r\n          <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-800\">\r\n            <Brain className=\"h-4 w-4 mr-1\" />\r\n            AI-Powered\r\n          </Badge>\r\n        </div>\r\n        <p className=\"text-gray-600 text-lg\">\r\n          Intelligent chore assignment with AI fairness optimization and smart scheduling\r\n        </p>\r\n      </div>\r\n\r\n      {/* AI Insights Summary */}\r\n      {aiInsights && (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Total Chores</CardTitle>\r\n              <Target className=\"h-4 w-4 text-blue-500\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{aiInsights.total_chores}</div>\r\n              <p className=\"text-xs text-gray-500\">Chores created</p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\r\n              <Clock className=\"h-4 w-4 text-orange-500\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{aiInsights.pending_chores}</div>\r\n              <p className=\"text-xs text-gray-500\">Awaiting completion</p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Fairness Score</CardTitle>\r\n              <Users className=\"h-4 w-4 text-green-500\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{aiInsights.fairness_score}%</div>\r\n              <p className=\"text-xs text-gray-500\">Workload balance</p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">AI Learning</CardTitle>\r\n              <Brain className=\"h-4 w-4 text-purple-500\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{aiInsights.ai_learning_progress}%</div>\r\n              <p className=\"text-xs text-gray-500\">Pattern recognition</p>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      )}\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\r\n        <TabsList className=\"grid w-full grid-cols-5\">\r\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\r\n          <TabsTrigger value=\"chores\">All Chores</TabsTrigger>\r\n          <TabsTrigger value=\"ai-insights\">AI Insights</TabsTrigger>\r\n          <TabsTrigger value=\"suggestions\">Smart Suggestions</TabsTrigger>\r\n          <TabsTrigger value=\"create\">Create Chore</TabsTrigger>\r\n        </TabsList>\r\n\r\n        {/* Overview Tab */}\r\n        <TabsContent value=\"overview\" className=\"space-y-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Zap className=\"h-5 w-5 text-yellow-500\" />\r\n                Quick Actions\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Manage your chores with AI-powered assistance\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-4\">\r\n              <div className=\"flex flex-wrap gap-3\">\r\n                <Button \r\n                  onClick={() => setActiveTab('create')}\r\n                  className=\"bg-blue-600 hover:bg-blue-700\"\r\n                >\r\n                  <Plus className=\"h-4 w-4 mr-2\" />\r\n                  Create Chore\r\n                </Button>\r\n                <Button \r\n                  variant=\"outline\" \r\n                  className=\"border-purple-200 text-purple-700 hover:bg-purple-50\"\r\n                  onClick={() => setActiveTab('suggestions')}\r\n                >\r\n                  <Lightbulb className=\"h-4 w-4 mr-2\" />\r\n                  AI Suggestions\r\n                </Button>\r\n                <Button \r\n                  variant=\"outline\" \r\n                  className=\"border-green-200 text-green-700 hover:bg-green-50\"\r\n                  onClick={() => setActiveTab('ai-insights')}\r\n                >\r\n                  <Brain className=\"h-4 w-4 mr-2\" />\r\n                  AI Insights\r\n                </Button>\r\n                <Button \r\n                  variant=\"outline\" \r\n                  className=\"border-orange-200 text-orange-700 hover:bg-orange-50\"\r\n                  onClick={() => setActiveTab('chores')}\r\n                >\r\n                  <RotateCcw className=\"h-4 w-4 mr-2\" />\r\n                  Manage Chores\r\n                </Button>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Recent Chores */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Clock className=\"h-5 w-5\" />\r\n                Recent Chores\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Your latest chore activities and assignments\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {chores.slice(0, 5).length > 0 ? (\r\n                <div className=\"space-y-4\">\r\n                  {chores.slice(0, 5).map((chore) => (\r\n                    <div key={chore.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\r\n                      <div className=\"flex-1\">\r\n                        <div className=\"flex items-center gap-2 mb-2\">\r\n                          <h4 className=\"font-medium\">{chore.title}</h4>\r\n                          {chore.ai_suggested && (\r\n                            <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-800 text-xs\">\r\n                              <Sparkles className=\"h-3 w-3 mr-1\" />\r\n                              AI Suggested\r\n                            </Badge>\r\n                          )}\r\n                          <Badge className={getPriorityColor(chore.priority)}>\r\n                            {chore.priority}\r\n                          </Badge>\r\n                          <Badge variant=\"outline\" className={getStatusColor(chore.status)}>\r\n                            {chore.status}\r\n                          </Badge>\r\n                        </div>\r\n                        <div className=\"flex items-center gap-4 text-sm text-gray-600\">\r\n                          <span className={getDifficultyColor(chore.ai_difficulty_rating)}>\r\n                            Difficulty: {chore.ai_difficulty_rating}%\r\n                          </span>\r\n                          <span>{chore.ai_estimated_duration} min</span>\r\n                          <span className={getEnergyColor(chore.ai_energy_level)}>\r\n                            {chore.ai_energy_level} energy\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"text-right\">\r\n                        <div className=\"text-sm text-gray-600 mb-1\">Category</div>\r\n                        <Badge variant=\"outline\">{chore.category}</Badge>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                <p className=\"text-gray-500 text-center py-8\">\r\n                  No chores yet. Create your first chore to get started!\r\n                </p>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* AI Learning Progress */}\r\n          {aiInsights && (\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Brain className=\"h-5 w-5 text-purple-500\" />\r\n                  AI Learning Progress\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  How well the AI understands your household patterns\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex justify-between text-sm\">\r\n                    <span>Pattern Recognition</span>\r\n                    <span>{aiInsights.ai_learning_progress}%</span>\r\n                  </div>\r\n                  <Progress value={aiInsights.ai_learning_progress} />\r\n                  <p className=\"text-sm text-gray-600\">\r\n                    The AI is learning from your chore patterns to provide better assignments and suggestions\r\n                  </p>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n        </TabsContent>\r\n\r\n        {/* All Chores Tab */}\r\n        <TabsContent value=\"chores\" className=\"space-y-6\">\r\n          <div className=\"flex justify-between items-center mb-6\">\r\n            <h2 className=\"text-2xl font-bold\">All Chores</h2>\r\n            <Button \r\n              onClick={() => setActiveTab('create')}\r\n              className=\"bg-blue-600 hover:bg-blue-700\"\r\n            >\r\n              <Plus className=\"h-4 w-4 mr-2\" />\r\n              New Chore\r\n            </Button>\r\n          </div>\r\n\r\n          {chores.length > 0 ? (\r\n            <div className=\"space-y-4\">\r\n              {chores.map((chore) => (\r\n                <Card key={chore.id} className=\"hover:shadow-md transition-shadow\">\r\n                  <CardContent className=\"p-6\">\r\n                    <div className=\"flex items-start justify-between\">\r\n                      <div className=\"flex-1\">\r\n                        <div className=\"flex items-center gap-2 mb-2\">\r\n                          <h4 className=\"font-medium text-lg\">{chore.title}</h4>\r\n                          {chore.ai_suggested && (\r\n                            <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-800 text-xs\">\r\n                              <Sparkles className=\"h-3 w-3 mr-1\" />\r\n                              AI Suggested\r\n                            </Badge>\r\n                          )}\r\n                          <Badge className={getPriorityColor(chore.priority)}>\r\n                            {chore.priority}\r\n                          </Badge>\r\n                          <Badge variant=\"outline\" className={getStatusColor(chore.status)}>\r\n                            {chore.status}\r\n                          </Badge>\r\n                        </div>\r\n                        \r\n                        {chore.description && (\r\n                          <p className=\"text-gray-600 mb-3\">{chore.description}</p>\r\n                        )}\r\n                        \r\n                        <div className=\"flex items-center gap-4 text-sm text-gray-600 mb-4\">\r\n                          <span className={getDifficultyColor(chore.ai_difficulty_rating)}>\r\n                            Difficulty: {chore.ai_difficulty_rating}%\r\n                          </span>\r\n                          <span>{chore.ai_estimated_duration} min</span>\r\n                          <span className={getEnergyColor(chore.ai_energy_level)}>\r\n                            {chore.ai_energy_level} energy\r\n                          </span>\r\n                          <span>Category: {chore.category}</span>\r\n                        </div>\r\n                        \r\n                        {chore.due_at && (\r\n                          <div className=\"text-sm text-gray-600 mb-4\">\r\n                            <Clock className=\"h-4 w-4 inline mr-1\" />\r\n                            Due: {new Date(chore.due_at).toLocaleDateString()}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                      \r\n                      <div className=\"flex flex-col gap-2 ml-4\">\r\n                        {chore.status === 'pending' && (\r\n                          <Button\r\n                            size=\"sm\"\r\n                            onClick={() => completeChore(chore.id)}\r\n                            className=\"bg-green-600 hover:bg-green-700\"\r\n                          >\r\n                            <CheckCircle className=\"h-4 w-4 mr-1\" />\r\n                            Complete\r\n                          </Button>\r\n                        )}\r\n                        \r\n                        <Button\r\n                          size=\"sm\"\r\n                          variant=\"outline\"\r\n                          onClick={() => updateChoreStatus(chore.id, 'in_progress')}\r\n                          disabled={chore.status === 'completed'}\r\n                        >\r\n                          <Clock className=\"h-4 w-4 mr-1\" />\r\n                          Start\r\n                        </Button>\r\n                        \r\n                        <Button\r\n                          size=\"sm\"\r\n                          variant=\"destructive\"\r\n                          onClick={() => deleteChore(chore.id)}\r\n                        >\r\n                          <X className=\"h-4 w-4 mr-1\" />\r\n                          Delete\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <Card>\r\n              <CardContent className=\"text-center py-12\">\r\n                <Target className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\r\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No chores yet</h3>\r\n                <p className=\"text-gray-600 mb-4\">\r\n                  Create your first chore to start managing household tasks\r\n                </p>\r\n                <Button \r\n                  onClick={() => setActiveTab('create')}\r\n                  className=\"bg-blue-600 hover:bg-blue-700\"\r\n                >\r\n                  <Plus className=\"h-4 w-4 mr-2\" />\r\n                  Create First Chore\r\n                </Button>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"ai-insights\" className=\"space-y-6\">\r\n          {aiInsights ? (\r\n            <>\r\n              {/* AI Learning Progress */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center gap-2\">\r\n                    <Brain className=\"h-5 w-5 text-purple-500\" />\r\n                    AI Learning Progress\r\n                  </CardTitle>\r\n                  <CardDescription>\r\n                    How well the AI understands your household patterns\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"space-y-4\">\r\n                    <div className=\"flex justify-between text-sm\">\r\n                      <span>Pattern Recognition</span>\r\n                      <span>{aiInsights.ai_learning_progress}%</span>\r\n                    </div>\r\n                    <Progress value={aiInsights.ai_learning_progress} />\r\n                    <p className=\"text-sm text-gray-600\">\r\n                      The AI is learning from your chore patterns to provide better assignments and suggestions\r\n                    </p>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Workload Distribution */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center gap-2\">\r\n                    <Users className=\"h-5 w-5 text-green-500\" />\r\n                    Workload Distribution\r\n                  </CardTitle>\r\n                  <CardDescription>\r\n                    How chores are distributed among household members\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"space-y-3\">\r\n                    {Object.entries(aiInsights.user_workload_distribution).map(([user, count]) => (\r\n                      <div key={user} className=\"flex items-center justify-between\">\r\n                        <span className=\"text-sm font-medium\">{user}</span>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <div className=\"w-32 bg-gray-200 rounded-full h-2\">\r\n                            <div \r\n                              className=\"bg-green-500 h-2 rounded-full\" \r\n                              style={{ width: `${(count / Math.max(...Object.values(aiInsights.user_workload_distribution))) * 100}%` }}\r\n                            />\r\n                          </div>\r\n                          <span className=\"text-sm text-gray-600\">{count}</span>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Category Breakdown */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center gap-2\">\r\n                    <BarChart3 className=\"h-5 w-5 text-blue-500\" />\r\n                    Category Breakdown\r\n                  </CardTitle>\r\n                  <CardDescription>\r\n                    Distribution of chores by category\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"space-y-3\">\r\n                    {Object.entries(aiInsights.category_breakdown).map(([category, count]) => (\r\n                      <div key={category} className=\"flex items-center justify-between\">\r\n                        <span className=\"text-sm font-medium capitalize\">{category}</span>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <div className=\"w-32 bg-gray-200 rounded-full h-2\">\r\n                            <div \r\n                              className=\"bg-blue-500 h-2 rounded-full\" \r\n                              style={{ width: `${(count / Math.max(...Object.values(aiInsights.category_breakdown))) * 100}%` }}\r\n                            />\r\n                          </div>\r\n                          <span className=\"text-sm text-gray-600\">{count}</span>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Energy Distribution */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center gap-2\">\r\n                    <Zap className=\"h-5 w-5 text-yellow-500\" />\r\n                    Energy Level Distribution\r\n                  </CardTitle>\r\n                  <CardDescription>\r\n                    Distribution of chores by energy requirement\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"grid grid-cols-3 gap-4\">\r\n                    <div className=\"text-center\">\r\n                      <div className=\"text-2xl font-bold text-green-600\">{aiInsights.energy_distribution.low}</div>\r\n                      <div className=\"text-sm text-gray-600\">Low Energy</div>\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                      <div className=\"text-2xl font-bold text-yellow-600\">{aiInsights.energy_distribution.medium}</div>\r\n                      <div className=\"text-sm text-gray-600\">Medium Energy</div>\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                      <div className=\"text-2xl font-bold text-red-600\">{aiInsights.energy_distribution.high}</div>\r\n                      <div className=\"text-sm text-gray-600\">High Energy</div>\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Completion Efficiency */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center gap-2\">\r\n                    <TrendingUp className=\"h-5 w-5 text-green-500\" />\r\n                    Completion Efficiency\r\n                  </CardTitle>\r\n                  <CardDescription>\r\n                    How efficiently chores are being completed\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"space-y-4\">\r\n                    <div className=\"flex justify-between text-sm\">\r\n                      <span>Efficiency Score</span>\r\n                      <span>{aiInsights.completion_efficiency}%</span>\r\n                    </div>\r\n                    <Progress value={aiInsights.completion_efficiency} />\r\n                    <p className=\"text-sm text-gray-600\">\r\n                      Higher scores indicate better chore completion patterns\r\n                    </p>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            </>\r\n          ) : (\r\n            <Card>\r\n              <CardContent className=\"text-center py-12\">\r\n                <Brain className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\r\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">AI Insights Loading</h3>\r\n                <p className=\"text-gray-600\">\r\n                  Creating your first chore to generate AI insights\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"suggestions\" className=\"space-y-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Lightbulb className=\"h-5 w-5 text-yellow-500\" />\r\n                Smart Suggestions\r\n              </CardTitle>\r\n              <CardDescription>\r\n                AI-powered recommendations to improve your chore management\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {aiInsights?.suggested_improvements && aiInsights.suggested_improvements.length > 0 ? (\r\n                <div className=\"space-y-4\">\r\n                  {aiInsights.suggested_improvements.map((suggestion, index) => (\r\n                    <div key={index} className=\"p-4 bg-blue-50 rounded-lg border border-blue-200\">\r\n                      <div className=\"flex items-start gap-3\">\r\n                        <Lightbulb className=\"h-5 w-5 text-blue-500 mt-0.5 flex-shrink-0\" />\r\n                        <p className=\"text-sm text-blue-800\">{suggestion}</p>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                <div className=\"text-center py-8\">\r\n                  <Lightbulb className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\r\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No suggestions yet</h3>\r\n                  <p className=\"text-gray-600\">\r\n                    Create more chores to get personalized AI recommendations\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Optimal Scheduling */}\r\n          {aiInsights?.optimal_scheduling && aiInsights.optimal_scheduling.length > 0 && (\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Clock className=\"h-5 w-5 text-green-500\" />\r\n                  Optimal Scheduling\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  AI-recommended times for different types of chores\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-3\">\r\n                  {aiInsights.optimal_scheduling.map((schedule, index) => (\r\n                    <div key={index} className=\"p-3 bg-green-50 rounded-lg border border-green-200\">\r\n                      <p className=\"text-sm text-green-800\">{schedule}</p>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n\r\n          {/* Skill Gaps */}\r\n          {aiInsights?.skill_gaps && aiInsights.skill_gaps.length > 0 && (\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Target className=\"h-5 w-5 text-orange-500\" />\r\n                  Skill Gaps\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  Areas where household members could improve their skills\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-3\">\r\n                  {aiInsights.skill_gaps.map((skill, index) => (\r\n                    <div key={index} className=\"p-3 bg-orange-50 rounded-lg border border-orange-200\">\r\n                      <p className=\"text-sm text-orange-800\">{skill}</p>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n\r\n          {/* Household Patterns */}\r\n          {aiInsights?.household_patterns && aiInsights.household_patterns.length > 0 && (\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <TrendingUp className=\"h-5 w-5 text-purple-500\" />\r\n                  Household Patterns\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  Patterns the AI has identified in your household's chore habits\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-3\">\r\n                  {aiInsights.household_patterns.map((pattern, index) => (\r\n                    <div key={index} className=\"p-3 bg-purple-50 rounded-lg border border-purple-200\">\r\n                      <p className=\"text-sm text-purple-800\">{pattern}</p>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"create\" className=\"space-y-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Plus className=\"h-5 w-5 text-blue-500\" />\r\n                Create New Chore\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Create a new chore with smart scheduling and assignment\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <form onSubmit={handleCreateChore} className=\"space-y-6\">\r\n                {/* Basic Information */}\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      Chore Title *\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={choreForm.title}\r\n                      onChange={(e) => setChoreForm({...choreForm, title: e.target.value})}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                      placeholder=\"e.g., Clean Kitchen\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      Category\r\n                    </label>\r\n                    <select\r\n                      value={choreForm.category}\r\n                      onChange={(e) => setChoreForm({...choreForm, category: e.target.value})}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                    >\r\n                      <option value=\"general\">General</option>\r\n                      <option value=\"kitchen\">Kitchen</option>\r\n                      <option value=\"bathroom\">Bathroom</option>\r\n                      <option value=\"laundry\">Laundry</option>\r\n                      <option value=\"cleaning\">Cleaning</option>\r\n                      <option value=\"maintenance\">Maintenance</option>\r\n                      <option value=\"garden\">Garden</option>\r\n                      <option value=\"shopping\">Shopping</option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Description\r\n                  </label>\r\n                  <textarea\r\n                    value={choreForm.description}\r\n                    onChange={(e) => setChoreForm({...choreForm, description: e.target.value})}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                    rows={3}\r\n                    placeholder=\"Describe what needs to be done...\"\r\n                  />\r\n                </div>\r\n\r\n                {/* Scheduling */}\r\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      Due Date\r\n                    </label>\r\n                    <input\r\n                      type=\"datetime-local\"\r\n                      value={choreForm.due_at}\r\n                      onChange={(e) => setChoreForm({...choreForm, due_at: e.target.value})}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      Priority\r\n                    </label>\r\n                    <select\r\n                      value={choreForm.priority}\r\n                      onChange={(e) => setChoreForm({...choreForm, priority: e.target.value as any})}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                    >\r\n                      <option value=\"low\">Low</option>\r\n                      <option value=\"medium\">Medium</option>\r\n                      <option value=\"high\">High</option>\r\n                      <option value=\"urgent\">Urgent</option>\r\n                    </select>\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      Estimated Duration (min)\r\n                    </label>\r\n                    <input\r\n                      type=\"number\"\r\n                      value={choreForm.ai_estimated_duration}\r\n                      onChange={(e) => setChoreForm({...choreForm, ai_estimated_duration: parseInt(e.target.value) || 30})}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                      min=\"5\"\r\n                      max=\"480\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Recurrence Settings */}\r\n                <div className=\"border-t pt-6\">\r\n                  <h4 className=\"text-lg font-medium text-gray-900 mb-4\">Recurrence Settings</h4>\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                        Recurrence Type\r\n                      </label>\r\n                      <select\r\n                        value={choreForm.recurrence_type}\r\n                        onChange={(e) => setChoreForm({...choreForm, recurrence_type: e.target.value})}\r\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                      >\r\n                        <option value=\"none\">No Recurrence</option>\r\n                        <option value=\"daily\">Daily</option>\r\n                        <option value=\"weekly\">Weekly</option>\r\n                        <option value=\"monthly\">Monthly</option>\r\n                        <option value=\"custom\">Custom RRULE</option>\r\n                      </select>\r\n                    </div>\r\n                    \r\n                    {choreForm.recurrence_type === 'weekly' && (\r\n                      <div>\r\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                          Day of Week\r\n                        </label>\r\n                        <select\r\n                          value={choreForm.recurrence_day}\r\n                          onChange={(e) => setChoreForm({...choreForm, recurrence_day: parseInt(e.target.value) || 1})}\r\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                        >\r\n                          <option value=\"1\">Monday</option>\r\n                          <option value=\"2\">Tuesday</option>\r\n                          <option value=\"3\">Wednesday</option>\r\n                          <option value=\"4\">Thursday</option>\r\n                          <option value=\"5\">Friday</option>\r\n                          <option value=\"6\">Saturday</option>\r\n                          <option value=\"0\">Sunday</option>\r\n                        </select>\r\n                      </div>\r\n                    )}\r\n                    \r\n                    {choreForm.recurrence_type === 'monthly' && (\r\n                      <div>\r\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                          Day of Month\r\n                        </label>\r\n                        <input\r\n                          type=\"number\"\r\n                          value={choreForm.recurrence_day}\r\n                          onChange={(e) => setChoreForm({...choreForm, recurrence_day: parseInt(e.target.value) || 1})}\r\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                          min=\"1\"\r\n                          max=\"31\"\r\n                        />\r\n                      </div>\r\n                    )}\r\n                    \r\n                    {choreForm.recurrence_type !== 'none' && (\r\n                      <div>\r\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                          Interval\r\n                        </label>\r\n                        <input\r\n                          type=\"number\"\r\n                          value={choreForm.recurrence_interval}\r\n                          onChange={(e) => setChoreForm({...choreForm, recurrence_interval: parseInt(e.target.value) || 1})}\r\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                          min=\"1\"\r\n                          max=\"52\"\r\n                          placeholder=\"Every X days/weeks/months\"\r\n                        />\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  {choreForm.recurrence_type === 'custom' && (\r\n                    <div className=\"mt-4\">\r\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                        Custom RRULE\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        value={choreForm.custom_rrule}\r\n                        onChange={(e) => setChoreForm({...choreForm, custom_rrule: e.target.value})}\r\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                        placeholder=\"FREQ=WEEKLY;BYDAY=MO,WE,FR\"\r\n                      />\r\n                      <p className=\"text-xs text-gray-500 mt-1\">\r\n                        Use iCalendar RRULE format (e.g., FREQ=WEEKLY;BYDAY=MO,WE,FR for every Monday, Wednesday, Friday)\r\n                      </p>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                {/* Smart Assignment */}\r\n                <div className=\"border-t pt-6\">\r\n                  <h4 className=\"text-lg font-medium text-gray-900 mb-4\">Smart Assignment</h4>\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                        Assignment Strategy\r\n                      </label>\r\n                      <select\r\n                        value={choreForm.assignment_strategy}\r\n                        onChange={(e) => {\r\n                          const { value } = e.target;\r\n                          setChoreForm((prev) => ({\r\n                            ...prev,\r\n                            assignment_strategy: isAssignmentStrategy(value) ? value : prev.assignment_strategy,\r\n                          }));\r\n                        }}\r\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                      >\r\n                        <option value=\"auto\">Auto-assign (AI-powered)</option>\r\n                        <option value=\"round_robin\">Round Robin</option>\r\n                        <option value=\"fairness\">Fairness-based</option>\r\n                        <option value=\"preference\">Preference-based</option>\r\n                        <option value=\"ai_hybrid\">AI Hybrid</option>\r\n                        <option value=\"manual\">Manual Assignment</option>\r\n                      </select>\r\n                    </div>\r\n                    \r\n                    {choreForm.assignment_strategy === 'manual' && (\r\n                      <div>\r\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                          Assign To\r\n                        </label>\r\n                        <select\r\n                        value={choreForm.assigned_to}\r\n                        onChange={(e) => setChoreForm({ ...choreForm, assigned_to: e.target.value })}\r\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                        >\r\n                        <option value=\"\">Select household member</option>\r\n                        {householdMembers.map((member) => (\r\n                          <option key={member.userId} value={member.userId}>\r\n                            {member.name || member.email || member.userId}\r\n                          </option>\r\n                        ))}\r\n                        </select>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  {/* AI Assignment Recommendations */}\r\n                  {choreForm.assignment_strategy !== 'manual' && (\r\n                    <div className=\"mt-4\">\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"outline\"\r\n                        onClick={getAssignmentRecommendations}\r\n                        disabled={assignmentLoading}\r\n                        className=\"w-full\"\r\n                      >\r\n                        {assignmentLoading ? (\r\n                          <>\r\n                            <Brain className=\"h-4 w-4 mr-2 animate-spin\" />\r\n                            Getting AI Recommendations...\r\n                          </>\r\n                        ) : (\r\n                          <>\r\n                            <Brain className=\"h-4 w-4 mr-2\" />\r\n                            Get AI Assignment Recommendations\r\n                          </>\r\n                        )}\r\n                      </Button>\r\n                      \r\n                      {showRecommendations && assignmentRecommendations.length > 0 && (\r\n                        <div className=\"mt-4 p-4 bg-gray-50 rounded-lg\">\r\n                          <h5 className=\"font-medium text-gray-900 mb-3\">AI Recommendations</h5>\r\n                          <div className=\"space-y-3\">\r\n                            {assignmentRecommendations.map((rec, index) => (\r\n                              <div key={index} className=\"flex items-center justify-between p-3 bg-white rounded border\">\r\n                                <div className=\"flex-1\">\r\n                                  <div className=\"flex items-center gap-2 mb-1\">\r\n                                    <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\r\n                                      {rec.strategy}\r\n                                    </Badge>\r\n                                    <span className=\"text-sm font-medium\">\r\n                                      Confidence: {rec.confidence}%\r\n                                    </span>\r\n                                  </div>\r\n                                  <p className=\"text-sm text-gray-600\">{rec.reasoning}</p>\r\n                                </div>\r\n                                <Button\r\n                                  type=\"button\"\r\n                                  size=\"sm\"\r\n                                  onClick={() => executeAIAssignment(rec.strategy)}\r\n                                  className=\"ml-3\"\r\n                                >\r\n                                  Use This\r\n                                </Button>\r\n                              </div>\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                {/* Submit Button */}\r\n                <div className=\"flex justify-end space-x-3 pt-6 border-t\">\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"outline\"\r\n                    onClick={() => setActiveTab('overview')}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    className=\"bg-blue-600 hover:bg-blue-700\"\r\n                    disabled={!choreForm.title.trim()}\r\n                  >\r\n                    <Plus className=\"h-4 w-4 mr-2\" />\r\n                    Create Chore\r\n                  </Button>\r\n                </div>\r\n              </form>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\conflicts\\page.tsx","messages":[{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":50,"column":17,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":50,"endColumn":95,"fix":{"range":[1769,1776],"text":" />"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\r\n\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { useUserData } from '@/hooks/useUserData';\r\nimport ConflictDetection from '@/components/ConflictDetection';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { AlertCircle, Info, AlertTriangle, Clock, Users, Calendar } from 'lucide-react';\r\n\r\nexport default function ConflictsPage() {\r\n  const { userData, isLoading } = useUserData();\r\n  const [entitlements, setEntitlements] = useState<Record<string, unknown> | null>(null);\r\n  const [entitlementsLoading, setEntitlementsLoading] = useState(true);\r\n  const householdId = userData?.household_id;\r\n\r\n  const loadEntitlements = useCallback(async () => {\r\n    if (!householdId) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setEntitlementsLoading(true);\r\n      const response = await fetch(`/api/entitlements/${householdId}`);\r\n      const data = await response.json();\r\n      \r\n      if (response.ok) {\r\n        setEntitlements(data);\r\n      } else {\r\n        console.error('Failed to load entitlements:', data.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading entitlements:', error);\r\n    } finally {\r\n      setEntitlementsLoading(false);\r\n    }\r\n  }, [householdId]);\r\n\r\n  useEffect(() => {\r\n    if (householdId) {\r\n      void loadEntitlements();\r\n    }\r\n  }, [householdId, loadEntitlements]);\r\n\r\n  if (isLoading || entitlementsLoading) {\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"max-w-4xl mx-auto\">\r\n          <Card>\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"flex items-center justify-center\">\r\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n                <span className=\"ml-2 text-gray-600\">Loading...</span>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!userData?.household_id) {\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"max-w-4xl mx-auto\">\r\n          <Card>\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"text-center\">\r\n                <AlertCircle className=\"h-12 w-12 mx-auto mb-4 text-red-500\" />\r\n                <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">\r\n                  Household Required\r\n                </h2>\r\n                <p className=\"text-gray-600\">\r\n                  You need to be part of a household to access conflict detection features.\r\n                </p>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <div className=\"max-w-4xl mx-auto space-y-6\">\r\n        {/* Page Header */}\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Conflict Detection</h1>\r\n          <p className=\"text-gray-600\">\r\n            Automatically detect and manage calendar conflicts to keep your schedule organized.\r\n          </p>\r\n        </div>\r\n\r\n        {/* Conflict Detection Component */}\r\n        <ConflictDetection \r\n          householdId={userData.household_id}\r\n          entitlements={entitlements}\r\n        />\r\n\r\n        {/* Additional Information */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Info className=\"h-5 w-5\" />\r\n              About Conflict Detection\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-4\">\r\n              <div className=\"p-4 border rounded-lg\">\r\n                <h4 className=\"font-medium text-gray-900 mb-2 flex items-center gap-2\">\r\n                  <Clock className=\"h-4 w-4\" />\r\n                  Time Overlap Detection\r\n                </h4>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  Automatically detects when events overlap in time, helping you avoid double-booking.\r\n                </p>\r\n              </div>\r\n              \r\n              <div className=\"p-4 border rounded-lg\">\r\n                <h4 className=\"font-medium text-gray-900 mb-2 flex items-center gap-2\">\r\n                  <Users className=\"h-4 w-4\" />\r\n                  Duplicate Title Detection\r\n                </h4>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  Identifies events with identical titles that might be duplicates or need clarification.\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"p-4 border rounded-lg\">\r\n                <h4 className=\"font-medium text-gray-900 mb-2 flex items-center gap-2\">\r\n                  <Calendar className=\"h-4 w-4\" />\r\n                  Exact Time Detection\r\n                </h4>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  Finds events that have exactly the same start and end times, which are likely conflicts.\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"p-4 border rounded-lg\">\r\n                <h4 className=\"font-medium text-gray-900 mb-2 flex items-center gap-2\">\r\n                  <AlertTriangle className=\"h-4 w-4\" />\r\n                  Pro Feature\r\n                </h4>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  Conflict detection is a Pro feature that helps maintain a clean, organized calendar \r\n                  by automatically identifying potential scheduling issues.\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\dashboard\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\debug\\page.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":124,"column":19,"nodeType":"MemberExpression","messageId":"limited","endLine":124,"endColumn":30,"suggestions":[{"fix":{"range":[4019,4068],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":125,"column":19,"nodeType":"CallExpression","messageId":"unexpected","endLine":125,"endColumn":223},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":128,"column":19,"nodeType":"CallExpression","messageId":"unexpected","endLine":128,"endColumn":77}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useAuth, useUser } from '@clerk/nextjs';\r\nimport { useEffect, useState } from 'react';\r\n\r\ninterface UserData {\r\n  email: string;\r\n  role: 'owner' | 'member';\r\n  plan: 'free' | 'pro' | 'pro_plus';\r\n  xp: number;\r\n  coins: number;\r\n  household: {\r\n    id: string;\r\n    plan: string;\r\n    game_mode: string;\r\n    created_at: string;\r\n  };\r\n}\r\n\r\nexport default function DebugPage() {\r\n  const { isSignedIn, isLoaded } = useAuth();\r\n  const { user } = useUser();\r\n  const [userData, setUserData] = useState<UserData | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!isLoaded || !isSignedIn) return;\r\n\r\n    async function fetchData() {\r\n      if (!user?.id) return;\r\n\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        const userResponse = await fetch('/api/user-data');\r\n        const userResult = await userResponse.json();\r\n\r\n        if (!userResponse.ok) {\r\n          console.error('Error fetching user data:', userResult.error);\r\n          setError(userResult.error || 'Failed to load user data');\r\n          return;\r\n        }\r\n\r\n        if (userResult.success && userResult.data) {\r\n          setUserData(userResult.data);\r\n        } else {\r\n          setError('User not found in database');\r\n        }\r\n      } catch (err) {\r\n        console.error('Exception fetching data:', err);\r\n        setError('An unexpected error occurred');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, [isLoaded, isSignedIn, user?.id]);\r\n\r\n  if (!isLoaded) {\r\n    return <div>Loading auth...</div>;\r\n  }\r\n\r\n  if (!isSignedIn) {\r\n    return <div>Please sign in to view debug information.</div>;\r\n  }\r\n\r\n  if (loading) {\r\n    return <div>Loading user data...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>Error: {error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 p-8\">\r\n      <div className=\"max-w-4xl mx-auto\">\r\n        <h1 className=\"text-3xl font-bold mb-8\">Debug Information</h1>\r\n        \r\n        <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">User Data</h2>\r\n          <pre className=\"bg-gray-100 p-4 rounded overflow-auto\">\r\n            {JSON.stringify(userData, null, 2)}\r\n          </pre>\r\n        </div>\r\n\r\n        <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">Plan Analysis</h2>\r\n          <div className=\"space-y-2\">\r\n            <p><strong>Current Plan:</strong> {userData?.plan}</p>\r\n            <p><strong>Household Plan:</strong> {userData?.household?.plan}</p>\r\n            <p><strong>Can Access Rewards:</strong> {userData?.plan === 'pro' || userData?.plan === 'pro_plus' ? 'Yes' : 'No'}</p>\r\n            <p><strong>Feature Check:</strong> {userData?.plan === 'pro' || userData?.plan === 'pro_plus' ? 'xp_rewards should be available' : 'xp_rewards not available'}</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"bg-white rounded-lg shadow p-6\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">Actions</h2>\r\n          <div className=\"space-y-2\">\r\n            <button \r\n              onClick={() => {\r\n          if (typeof window !== 'undefined') {\r\n            window.location.reload();\r\n          }\r\n        }}\r\n              className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700\"\r\n            >\r\n              Refresh Page\r\n            </button>\r\n            <button \r\n              onClick={() => fetch('/api/sync-user', { method: 'POST' })}\r\n              className=\"bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 ml-2\"\r\n            >\r\n              Sync User\r\n            </button>\r\n            <button \r\n              onClick={async () => {\r\n                try {\r\n                  const response = await fetch('/api/debug/check-db');\r\n                  const result = await response.json();\r\n                  console.log('🔍 Database check result:', result);\r\n                  alert(`Database Status:\\n\\nTables: ${result.tables.available.join(', ')}\\n\\nMissing Tables: ${result.missingTables.join(', ') || 'None'}\\n\\nMissing Columns: ${result.missingColumns.join(', ') || 'None'}`);\r\n                } catch (err) {\r\n                  console.error('Error checking database:', err);\r\n                  alert('Error checking database. See console for details.');\r\n                }\r\n              }}\r\n              className=\"bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700 ml-2\"\r\n            >\r\n              Check Database\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\debug\\set-role\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\digest-preferences\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userData' is assigned a value but never used.","line":12,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":19},{"ruleId":"no-useless-return","severity":1,"message":"Unnecessary return statement.","line":19,"column":7,"nodeType":"ReturnStatement","messageId":"unnecessaryReturn","endLine":19,"endColumn":14,"fix":{"range":[549,669],"text":"() => {\r\n    if (!isLoaded) return;\r\n\r\n    if (!isSignedIn) {\r\n      router.push('/sign-in');\r\n      \r\n    }\r\n  }"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\r\n\r\nimport { useEffect } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { useUserData } from '@/hooks/useUserData';\r\nimport { DigestPreferences } from '@/components/DigestPreferences';\r\nimport { DashboardSkeleton } from '@/components/ui/DashboardSkeleton';\r\nimport { ErrorDisplay } from '@/components/ui/ErrorDisplay';\r\n\r\nexport default function DigestPreferencesPage() {\r\n  const router = useRouter();\r\n  const { userData, isLoading, isError, error, refetch, isLoaded, isSignedIn } = useUserData();\r\n\r\n  useEffect(() => {\r\n    if (!isLoaded) return;\r\n\r\n    if (!isSignedIn) {\r\n      router.push('/sign-in');\r\n      return;\r\n    }\r\n  }, [isLoaded, isSignedIn, router]);\r\n\r\n  // Show skeleton loading while auth is loading or data is being fetched\r\n  if (!isLoaded || isLoading) {\r\n    return <DashboardSkeleton />;\r\n  }\r\n\r\n  // This should not be reached if redirect is working, but just in case\r\n  if (!isSignedIn) {\r\n    return null;\r\n  }\r\n\r\n  // Show error state\r\n  if (isError && error) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <ErrorDisplay \r\n          error={error.message || 'An unexpected error occurred'} \r\n          onRetry={refetch}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-4 sm:py-8 lg:py-12 px-4 sm:px-6 lg:px-8\">\r\n      <div className=\"max-w-6xl mx-auto\">\r\n        <div className=\"bg-white shadow rounded-lg p-4 sm:p-6\">\r\n          <DigestPreferences />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\digest\\page.tsx","messages":[{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":50,"column":17,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":50,"endColumn":95,"fix":{"range":[1715,1722],"text":" />"}},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":125,"column":83,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4337,4448],"text":"\r\n                  Customize what content is included in your digests and when they&apos;re sent.\r\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4337,4448],"text":"\r\n                  Customize what content is included in your digests and when they&lsquo;re sent.\r\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4337,4448],"text":"\r\n                  Customize what content is included in your digests and when they&#39;re sent.\r\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4337,4448],"text":"\r\n                  Customize what content is included in your digests and when they&rsquo;re sent.\r\n                "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\r\n\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { useUserData } from '@/hooks/useUserData';\r\nimport DailyDigest from '@/components/DailyDigest';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { AlertCircle, Info } from 'lucide-react';\r\n\r\nexport default function DigestPage() {\r\n  const { userData, isLoading } = useUserData();\r\n  const [entitlements, setEntitlements] = useState<Record<string, unknown> | null>(null);\r\n  const [entitlementsLoading, setEntitlementsLoading] = useState(true);\r\n  const householdId = userData?.household_id;\r\n\r\n  const loadEntitlements = useCallback(async () => {\r\n    if (!householdId) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setEntitlementsLoading(true);\r\n      const response = await fetch(`/api/entitlements/${householdId}`);\r\n      const data = await response.json();\r\n      \r\n      if (response.ok) {\r\n        setEntitlements(data);\r\n      } else {\r\n        console.error('Failed to load entitlements:', data.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading entitlements:', error);\r\n    } finally {\r\n      setEntitlementsLoading(false);\r\n    }\r\n  }, [householdId]);\r\n\r\n  useEffect(() => {\r\n    if (householdId) {\r\n      void loadEntitlements();\r\n    }\r\n  }, [householdId, loadEntitlements]);\r\n\r\n  if (isLoading || entitlementsLoading) {\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"max-w-4xl mx-auto\">\r\n          <Card>\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"flex items-center justify-center\">\r\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n                <span className=\"ml-2 text-gray-600\">Loading...</span>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!userData?.household_id) {\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"max-w-4xl mx-auto\">\r\n          <Card>\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"text-center\">\r\n                <AlertCircle className=\"h-12 w-12 mx-auto mb-4 text-red-500\" />\r\n                <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">\r\n                  Household Required\r\n                </h2>\r\n                <p className=\"text-gray-600\">\r\n                  You need to be part of a household to access digest features.\r\n                </p>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <div className=\"max-w-4xl mx-auto space-y-6\">\r\n        {/* Page Header */}\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Daily Digest</h1>\r\n          <p className=\"text-gray-600\">\r\n            Manage your daily email summaries and digest preferences.\r\n          </p>\r\n        </div>\r\n\r\n        {/* Daily Digest Component */}\r\n        <DailyDigest \r\n          householdId={userData.household_id}\r\n          entitlements={entitlements}\r\n        />\r\n\r\n        {/* Additional Digest Options */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Info className=\"h-5 w-5\" />\r\n              More Digest Options\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-4\">\r\n              <div className=\"p-4 border rounded-lg\">\r\n                <h4 className=\"font-medium text-gray-900 mb-2\">Weekly Digest</h4>\r\n                <p className=\"text-sm text-gray-600 mb-3\">\r\n                  Get comprehensive weekly summaries with achievements, insights, and progress reports.\r\n                </p>\r\n                <a \r\n                  href=\"/digest-preferences\"\r\n                  className=\"text-blue-600 hover:text-blue-700 text-sm font-medium\"\r\n                >\r\n                  Configure Weekly Digest →\r\n                </a>\r\n              </div>\r\n              \r\n              <div className=\"p-4 border rounded-lg\">\r\n                <h4 className=\"font-medium text-gray-900 mb-2\">Digest Preferences</h4>\r\n                <p className=\"text-sm text-gray-600 mb-3\">\r\n                  Customize what content is included in your digests and when they're sent.\r\n                </p>\r\n                <a \r\n                  href=\"/digest-preferences\"\r\n                  className=\"text-blue-600 hover:text-blue-700 text-sm font-medium\"\r\n                >\r\n                  Manage Preferences →\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\finance\\bills\\new\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\finance\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\finance\\spending\\new\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\global-error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\inbox\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\inbox\\page.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":34,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":34,"endColumn":14,"suggestions":[{"fix":{"range":[1032,1077],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":35,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":35,"endColumn":14,"suggestions":[{"fix":{"range":[1081,1136],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":66,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2883,3013],"text":"\r\n                      This suggests there&apos;s a mismatch between your Clerk user ID and the database record.\r\n                    "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2883,3013],"text":"\r\n                      This suggests there&lsquo;s a mismatch between your Clerk user ID and the database record.\r\n                    "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2883,3013],"text":"\r\n                      This suggests there&#39;s a mismatch between your Clerk user ID and the database record.\r\n                    "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2883,3013],"text":"\r\n                      This suggests there&rsquo;s a mismatch between your Clerk user ID and the database record.\r\n                    "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { auth } from '@clerk/nextjs/server';\r\nimport { redirect } from 'next/navigation';\r\nimport { createServerComponentClient } from '@supabase/auth-helpers-nextjs';\r\nimport { cookies } from 'next/headers';\r\nimport InboxEvents from '@/components/Inbox/InboxEvents';\r\n\r\nexport default async function InboxPage() {\r\n  const { userId } = await auth();\r\n  \r\n  if (!userId) {\r\n    redirect('/sign-in');\r\n  }\r\n\r\n  const supabase = createServerComponentClient({ cookies });\r\n  \r\n  // Get user's household - try both clerk_id and id patterns\r\n  let { data: userData } = await supabase\r\n    .from('users')\r\n    .select('household_id, id, onboarding_completed')\r\n    .eq('clerk_id', userId)\r\n    .single();\r\n    \r\n  // If not found by clerk_id, try by id (for users with user_ prefix)\r\n  if (!userData) {\r\n    const { data: userDataById } = await supabase\r\n      .from('users')\r\n      .select('household_id, id, onboarding_completed')\r\n      .eq('id', userId)\r\n      .single();\r\n    userData = userDataById;\r\n  }\r\n  \r\n  // Debug logging\r\n  console.log('Inbox page - User ID:', userId);\r\n  console.log('Inbox page - User data found:', userData);\r\n\r\n  if (!userData?.household_id) {\r\n    // Debug information to help troubleshoot\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"max-w-4xl mx-auto\">\r\n          <div className=\"mb-8\">\r\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Inbox</h1>\r\n            <p className=\"text-gray-600 mb-4\">\r\n              View automation events and system notifications for your household\r\n            </p>\r\n            <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\r\n              <div className=\"flex\">\r\n                <div className=\"flex-shrink-0\">\r\n                  <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                    <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                </div>\r\n                <div className=\"ml-3\">\r\n                  <h3 className=\"text-sm font-medium text-red-800\">\r\n                    Debug: User Data Issue\r\n                  </h3>\r\n                  <div className=\"mt-2 text-sm text-red-700\">\r\n                    <p>\r\n                      <strong>User ID:</strong> {userId}<br/>\r\n                      <strong>User Data Found:</strong> {userData ? 'Yes' : 'No'}<br/>\r\n                      <strong>Household ID:</strong> {userData?.household_id || 'Missing'}<br/>\r\n                      <strong>Onboarding Completed:</strong> {userData?.onboarding_completed ? 'Yes' : 'No'}<br/>\r\n                    </p>\r\n                    <p className=\"mt-2\">\r\n                      This suggests there's a mismatch between your Clerk user ID and the database record.\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"mt-4 space-x-2\">\r\n                    <a\r\n                      href=\"/onboarding\"\r\n                      className=\"bg-red-800 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500\"\r\n                    >\r\n                      Go to Onboarding\r\n                    </a>\r\n                    <a\r\n                      href=\"/dashboard\"\r\n                      className=\"bg-gray-800 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500\"\r\n                    >\r\n                      Go to Dashboard\r\n                    </a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <div className=\"max-w-4xl mx-auto\">\r\n        <div className=\"mb-8\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Inbox</h1>\r\n          <p className=\"text-gray-600\">\r\n            View automation events and system notifications for your household\r\n          </p>\r\n        </div>\r\n        \r\n        <InboxEvents householdId={userData.household_id} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\leaderboard\\page.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":53,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":53,"endColumn":18,"suggestions":[{"fix":{"range":[1308,1352],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"react/jsx-no-bind","severity":1,"message":"JSX props should not use functions","line":170,"column":13,"nodeType":"JSXAttribute","messageId":"func","endLine":170,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useAuth } from '@clerk/nextjs';\r\nimport { useEffect, useState } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\n\r\ninterface LeaderboardEntry {\r\n  id: string;\r\n  xp: number;\r\n  username: string;\r\n}\r\n\r\ninterface LeaderboardData {\r\n  success: boolean;\r\n  leaderboard: LeaderboardEntry[];\r\n  householdId: string;\r\n}\r\n\r\nexport default function LeaderboardPage() {\r\n  const { isSignedIn, isLoaded } = useAuth();\r\n  const router = useRouter();\r\n  \r\n  const [leaderboard, setLeaderboard] = useState<LeaderboardEntry[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!isLoaded) return;\r\n\r\n    if (!isSignedIn) {\r\n      router.push('/sign-in');\r\n      return;\r\n    }\r\n\r\n    fetchLeaderboard();\r\n  }, [isLoaded, isSignedIn, router]);\r\n\r\n  async function fetchLeaderboard() {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const response = await fetch('/api/leaderboard');\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to fetch leaderboard');\r\n      }\r\n\r\n      const data: LeaderboardData = await response.json();\r\n      setLeaderboard(data.leaderboard);\r\n      \r\n      console.log('✅ Leaderboard fetched:', data);\r\n    } catch (err) {\r\n      console.error('❌ Error fetching leaderboard:', err);\r\n      setError(err instanceof Error ? err.message : 'Failed to fetch leaderboard');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  // Show loading spinner while auth is loading or data is being fetched\r\n  if (!isLoaded || loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\" />\r\n          <p className=\"text-gray-600\">Loading leaderboard...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // This should not be reached if redirect is working, but just in case\r\n  if (!isSignedIn) {\r\n    return null;\r\n  }\r\n\r\n  // Show error state\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"bg-white shadow rounded-lg p-6 max-w-md w-full mx-4\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-red-500 text-6xl mb-4\">⚠️</div>\r\n            <h1 className=\"text-xl font-semibold text-gray-900 mb-2\">Error</h1>\r\n            <p className=\"text-gray-600 mb-4\">{error}</p>\r\n            <button \r\n              onClick={() => {\r\n          if (typeof window !== 'undefined') {\r\n            window.location.reload();\r\n          }\r\n        }}\r\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700\"\r\n            >\r\n              Try Again\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n        {/* Header */}\r\n        <div className=\"mb-8\">\r\n          <button\r\n            onClick={() => router.back()}\r\n            className=\"text-blue-600 hover:text-blue-700 mb-4 flex items-center\"\r\n          >\r\n            ← Back\r\n          </button>\r\n          \r\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\r\n            🏆 Household Leaderboard\r\n          </h1>\r\n          <p className=\"text-gray-600\">\r\n            Top 10 members by XP\r\n          </p>\r\n        </div>\r\n\r\n        {/* Leaderboard */}\r\n        <div className=\"bg-white rounded-lg shadow\">\r\n          {leaderboard.length === 0 ? (\r\n            <div className=\"p-8 text-center\">\r\n              <div className=\"text-gray-400 text-6xl mb-4\">🏆</div>\r\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No leaderboard data</h3>\r\n              <p className=\"text-gray-600\">Complete some tasks to see the leaderboard!</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"divide-y divide-gray-200\">\r\n              {leaderboard.map((entry, index) => (\r\n                <div key={entry.id} className=\"p-6 flex items-center\">\r\n                  {/* Rank */}\r\n                  <div className=\"flex-shrink-0 w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mr-4\">\r\n                    <span className=\"text-lg font-bold text-gray-700\">\r\n                      {index + 1}\r\n                    </span>\r\n                  </div>\r\n                  \r\n                  {/* User Info */}\r\n                  <div className=\"flex-1\">\r\n                    <h3 className=\"text-lg font-semibold text-gray-900\">\r\n                      {entry.username}\r\n                    </h3>\r\n                    <p className=\"text-sm text-gray-500\">\r\n                      {entry.xp} XP\r\n                    </p>\r\n                  </div>\r\n                  \r\n                  {/* Trophy for top 3 */}\r\n                  {index < 3 && (\r\n                    <div className=\"flex-shrink-0\">\r\n                      <span className=\"text-2xl\">\r\n                        {index === 0 ? '🥇' : index === 1 ? '🥈' : '🥉'}\r\n                      </span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Refresh button */}\r\n        <div className=\"mt-6 text-center\">\r\n          <button\r\n            onClick={fetchLeaderboard}\r\n            className=\"bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700\"\r\n          >\r\n            Refresh Leaderboard\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\meal-planner\\components\\PlannerHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\meal-planner\\components\\WeeklyPlanner.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MealSlot' is defined but never used.","line":7,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useMemo } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport type { MealSlot, MealType, WeeklyPlannerProps } from './types';\r\nimport { MealSlotSelector } from './MealSlotSelector';\r\n\r\nexport function WeeklyPlanner({\r\n  weekDays,\r\n  mealPlan,\r\n  recipes,\r\n  onAssignRecipe,\r\n  onAddWeekIngredients,\r\n  onCopyWeek,\r\n  onClearWeek,\r\n  onNavigateWeek,\r\n}: WeeklyPlannerProps) {\r\n  const planByDay = useMemo(\r\n    () =>\r\n      weekDays.map((day) => ({\r\n        ...day,\r\n        meals: mealPlan?.meals?.[day.name] ?? {},\r\n      })),\r\n    [weekDays, mealPlan?.meals],\r\n  );\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader className=\"flex justify-between items-center\">\r\n        <CardTitle className=\"text-lg font-semibold\">This Week&apos;s Plan</CardTitle>\r\n        <div className=\"flex gap-2\">\r\n          <Button variant=\"outline\" onClick={() => onNavigateWeek('prev')} size=\"sm\">\r\n            Previous Week\r\n          </Button>\r\n          <Button variant=\"outline\" onClick={() => onNavigateWeek('next')} size=\"sm\">\r\n            Next Week\r\n          </Button>\r\n          <Button variant=\"outline\" onClick={onCopyWeek} size=\"sm\">\r\n            Copy Last Week\r\n          </Button>\r\n          <Button variant=\"outline\" onClick={onClearWeek} size=\"sm\">\r\n            Clear Week\r\n          </Button>\r\n          <Button onClick={onAddWeekIngredients} size=\"sm\">\r\n            Add Ingredients\r\n          </Button>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent className=\"grid grid-cols-1 gap-4\">\r\n        {planByDay.map((day) => (\r\n          <div key={day.date} className=\"p-4 border rounded-lg space-y-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <h3 className=\"text-lg font-semibold\">{day.label}</h3>\r\n                <p className=\"text-sm text-gray-500\">{day.date}</p>\r\n              </div>\r\n              <Badge variant=\"secondary\">{day.meals ? Object.keys(day.meals).length : 0} meals</Badge>\r\n            </div>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n              {(MEAL_TYPES).map((mealType) => (\r\n                <MealSlotSelector\r\n                  key={`${day.date}-${mealType}`}\r\n                  date={day.date}\r\n                  mealType={mealType}\r\n                  recipe={day.meals?.[mealType] ?? undefined}\r\n                  recipes={recipes}\r\n                  onAssignRecipe={(recipe) => onAssignRecipe(day.date, mealType, recipe)}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nconst MEAL_TYPES: MealType[] = ['breakfast', 'lunch', 'dinner'];\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\meal-planner\\components\\planner-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\meal-planner\\components\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\meal-planner\\example-refactored.tsx","messages":[{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":42,"column":11,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":42,"endColumn":104,"fix":{"range":[1208,1215],"text":" />"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":143,"column":18,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":145,"endColumn":18,"fix":{"range":[5237,5365],"text":"recipe.description ? <p className=\"text-gray-600 text-sm mb-2\">{recipe.description}</p> : null"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"'use client';\r\n\r\nimport { useUserData } from '@/hooks/useUserData';\r\nimport { \r\n  useMealPlan\r\n} from '@/hooks/useMealPlans';\r\nimport { \r\n  useRecipes\r\n} from '@/hooks/useRecipes';\r\n\r\nexport default function MealPlannerPageRefactored() {\r\n  // User data\r\n  const { isLoading: userDataLoading } = useUserData();\r\n  \r\n  // React Query hooks for meal plans\r\n  const { \r\n    data: mealPlansData, \r\n    isLoading: mealPlansLoading, \r\n    error: mealPlansError \r\n  } = useMealPlan();\r\n  \r\n  // React Query hooks for recipes\r\n  const { \r\n    data: recipesData, \r\n    isLoading: recipesLoading, \r\n    error: recipesError \r\n  } = useRecipes();\r\n  \r\n  // Extract data from React Query\r\n  const mealPlans = mealPlansData ? [mealPlansData] : [];\r\n  const recipes = recipesData?.recipes || [];\r\n  \r\n  // Loading and error states\r\n  const loading = userDataLoading || mealPlansLoading || recipesLoading;\r\n  const error = mealPlansError || recipesError;\r\n  \r\n  // Loading state\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4\"></div>\r\n          <p className=\"text-lg text-gray-600\">Loading Meal Planner...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // Error state\r\n  if (error) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-center\">\r\n          <div className=\"text-red-500 text-6xl mb-4\">⚠️</div>\r\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Error Loading Meal Planner</h2>\r\n          <p className=\"text-gray-600 mb-6\">\r\n            {error.message || 'Failed to load meal planner data'}\r\n          </p>\r\n          <button \r\n            onClick={() => window.location.reload()}\r\n            className=\"bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg\"\r\n          >\r\n            Try Again\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      {/* Header */}\r\n      <div className=\"mb-8\">\r\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">Meal Planner</h1>\r\n        <p className=\"text-gray-600\">\r\n          Plan your meals for the week and organize your recipes\r\n        </p>\r\n      </div>\r\n      \r\n      {/* Stats */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\r\n        <div className=\"bg-white p-6 rounded-lg shadow\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Current Week</h3>\r\n          <p className=\"text-3xl font-bold text-blue-500\">\r\n            {mealPlans.length > 0 ? 'Active' : 'No Plan'}\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"bg-white p-6 rounded-lg shadow\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Total Recipes</h3>\r\n          <p className=\"text-3xl font-bold text-green-500\">{recipes.length}</p>\r\n        </div>\r\n        \r\n        <div className=\"bg-white p-6 rounded-lg shadow\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Meals Planned</h3>\r\n          <p className=\"text-3xl font-bold text-purple-500\">\r\n            {mealPlans.length > 0 ? 'This Week' : 'None'}\r\n          </p>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Meal Plans List */}\r\n      <div className=\"bg-white rounded-lg shadow p-6\">\r\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Current Week</h2>\r\n        \r\n        {mealPlans.length > 0 ? (\r\n          <div className=\"space-y-4\">\r\n            {mealPlans.map((mealPlan) => (\r\n              <div key={mealPlan.id} className=\"border rounded-lg p-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <h3 className=\"text-lg font-medium text-gray-900\">Week of {new Date(mealPlan.week_start_date).toLocaleDateString()}</h3>\r\n                    <p className=\"text-sm text-gray-500\">\r\n                      {Object.keys(mealPlan.meals).length} days with meals planned\r\n                    </p>\r\n                  </div>\r\n                  \r\n                  <div className=\"text-right\">\r\n                    <span className=\"px-2 py-1 rounded-full text-xs bg-green-100 text-green-800\">\r\n                      Active\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div className=\"text-center py-8\">\r\n            <p className=\"text-gray-500\">No meal plan for this week. Use the main meal planner to create one!</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      {/* Recipes List */}\r\n      <div className=\"bg-white rounded-lg shadow p-6 mt-8\">\r\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Your Recipes</h2>\r\n        \r\n        {recipes.length > 0 ? (\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n            {recipes.map((recipe) => (\r\n              <div key={recipe.id} className=\"border rounded-lg p-4\">\r\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">{recipe.name}</h3>\r\n                {recipe.description && (\r\n                  <p className=\"text-gray-600 text-sm mb-2\">{recipe.description}</p>\r\n                )}\r\n                <div className=\"flex items-center gap-4 text-sm text-gray-500\">\r\n                  <span>Prep: {recipe.prep_time}m</span>\r\n                  <span>Cook: {recipe.cook_time}m</span>\r\n                  <span>Servings: {recipe.servings}</span>\r\n                </div>\r\n                <div className=\"mt-2\">\r\n                  <span className={`px-2 py-1 rounded-full text-xs ${\r\n                    recipe.difficulty === 'easy' ? 'bg-green-100 text-green-800' :\r\n                    recipe.difficulty === 'medium' ? 'bg-yellow-100 text-yellow-800' :\r\n                    'bg-red-100 text-red-800'\r\n                  }`}>\r\n                    {recipe.difficulty}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div className=\"text-center py-8\">\r\n            <p className=\"text-gray-500\">No recipes yet. Use the main meal planner to create your first one!</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      {/* Note: This is just an example of the refactored structure */}\r\n      <div className=\"mt-8 p-4 bg-blue-50 rounded-lg\">\r\n        <p className=\"text-blue-800 text-sm\">\r\n          <strong>Note:</strong> This is an example refactored component showing the basic structure. \r\n          For full functionality, use the main meal planner page.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\meal-planner\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\metrics\\client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\monitoring\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardDescription' is defined but never used.","line":8,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Zap' is defined but never used.","line":10,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Activity' is defined but never used.","line":10,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Performance Monitoring Page\r\n// This can be easily removed if the performance monitoring doesn't work\r\n\r\n'use client';\r\n\r\nimport React from 'react';\r\nimport { PerformanceDashboard } from '@/components/monitoring/PerformanceDashboard';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { BarChart3, Info, Zap, Activity } from 'lucide-react';\r\n\r\nexport default function MonitoringPage() {\r\n  return (\r\n    <div className=\"container mx-auto p-6 space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"text-center space-y-2\">\r\n        <h1 className=\"text-3xl font-bold flex items-center justify-center gap-2\">\r\n          <BarChart3 className=\"h-8 w-8\" />\r\n          Performance Monitoring\r\n        </h1>\r\n        <p className=\"text-muted-foreground\">\r\n          Monitor AI system performance, WebSocket connections, and system metrics\r\n        </p>\r\n      </div>\r\n\r\n      {/* Info Alert */}\r\n      <Alert>\r\n        <Info className=\"h-4 w-4\" />\r\n        <AlertDescription>\r\n          This performance monitoring system tracks AI processing metrics, WebSocket connections, \r\n          and system performance. All monitoring can be easily disabled via configuration if needed.\r\n        </AlertDescription>\r\n      </Alert>\r\n\r\n      {/* Main Dashboard */}\r\n      <PerformanceDashboard />\r\n\r\n      {/* Footer Info */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"text-lg\">About Performance Monitoring</CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-2\">\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            This performance monitoring system provides:\r\n          </p>\r\n          <ul className=\"text-sm text-muted-foreground space-y-1 ml-4\">\r\n            <li>• Real-time AI processing metrics and success rates</li>\r\n            <li>• WebSocket connection monitoring and stability tracking</li>\r\n            <li>• System resource usage and performance metrics</li>\r\n            <li>• Detailed raw metrics and logging</li>\r\n            <li>• Easy enable/disable via configuration</li>\r\n          </ul>\r\n          <p className=\"text-sm text-muted-foreground mt-4\">\r\n            Performance monitoring helps identify bottlenecks, track system health, \r\n            and optimize AI processing performance.\r\n          </p>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\notifications\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\offline\\page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":12,"column":16,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[482,522],"text":"\r\n            You&apos;re Offline\r\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[482,522],"text":"\r\n            You&lsquo;re Offline\r\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[482,522],"text":"\r\n            You&#39;re Offline\r\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[482,522],"text":"\r\n            You&rsquo;re Offline\r\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":15,"column":30,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[568,718],"text":"\r\n            It looks like you&apos;re not connected to the internet. Don't worry, you can still use some features of the Home Management App!\r\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[568,718],"text":"\r\n            It looks like you&lsquo;re not connected to the internet. Don't worry, you can still use some features of the Home Management App!\r\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[568,718],"text":"\r\n            It looks like you&#39;re not connected to the internet. Don't worry, you can still use some features of the Home Management App!\r\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[568,718],"text":"\r\n            It looks like you&rsquo;re not connected to the internet. Don't worry, you can still use some features of the Home Management App!\r\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":15,"column":68,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[568,718],"text":"\r\n            It looks like you're not connected to the internet. Don&apos;t worry, you can still use some features of the Home Management App!\r\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[568,718],"text":"\r\n            It looks like you're not connected to the internet. Don&lsquo;t worry, you can still use some features of the Home Management App!\r\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[568,718],"text":"\r\n            It looks like you're not connected to the internet. Don&#39;t worry, you can still use some features of the Home Management App!\r\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[568,718],"text":"\r\n            It looks like you're not connected to the internet. Don&rsquo;t worry, you can still use some features of the Home Management App!\r\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nexport default function OfflinePage() {\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4\">\r\n      <div className=\"max-w-md w-full text-center\">\r\n        <div className=\"mb-8\">\r\n          <div className=\"mx-auto w-24 h-24 bg-blue-100 rounded-full flex items-center justify-center mb-4\">\r\n            <span className=\"text-4xl\">📱</span>\r\n          </div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\r\n            You're Offline\r\n          </h1>\r\n          <p className=\"text-gray-600\">\r\n            It looks like you're not connected to the internet. Don't worry, you can still use some features of the Home Management App!\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"bg-white rounded-lg shadow-sm border p-6 mb-6\">\r\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">\r\n            What you can do offline:\r\n          </h2>\r\n          <ul className=\"text-left space-y-2 text-gray-600\">\r\n            <li className=\"flex items-center\">\r\n              <span className=\"text-green-500 mr-2\">✓</span>\r\n              View your dashboard\r\n            </li>\r\n            <li className=\"flex items-center\">\r\n              <span className=\"text-green-500 mr-2\">✓</span>\r\n              Browse cached meal plans\r\n            </li>\r\n            <li className=\"flex items-center\">\r\n              <span className=\"text-green-500 mr-2\">✓</span>\r\n              Check completed chores\r\n            </li>\r\n            <li className=\"flex items-center\">\r\n              <span className=\"text-green-500 mr-2\">✓</span>\r\n              View shopping lists\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div className=\"bg-blue-50 rounded-lg p-4 mb-6\">\r\n          <p className=\"text-sm text-blue-700\">\r\n            <strong>Tip:</strong> Changes you make offline will sync automatically when you reconnect to the internet.\r\n          </p>\r\n        </div>\r\n\r\n        <button\r\n          onClick={() => {\r\n          if (typeof window !== 'undefined') {\r\n            window.location.reload();\r\n          }\r\n        }}\r\n          className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 transition-colors\"\r\n        >\r\n          Try Again\r\n        </button>\r\n\r\n        <p className=\"text-xs text-gray-500 mt-4\">\r\n          This app works best with an internet connection\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\onboarding\\page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":202,"column":54,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6404,6452],"text":"! Let&apos;s get your household set up.\r\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6404,6452],"text":"! Let&lsquo;s get your household set up.\r\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6404,6452],"text":"! Let&#39;s get your household set up.\r\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6404,6452],"text":"! Let&rsquo;s get your household set up.\r\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":207,"column":84,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6640,6701],"text":"🔧 Debug Tools (You shouldn&apos;t see this if properly onboarded)"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6640,6701],"text":"🔧 Debug Tools (You shouldn&lsquo;t see this if properly onboarded)"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6640,6701],"text":"🔧 Debug Tools (You shouldn&#39;t see this if properly onboarded)"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6640,6701],"text":"🔧 Debug Tools (You shouldn&rsquo;t see this if properly onboarded)"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":214,"column":23,"nodeType":"MemberExpression","messageId":"limited","endLine":214,"endColumn":34,"suggestions":[{"fix":{"range":[7041,7078],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":215,"column":23,"nodeType":"CallExpression","messageId":"unexpected","endLine":215,"endColumn":106},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":218,"column":23,"nodeType":"CallExpression","messageId":"unexpected","endLine":218,"endColumn":65},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":230,"column":23,"nodeType":"MemberExpression","messageId":"limited","endLine":230,"endColumn":34,"suggestions":[{"fix":{"range":[7866,7902],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":232,"column":25,"nodeType":"CallExpression","messageId":"unexpected","endLine":232,"endColumn":88},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":235,"column":25,"nodeType":"CallExpression","messageId":"unexpected","endLine":235,"endColumn":66},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":239,"column":23,"nodeType":"CallExpression","messageId":"unexpected","endLine":239,"endColumn":67},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":294,"column":24,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[10863,10961],"text":"\r\n                    Let&apos;s start with some basic information about your home.\r\n                  "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[10863,10961],"text":"\r\n                    Let&lsquo;s start with some basic information about your home.\r\n                  "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[10863,10961],"text":"\r\n                    Let&#39;s start with some basic information about your home.\r\n                  "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[10863,10961],"text":"\r\n                    Let&rsquo;s start with some basic information about your home.\r\n                  "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":332,"column":27,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[12692,12765],"text":"\r\n                      💌 I&apos;ll invite people later\r\n                    "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[12692,12765],"text":"\r\n                      💌 I&lsquo;ll invite people later\r\n                    "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[12692,12765],"text":"\r\n                      💌 I&#39;ll invite people later\r\n                    "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[12692,12765],"text":"\r\n                      💌 I&rsquo;ll invite people later\r\n                    "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":419,"column":24,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[16903,16960],"text":"\r\n                    You&apos;re All Set!\r\n                  "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[16903,16960],"text":"\r\n                    You&lsquo;re All Set!\r\n                  "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[16903,16960],"text":"\r\n                    You&#39;re All Set!\r\n                  "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[16903,16960],"text":"\r\n                    You&rsquo;re All Set!\r\n                  "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":427,"column":71,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[17300,17319],"text":"What&apos;s been set up:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[17300,17319],"text":"What&lsquo;s been set up:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[17300,17319],"text":"What&#39;s been set up:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[17300,17319],"text":"What&rsquo;s been set up:"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useAuth, useUser } from '@clerk/nextjs';\r\nimport { useRouter } from 'next/navigation';\r\nimport { useState, useEffect } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { z } from 'zod';\r\n\r\n// Validation schemas\r\nconst HouseholdSchema = z.object({\r\n  name: z.string().min(1, 'Household name is required').max(100, 'Name too long'),\r\n});\r\n\r\nconst StarterDataSchema = z.object({\r\n  loadSampleRecipes: z.boolean(),\r\n  loadSamplePlannerItems: z.boolean(),\r\n});\r\n\r\nexport default function OnboardingPage() {\r\n  const { user } = useUser();\r\n  const { isSignedIn } = useAuth();\r\n  const router = useRouter();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [currentStep, setCurrentStep] = useState(1);\r\n  \r\n  // Step 1: Household data\r\n  const [householdName, setHouseholdName] = useState('');\r\n  const [memberCount] = useState(1);\r\n  \r\n  // Step 2: Starter data options\r\n  const [loadSampleRecipes, setLoadSampleRecipes] = useState(true);\r\n  const [loadSamplePlannerItems, setLoadSamplePlannerItems] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (user?.firstName && user?.lastName) {\r\n      setHouseholdName(`${user.firstName}'s Household`);\r\n    } else if (user?.firstName) {\r\n      setHouseholdName(`${user.firstName}'s Household`);\r\n    }\r\n  }, [user]);\r\n\r\n  // Handle authentication redirect in useEffect to avoid SSR issues\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined' && !isSignedIn) {\r\n      router.push('/sign-in');\r\n    }\r\n  }, [isSignedIn, router]);\r\n\r\n  // Don't render anything if not signed in (will redirect via useEffect)\r\n  if (!isSignedIn) {\r\n    return null;\r\n  }\r\n\r\n  const handleHouseholdStep = async () => {\r\n    try {\r\n      const validation = HouseholdSchema.safeParse({ name: householdName });\r\n      if (!validation.success) {\r\n        const firstIssue = validation.error.issues[0];\r\n        if (firstIssue) {\r\n          toast.error(firstIssue.message);\r\n        } else {\r\n          toast.error('Invalid household name');\r\n        }\r\n        return;\r\n      }\r\n\r\n      setIsLoading(true);\r\n      \r\n      const response = await fetch('/api/onboarding/household', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          name: householdName,\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        setCurrentStep(2);\r\n        toast.success('Household setup complete!');\r\n      } else {\r\n        const error = await response.json();\r\n        toast.error(error.error || 'Failed to setup household');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error setting up household:', error);\r\n      toast.error('Something went wrong. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n    const handleStarterDataStep = async () => {\r\n    try {\r\n      const validation = StarterDataSchema.safeParse({\r\n        loadSampleRecipes,\r\n        loadSamplePlannerItems,\r\n      });\r\n\r\n      if (!validation.success) {\r\n        toast.error('Invalid starter data options');\r\n        return;\r\n      }\r\n\r\n      setIsLoading(true);\r\n\r\n      const response = await fetch('/api/onboarding/seed', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          sampleRecipes: loadSampleRecipes,\r\n          samplePlans: loadSamplePlannerItems,\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        const { recipesAdded, plansAdded } = result;\r\n        \r\n        setCurrentStep(3);\r\n        \r\n        // Enhanced toast with counts and action buttons\r\n        if (recipesAdded > 0 || plansAdded > 0) {\r\n          const message = `Loaded ${recipesAdded} recipes • ${plansAdded} plans`;\r\n          toast.success(message, {\r\n            duration: 6000,\r\n            action: {\r\n              label: recipesAdded > 0 ? 'View Meal Planner' : 'View Planner',\r\n              onClick: () => {\r\n                if (typeof window !== 'undefined') {\r\n                  if (recipesAdded > 0) {\r\n                    window.open('/meal-planner', '_blank');\r\n                  } else {\r\n                    window.open('/planner', '_blank');\r\n                  }\r\n                }\r\n              },\r\n            },\r\n            cancel: plansAdded > 0 && recipesAdded > 0 ? {\r\n              label: 'View Planner',\r\n              onClick: () => {\r\n                if (typeof window !== 'undefined') {\r\n                  window.open('/planner', '_blank');\r\n                }\r\n              },\r\n            } : undefined,\r\n          });\r\n        } else {\r\n          toast.success('Starter data ready!');\r\n        }\r\n      } else {\r\n        const error = await response.json();\r\n        toast.error(error.error || 'Failed to create starter data');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating starter data:', error);\r\n      toast.error('Something went wrong. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCompleteOnboarding = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      \r\n      const response = await fetch('/api/onboarding/complete', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        toast.success('Welcome to your new home management system!');\r\n        router.push('/dashboard');\r\n      } else {\r\n        const error = await response.json();\r\n        toast.error(error.error || 'Failed to complete onboarding');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error completing onboarding:', error);\r\n      toast.error('Something went wrong. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 px-4 py-8\">\r\n      <div className=\"max-w-2xl mx-auto\">\r\n        <div className=\"bg-white rounded-2xl shadow-xl overflow-hidden\">\r\n          {/* Header */}\r\n          <div className=\"bg-gradient-to-r from-blue-600 to-indigo-600 px-6 py-8 text-white text-center\">\r\n            <h1 className=\"text-2xl md:text-3xl font-bold mb-2\">\r\n              Welcome to Home Management! 🏠\r\n            </h1>\r\n            <p className=\"text-blue-100\">\r\n              Hello {user?.firstName || 'there'}! Let's get your household set up.\r\n            </p>\r\n            \r\n            {/* Debug section */}\r\n            <div className=\"mt-4 p-3 bg-blue-800 bg-opacity-50 rounded-lg\">\r\n              <p className=\"text-sm text-blue-100 mb-2\">🔧 Debug Tools (You shouldn't see this if properly onboarded)</p>\r\n              <div className=\"flex flex-col sm:flex-row gap-2 justify-center\">\r\n                <button\r\n                  onClick={async () => {\r\n                    try {\r\n                      const response = await fetch('/api/debug/user-status');\r\n                      const data = await response.json();\r\n                      console.log('🔍 User Status:', data);\r\n                      alert(`Check console for user status. hasOnboarded: ${  data.debug?.hasOnboarded}`);\r\n                    } catch (error) {\r\n                      console.error('Error checking status:', error);\r\n                      alert(`Error checking status: ${  error}`);\r\n                    }\r\n                  }}\r\n                  className=\"px-3 py-1 bg-blue-700 text-white text-xs rounded hover:bg-blue-600\"\r\n                >\r\n                  🔍 Check Status\r\n                </button>\r\n                <button\r\n                  onClick={async () => {\r\n                    try {\r\n                      const response = await fetch('/api/debug/fix-onboarding', { method: 'POST' });\r\n                      const data = await response.json();\r\n                      console.log('🔧 Fix Result:', data);\r\n                      if (data.success) {\r\n                        alert('✅ Onboarding status fixed! Redirecting to dashboard...');\r\n                        router.push('/dashboard');\r\n                      } else {\r\n                        alert(`❌ Failed to fix: ${  data.error}`);\r\n                      }\r\n                    } catch (error) {\r\n                      console.error('Error fixing onboarding:', error);\r\n                      alert(`Error fixing onboarding: ${  error}`);\r\n                    }\r\n                  }}\r\n                  className=\"px-3 py-1 bg-green-700 text-white text-xs rounded hover:bg-green-600\"\r\n                >\r\n                  🔧 Fix Onboarding\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n                           {/* Progress indicator */}\r\n                 <div className=\"px-6 py-6 bg-gray-50\">\r\n                   <div className=\"flex items-center justify-center space-x-2 md:space-x-4\">\r\n                     {[1, 2, 3].map((step) => (\r\n                       <div key={step} className=\"flex items-center\">\r\n                         <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium transition-colors ${\r\n                           currentStep >= step\r\n                             ? 'bg-blue-600 text-white'\r\n                             : 'bg-gray-200 text-gray-600'\r\n                         }`}>\r\n                           {step}\r\n                         </div>\r\n                         {step < 3 && (\r\n                           <div className={`w-8 md:w-16 h-1 mx-2 transition-colors ${\r\n                             currentStep > step ? 'bg-blue-600' : 'bg-gray-200'\r\n                           }`} />\r\n                         )}\r\n                       </div>\r\n                     ))}\r\n                   </div>\r\n                   <div className=\"flex justify-center mt-3\">\r\n                     <div className=\"text-center\">\r\n                       <div className=\"text-sm font-medium text-gray-700\">\r\n                         Step {currentStep} of 3\r\n                       </div>\r\n                       <div className=\"text-xs text-gray-500 mt-1\">\r\n                         {currentStep === 1 && 'Household Setup'}\r\n                         {currentStep === 2 && 'Starter Data'}\r\n                         {currentStep === 3 && 'Complete Setup'}\r\n                       </div>\r\n                     </div>\r\n                   </div>\r\n                 </div>\r\n\r\n          {/* Step Content */}\r\n          <div className=\"px-6 py-8\">\r\n            {/* Step 1: Household */}\r\n            {currentStep === 1 && (\r\n              <div className=\"space-y-6\">\r\n                <div className=\"text-center\">\r\n                  <h2 className=\"text-xl md:text-2xl font-semibold text-gray-900 mb-2\">\r\n                    Set Up Your Household\r\n                  </h2>\r\n                  <p className=\"text-gray-600\">\r\n                    Let's start with some basic information about your home.\r\n                  </p>\r\n                </div>\r\n\r\n                <div className=\"space-y-4\">\r\n                  <div>\r\n                    <label htmlFor=\"householdName\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Household Name\r\n                    </label>\r\n                    <input\r\n                      id=\"householdName\"\r\n                      type=\"text\"\r\n                      value={householdName}\r\n                      onChange={(e) => setHouseholdName(e.target.value)}\r\n                      placeholder=\"Enter your household name\"\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\r\n                      maxLength={100}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"bg-blue-50 rounded-lg p-4\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <h3 className=\"font-medium text-blue-900\">Current Members</h3>\r\n                        <p className=\"text-sm text-blue-700\">You can invite more people later</p>\r\n                      </div>\r\n                      <div className=\"text-2xl font-bold text-blue-600\">\r\n                        {memberCount}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"text-center\">\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"text-sm text-blue-600 hover:text-blue-700 font-medium\"\r\n                      onClick={() => toast.info('You can invite members from the dashboard after setup!')}\r\n                    >\r\n                      💌 I'll invite people later\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n\r\n                <button\r\n                  onClick={handleHouseholdStep}\r\n                  disabled={isLoading || !householdName.trim()}\r\n                  className=\"w-full bg-blue-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                >\r\n                  {isLoading ? 'Setting up...' : 'Continue'}\r\n                </button>\r\n              </div>\r\n            )}\r\n\r\n            {/* Step 2: Starter Data */}\r\n            {currentStep === 2 && (\r\n              <div className=\"space-y-6\">\r\n                <div className=\"text-center\">\r\n                  <h2 className=\"text-xl md:text-2xl font-semibold text-gray-900 mb-2\">\r\n                    Add Starter Content\r\n                  </h2>\r\n                  <p className=\"text-gray-600\">\r\n                    We can populate your account with some sample data to get you started.\r\n                  </p>\r\n                </div>\r\n\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"border border-gray-200 rounded-lg p-4\">\r\n                    <label className=\"flex items-start space-x-3 cursor-pointer\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={loadSampleRecipes}\r\n                        onChange={(e) => setLoadSampleRecipes(e.target.checked)}\r\n                        className=\"mt-1 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\r\n                      />\r\n                      <div className=\"flex-1\">\r\n                        <div className=\"font-medium text-gray-900\">Load sample recipes</div>\r\n                        <div className=\"text-sm text-gray-500\">\r\n                          Add a variety of recipes to your meal planner (breakfast, lunch, dinner)\r\n                        </div>\r\n                      </div>\r\n                    </label>\r\n                  </div>\r\n\r\n                  <div className=\"border border-gray-200 rounded-lg p-4\">\r\n                    <label className=\"flex items-start space-x-3 cursor-pointer\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={loadSamplePlannerItems}\r\n                        onChange={(e) => setLoadSamplePlannerItems(e.target.checked)}\r\n                        className=\"mt-1 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\r\n                      />\r\n                      <div className=\"flex-1\">\r\n                        <div className=\"font-medium text-gray-900\">Load sample planner items</div>\r\n                        <div className=\"text-sm text-gray-500\">\r\n                          Add example tasks and planning items to help you get organized\r\n                        </div>\r\n                      </div>\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex flex-col sm:flex-row gap-3\">\r\n                  <button\r\n                    onClick={() => setCurrentStep(1)}\r\n                    className=\"sm:w-auto px-6 py-3 border border-gray-300 text-gray-700 rounded-lg font-medium hover:bg-gray-50 transition-colors\"\r\n                  >\r\n                    Back\r\n                  </button>\r\n                  <button\r\n                    onClick={handleStarterDataStep}\r\n                    disabled={isLoading}\r\n                    className=\"flex-1 bg-blue-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                  >\r\n                    {isLoading ? 'Creating starter data...' : 'Create starter data'}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Step 3: Finish */}\r\n            {currentStep === 3 && (\r\n              <div className=\"space-y-6 text-center\">\r\n                <div className=\"text-6xl mb-4\">🎉</div>\r\n                <div>\r\n                  <h2 className=\"text-xl md:text-2xl font-semibold text-gray-900 mb-2\">\r\n                    You're All Set!\r\n                  </h2>\r\n                  <p className=\"text-gray-600\">\r\n                    Your household is ready to go. Welcome to your new home management system!\r\n                  </p>\r\n                </div>\r\n\r\n                <div className=\"bg-green-50 rounded-lg p-4 text-left\">\r\n                  <h3 className=\"font-medium text-green-900 mb-2\">What's been set up:</h3>\r\n                  <ul className=\"text-sm text-green-700 space-y-1\">\r\n                    <li>✅ Your household: {householdName}</li>\r\n                    {loadSampleRecipes ? <li>✅ Sample recipes added</li> : null}\r\n                    {loadSamplePlannerItems ? <li>✅ Sample planner items added</li> : null}\r\n                    <li>✅ Your account is ready to use</li>\r\n                  </ul>\r\n                </div>\r\n\r\n                <div className=\"flex flex-col sm:flex-row gap-3\">\r\n                  <button\r\n                    onClick={() => setCurrentStep(2)}\r\n                    className=\"sm:w-auto px-6 py-3 border border-gray-300 text-gray-700 rounded-lg font-medium hover:bg-gray-50 transition-colors\"\r\n                  >\r\n                    Back\r\n                  </button>\r\n                  <button\r\n                    onClick={handleCompleteOnboarding}\r\n                    disabled={isLoading}\r\n                    className=\"flex-1 bg-green-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                  >\r\n                    {isLoading ? 'Finalizing...' : 'Go to Dashboard'}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\planner\\page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchPlannerItems'. Either include it or remove the dependency array.","line":92,"column":6,"nodeType":"ArrayExpression","endLine":92,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [fetchPlannerItems, userData]","fix":{"range":[2538,2548],"text":"[fetchPlannerItems, userData]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":347,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":347,"endColumn":20,"suggestions":[{"fix":{"range":[12359,12411],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":352,"column":9,"nodeType":"CallExpression","messageId":"unexpected","endLine":352,"endColumn":78},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":356,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":356,"endColumn":56},{"ruleId":"react/jsx-no-bind","severity":1,"message":"JSX props should not use functions","line":462,"column":15,"nodeType":"JSXAttribute","messageId":"func","endLine":462,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useAuth, useUser } from '@clerk/nextjs';\r\nimport { useEffect, useState } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\n\r\ninterface UserData {\r\n  email: string;\r\n  role: 'owner' | 'member';\r\n  plan: 'free' | 'pro' | 'pro_plus';\r\n  household: {\r\n    id: string;\r\n    plan: string;\r\n  };\r\n}\r\n\r\ninterface PlannerItem {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  category: 'trip' | 'renovation' | 'dream' | 'goal' | 'event' | 'other';\r\n  status: 'planning' | 'in-progress' | 'completed' | 'on-hold';\r\n  priority: 'low' | 'medium' | 'high';\r\n  due_date?: string;\r\n  created_by: string;\r\n  household_id: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport default function PlannerPage() {\r\n  const { isSignedIn, isLoaded } = useAuth();\r\n  const { user } = useUser();\r\n  const router = useRouter();\r\n  \r\n  const [userData, setUserData] = useState<UserData | null>(null);\r\n  const [plannerItems, setPlannerItems] = useState<PlannerItem[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\r\n  const [showCreateModal, setShowCreateModal] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!isLoaded) return;\r\n\r\n    if (!isSignedIn) {\r\n      router.push('/sign-in');\r\n      return;\r\n    }\r\n\r\n    async function fetchUserData() {\r\n      if (!user?.id) return;\r\n\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        const response = await fetch('/api/user-data');\r\n        const result = await response.json();\r\n\r\n        if (!response.ok) {\r\n          console.error('Error fetching user data:', result.error);\r\n          setError(result.error || 'Failed to load user data');\r\n          return;\r\n        }\r\n\r\n        if (result.success && result.data) {\r\n          setUserData({\r\n            email: result.data.email,\r\n            role: result.data.role,\r\n            plan: result.data.plan || 'free',\r\n            household: result.data.household\r\n          });\r\n        } else {\r\n          setError('User not found in database');\r\n        }\r\n      } catch (err) {\r\n        console.error('Exception fetching user data:', err);\r\n        setError('An unexpected error occurred');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchUserData();\r\n  }, [isLoaded, isSignedIn, user?.id, router]);\r\n\r\n  useEffect(() => {\r\n    if (userData?.household?.id) {\r\n      fetchPlannerItems();\r\n    }\r\n  }, [userData]);\r\n\r\n  async function fetchPlannerItems() {\r\n    if (!userData?.household?.id) return;\r\n\r\n    try {\r\n      const response = await fetch('/api/planner');\r\n      const result = await response.json();\r\n\r\n      if (response.ok) {\r\n        // API returns array directly\r\n        setPlannerItems(Array.isArray(result) ? result : []);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching planner items:', err);\r\n    }\r\n  }\r\n\r\n  function getCategoryIcon(category: string): string {\r\n    switch (category) {\r\n      case 'trip': return '✈️';\r\n      case 'renovation': return '🏠';\r\n      case 'dream': return '💭';\r\n      case 'goal': return '🎯';\r\n      case 'event': return '📅';\r\n      default: return '📝';\r\n    }\r\n  }\r\n\r\n  function getStatusColor(status: string): string {\r\n    switch (status) {\r\n      case 'planning': return 'bg-blue-100 text-blue-800';\r\n      case 'in-progress': return 'bg-yellow-100 text-yellow-800';\r\n      case 'completed': return 'bg-green-100 text-green-800';\r\n      case 'on-hold': return 'bg-gray-100 text-gray-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  }\r\n\r\n  function getPriorityColor(priority: string): string {\r\n    switch (priority) {\r\n      case 'high': return 'bg-red-100 text-red-800';\r\n      case 'medium': return 'bg-yellow-100 text-yellow-800';\r\n      case 'low': return 'bg-green-100 text-green-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  }\r\n\r\n  function formatDate(dateString: string): string {\r\n    return new Date(dateString).toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric'\r\n    });\r\n  }\r\n\r\n  const filteredItems = selectedCategory === 'all' \r\n    ? plannerItems \r\n    : plannerItems.filter(item => item.category === selectedCategory);\r\n\r\n  const categories = [\r\n    { id: 'all', name: 'All Plans', icon: '📋' },\r\n    { id: 'trip', name: 'Trips', icon: '✈️' },\r\n    { id: 'renovation', name: 'Renovations', icon: '🏠' },\r\n    { id: 'dream', name: 'Dreams', icon: '💭' },\r\n    { id: 'goal', name: 'Goals', icon: '🎯' },\r\n    { id: 'event', name: 'Events', icon: '📅' },\r\n    { id: 'other', name: 'Other', icon: '📝' }\r\n  ];\r\n\r\n  // Show loading spinner while auth is loading or data is being fetched\r\n  if (!isLoaded || loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\" />\r\n          <p className=\"text-gray-600\">Loading...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!isSignedIn) {\r\n    return null;\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"bg-white shadow rounded-lg p-6 max-w-md w-full mx-4\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-red-500 text-6xl mb-4\">⚠️</div>\r\n            <h1 className=\"text-xl font-semibold text-gray-900 mb-2\">Error</h1>\r\n            <p className=\"text-gray-600 mb-4\">{error}</p>\r\n            <button \r\n              onClick={() => {\r\n          if (typeof window !== 'undefined') {\r\n            window.location.reload();\r\n          }\r\n        }}\r\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700\"\r\n            >\r\n              Try Again\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-4 sm:py-8 px-4 sm:px-6 lg:px-8\">\r\n      <div className=\"max-w-7xl mx-auto\">\r\n        {/* Header */}\r\n        <div className=\"bg-white shadow rounded-lg mb-4 sm:mb-6\">\r\n          <div className=\"px-4 sm:px-6 py-4 border-b border-gray-200\">\r\n            <div className=\"flex flex-col space-y-4 sm:flex-row sm:items-center sm:justify-between sm:space-y-0\">\r\n              <div>\r\n                <h1 className=\"text-xl sm:text-2xl font-bold text-gray-900\">Collaborative Planner</h1>\r\n                <p className=\"text-sm sm:text-base text-gray-600\">Plan trips, renovations, dreams, goals, and more together</p>\r\n              </div>\r\n              <button\r\n                onClick={() => setShowCreateModal(true)}\r\n                className=\"bg-blue-600 text-white px-4 py-3 sm:py-2 rounded-md hover:bg-blue-700 active:bg-blue-800 font-medium text-base sm:text-sm touch-manipulation\"\r\n              >\r\n                + New Plan\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Category Filter */}\r\n          <div className=\"px-4 sm:px-6 py-4\">\r\n            <div className=\"flex space-x-2 overflow-x-auto pb-2 -mb-2\">\r\n              {categories.map((category) => (\r\n                <button\r\n                  key={category.id}\r\n                  onClick={() => setSelectedCategory(category.id)}\r\n                  className={`flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium whitespace-nowrap transition-colors touch-manipulation ${\r\n                    selectedCategory === category.id\r\n                      ? 'bg-blue-100 text-blue-800'\r\n                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200 active:bg-gray-300'\r\n                  }`}\r\n                >\r\n                  <span>{category.icon}</span>\r\n                  <span>{category.name}</span>\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Planner Items Grid */}\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6\">\r\n          {filteredItems.map((item) => (\r\n            <div\r\n              key={item.id}\r\n              className=\"bg-white shadow rounded-lg p-4 sm:p-6 cursor-pointer hover:shadow-md active:scale-95 transition-all duration-200 touch-manipulation\"\r\n            >\r\n              <div className=\"flex items-start justify-between mb-3\">\r\n                <div className=\"flex items-center space-x-2 min-w-0 flex-1\">\r\n                  <span className=\"text-xl sm:text-2xl flex-shrink-0\">{getCategoryIcon(item.category)}</span>\r\n                  <h3 className=\"font-semibold text-gray-900 truncate\">{item.title}</h3>\r\n                </div>\r\n                <div className=\"flex flex-col sm:flex-row space-y-1 sm:space-y-0 sm:space-x-1 ml-2\">\r\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap ${getStatusColor(item.status)}`}>\r\n                    {item.status.replace('-', ' ')}\r\n                  </span>\r\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap ${getPriorityColor(item.priority)}`}>\r\n                    {item.priority}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n\r\n              {item.description ? <p className=\"text-gray-600 text-sm mb-3 line-clamp-2\">{item.description}</p> : null}\r\n\r\n              <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between text-xs text-gray-500 space-y-1 sm:space-y-0\">\r\n                <span>Created {formatDate(item.created_at)}</span>\r\n                {item.due_date ? <span className=\"font-medium\">\r\n                    Due: {formatDate(item.due_date)}\r\n                  </span> : null}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {filteredItems.length === 0 && (\r\n          <div className=\"text-center py-12\">\r\n            <div className=\"text-gray-400 text-6xl mb-4\">📋</div>\r\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No plans yet</h3>\r\n            <p className=\"text-gray-600 mb-4\">\r\n              {selectedCategory === 'all' \r\n                ? 'Create your first plan to get started!'\r\n                : `No ${categories.find(c => c.id === selectedCategory)?.name.toLowerCase()} plans yet.`\r\n              }\r\n            </p>\r\n            <button\r\n              onClick={() => setShowCreateModal(true)}\r\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700\"\r\n            >\r\n              Create Your First Plan\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {/* Create Plan Modal */}\r\n        {showCreateModal ? <CreatePlanModal\r\n            onClose={() => setShowCreateModal(false)}\r\n            onCreated={(newItem) => {\r\n              setPlannerItems([newItem, ...plannerItems]); // Add to beginning\r\n              setShowCreateModal(false);\r\n              // Optionally refresh the list to ensure consistency\r\n              setTimeout(() => fetchPlannerItems(), 100);\r\n            }}\r\n            householdId={userData?.household?.id || ''}\r\n          /> : null}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface CreatePlanModalProps {\r\n  onClose: () => void;\r\n  onCreated: (item: PlannerItem) => void;\r\n  householdId: string;\r\n}\r\n\r\nfunction CreatePlanModal({ onClose, onCreated, householdId: _householdId }: CreatePlanModalProps) {\r\n  const [title, setTitle] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [category, setCategory] = useState('trip');\r\n  const [priority, setPriority] = useState('medium');\r\n  const [dueDate, setDueDate] = useState('');\r\n  const [creating, setCreating] = useState(false);\r\n\r\n  async function handleCreate() {\r\n    if (!title.trim()) return;\r\n\r\n    setCreating(true);\r\n    try {\r\n      const response = await fetch('/api/planner', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          title: title.trim(),\r\n          description: description.trim(),\r\n          category,\r\n          priority,\r\n          due_date: dueDate || null\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log('✅ Plan created successfully:', result);\r\n        onCreated(result); // API returns the item directly\r\n      } else {\r\n        const errorData = await response.json();\r\n        console.error('❌ Failed to create plan:', errorData);\r\n        alert(`Failed to create plan: ${errorData.error || 'Unknown error'}`);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error creating plan:', err);\r\n      alert('Failed to create plan. Please try again.');\r\n    } finally {\r\n      setCreating(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n      <div className=\"bg-white rounded-lg max-w-md w-full max-h-[90vh] overflow-y-auto\">\r\n        <div className=\"p-4 sm:p-6\">\r\n          <div className=\"flex items-center justify-between mb-4 sm:mb-6\">\r\n            <h2 className=\"text-lg sm:text-xl font-bold text-gray-900\">Create New Plan</h2>\r\n            <button \r\n              onClick={onClose} \r\n              className=\"text-gray-400 hover:text-gray-600 p-2 -mr-2 touch-manipulation\"\r\n              aria-label=\"Close modal\"\r\n            >\r\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                Title *\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                value={title}\r\n                onChange={(e) => setTitle(e.target.value)}\r\n                className=\"w-full px-4 py-3 sm:px-3 sm:py-2 text-base sm:text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                placeholder=\"Enter plan title...\"\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                Description\r\n              </label>\r\n              <textarea\r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n                rows={3}\r\n                className=\"w-full px-4 py-3 sm:px-3 sm:py-2 text-base sm:text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none\"\r\n                placeholder=\"Enter description...\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Category\r\n                </label>\r\n                <select\r\n                  value={category}\r\n                  onChange={(e) => setCategory(e.target.value)}\r\n                  className=\"w-full px-4 py-3 sm:px-3 sm:py-2 text-base sm:text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                >\r\n                  <option value=\"trip\">🌍 Trip</option>\r\n                  <option value=\"renovation\">🏠 Renovation</option>\r\n                  <option value=\"dream\">💭 Dream</option>\r\n                  <option value=\"goal\">🎯 Goal</option>\r\n                  <option value=\"event\">🎉 Event</option>\r\n                  <option value=\"other\">📋 Other</option>\r\n                </select>\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Priority\r\n                </label>\r\n                <select\r\n                  value={priority}\r\n                  onChange={(e) => setPriority(e.target.value)}\r\n                  className=\"w-full px-4 py-3 sm:px-3 sm:py-2 text-base sm:text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                >\r\n                  <option value=\"low\">🟢 Low</option>\r\n                  <option value=\"medium\">🟡 Medium</option>\r\n                  <option value=\"high\">🔴 High</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                Due Date (Optional)\r\n              </label>\r\n              <input\r\n                type=\"date\"\r\n                value={dueDate}\r\n                onChange={(e) => setDueDate(e.target.value)}\r\n                className=\"w-full px-4 py-3 sm:px-3 sm:py-2 text-base sm:text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"mt-6 flex flex-col sm:flex-row justify-end space-y-3 sm:space-y-0 sm:space-x-3\">\r\n            <button\r\n              onClick={onClose}\r\n              className=\"px-4 py-3 sm:py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50 active:bg-gray-100 font-medium text-base sm:text-sm touch-manipulation\"\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              onClick={handleCreate}\r\n              disabled={!title.trim() || creating}\r\n              className=\"px-4 py-3 sm:py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 active:bg-blue-800 disabled:opacity-50 disabled:cursor-not-allowed font-medium text-base sm:text-sm touch-manipulation\"\r\n            >\r\n              {creating ? 'Creating...' : 'Create Plan'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\quiet-hours\\page.tsx","messages":[{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":51,"column":17,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":51,"endColumn":95,"fix":{"range":[1763,1770],"text":" />"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\r\n\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { useUserData } from '@/hooks/useUserData';\r\nimport QuietHours from '@/components/QuietHours';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { AlertCircle, Info, BellOff, Clock, Moon } from 'lucide-react';\r\n\r\nexport default function QuietHoursPage() {\r\n  const { userData, isLoading } = useUserData();\r\n  const [entitlements, setEntitlements] = useState<Record<string, unknown> | null>(null);\r\n  const [entitlementsLoading, setEntitlementsLoading] = useState(true);\r\n  const householdId = userData?.household_id;\r\n\r\n  const loadEntitlements = useCallback(async () => {\r\n    if (!householdId) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setEntitlementsLoading(true);\r\n      const response = await fetch(`/api/entitlements/${householdId}`);\r\n      const data = await response.json();\r\n      \r\n      if (response.ok) {\r\n        setEntitlements(data);\r\n      } else {\r\n        console.error('Failed to load entitlements:', data.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading entitlements:', error);\r\n    } finally {\r\n      setEntitlementsLoading(false);\r\n    }\r\n  }, [householdId]);\r\n\r\n  // Load entitlements\r\n  useEffect(() => {\r\n    if (householdId) {\r\n      void loadEntitlements();\r\n    }\r\n  }, [householdId, loadEntitlements]);\r\n\r\n  if (isLoading || entitlementsLoading) {\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"max-w-4xl mx-auto\">\r\n          <Card>\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"flex items-center justify-center\">\r\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n                <span className=\"ml-2 text-gray-600\">Loading...</span>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!userData?.household_id) {\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"max-w-4xl mx-auto\">\r\n          <Card>\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"text-center\">\r\n                <AlertCircle className=\"h-12 w-12 mx-auto mb-4 text-red-500\" />\r\n                <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">\r\n                  Household Required\r\n                </h2>\r\n                <p className=\"text-gray-600\">\r\n                  You need to be part of a household to access quiet hours features.\r\n                </p>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <div className=\"max-w-4xl mx-auto space-y-6\">\r\n        {/* Page Header */}\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Quiet Hours</h1>\r\n          <p className=\"text-gray-600\">\r\n            Manage notification quiet hours to automatically silence alerts during specific times.\r\n          </p>\r\n        </div>\r\n\r\n        {/* Quiet Hours Component */}\r\n        <QuietHours \r\n          householdId={userData.household_id}\r\n          entitlements={entitlements}\r\n        />\r\n\r\n        {/* Additional Information */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Info className=\"h-5 w-5\" />\r\n              About Quiet Hours\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-4\">\r\n              <div className=\"p-4 border rounded-lg\">\r\n                <h4 className=\"font-medium text-gray-900 mb-2 flex items-center gap-2\">\r\n                  <BellOff className=\"h-4 w-4\" />\r\n                  What Gets Silenced\r\n                </h4>\r\n                <ul className=\"text-sm text-gray-600 space-y-1\">\r\n                  <li>• Push notifications for new chores, events, and reminders</li>\r\n                  <li>• Email alerts for household activities</li>\r\n                  <li>• In-app notification sounds and banners</li>\r\n                  <li>• Automated system notifications</li>\r\n                </ul>\r\n              </div>\r\n              \r\n              <div className=\"p-4 border rounded-lg\">\r\n                <h4 className=\"font-medium text-gray-900 mb-2 flex items-center gap-2\">\r\n                  <Clock className=\"h-4 w-4\" />\r\n                  How It Works\r\n                </h4>\r\n                <ul className=\"text-sm text-gray-600 space-y-1\">\r\n                  <li>• Set your preferred start and end times</li>\r\n                  <li>• Choose which days of the week to apply quiet hours</li>\r\n                  <li>• Notifications are automatically silenced during these times</li>\r\n                  <li>• You can still access the app normally during quiet hours</li>\r\n                </ul>\r\n              </div>\r\n\r\n              <div className=\"p-4 border rounded-lg\">\r\n                <h4 className=\"font-medium text-gray-900 mb-2 flex items-center gap-2\">\r\n                  <Moon className=\"h-4 w-4\" />\r\n                  Pro Feature\r\n                </h4>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  Quiet hours are a Pro feature that helps you maintain a healthy work-life balance \r\n                  by automatically managing when you receive household notifications.\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\recipes\\[id]\\edit\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'recipesError' is assigned a value but never used.","line":15,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":72},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1421,1424],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1421,1424],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":92,"column":59,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3079,3154],"text":"The recipe you&apos;re looking for doesn't exist or you don't have access to it."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3079,3154],"text":"The recipe you&lsquo;re looking for doesn't exist or you don't have access to it."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3079,3154],"text":"The recipe you&#39;re looking for doesn't exist or you don't have access to it."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3079,3154],"text":"The recipe you&rsquo;re looking for doesn't exist or you don't have access to it."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":92,"column":80,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3079,3154],"text":"The recipe you're looking for doesn&apos;t exist or you don't have access to it."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3079,3154],"text":"The recipe you're looking for doesn&lsquo;t exist or you don't have access to it."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3079,3154],"text":"The recipe you're looking for doesn&#39;t exist or you don't have access to it."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3079,3154],"text":"The recipe you're looking for doesn&rsquo;t exist or you don't have access to it."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":92,"column":99,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3079,3154],"text":"The recipe you're looking for doesn't exist or you don&apos;t have access to it."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3079,3154],"text":"The recipe you're looking for doesn't exist or you don&lsquo;t have access to it."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3079,3154],"text":"The recipe you're looking for doesn't exist or you don&#39;t have access to it."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3079,3154],"text":"The recipe you're looking for doesn't exist or you don&rsquo;t have access to it."},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useAuth } from '@clerk/nextjs';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useRouter, useParams } from 'next/navigation';\r\nimport { toast } from 'sonner';\r\nimport { useRecipes, Recipe } from '@/hooks/useRecipes';\r\n\r\nexport default function EditRecipePage() {\r\n  const { isSignedIn, isLoaded } = useAuth();\r\n  const router = useRouter();\r\n  const params = useParams();\r\n  const recipeId = params.id as string;\r\n  \r\n  const { data: recipes, isLoading: recipesLoading, error: recipesError } = useRecipes();\r\n  const recipesData = recipes as { success: boolean; recipes: Recipe[] } | undefined;\r\n  \r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    description: '',\r\n    prep_time: 0,\r\n    cook_time: 0,\r\n    servings: 1,\r\n    ingredients: '',\r\n    instructions: ''\r\n  });\r\n\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Find the recipe to edit\r\n  const recipe = recipesData?.recipes?.find(r => r.id === recipeId);\r\n\r\n  useEffect(() => {\r\n    if (recipe) {\r\n      setFormData({\r\n        title: recipe.name || '',\r\n        description: recipe.description || '',\r\n        prep_time: recipe.prep_time || 0,\r\n        cook_time: recipe.cook_time || 0,\r\n        servings: recipe.servings || 1,\r\n        ingredients: Array.isArray(recipe.ingredients) \r\n          ? recipe.ingredients.map((ing: any) => \r\n              `${ing.amount || ''} ${ing.unit || ''} ${ing.name || ''}`.trim()\r\n            ).join('\\n')\r\n          : '',\r\n        instructions: Array.isArray(recipe.instructions) \r\n          ? recipe.instructions.join('\\n')\r\n          : ''\r\n      });\r\n      setIsLoading(false);\r\n    } else if (recipesData && !recipesLoading) {\r\n      // Recipe not found\r\n      toast.error('Recipe not found');\r\n      router.push('/recipes');\r\n    }\r\n  }, [recipe, recipesData, recipesLoading, router]);\r\n\r\n  if (!isLoaded) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\" />\r\n          <p className=\"text-gray-600\">Loading...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!isSignedIn) {\r\n    router.push('/sign-in');\r\n    return null;\r\n  }\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\" />\r\n          <p className=\"text-gray-600\">Loading recipe...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!recipe) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"text-red-500 text-6xl mb-4\">❌</div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Recipe Not Found</h1>\r\n          <p className=\"text-gray-600 mb-6\">The recipe you're looking for doesn't exist or you don't have access to it.</p>\r\n          <button\r\n            onClick={() => router.push('/recipes')}\r\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\r\n          >\r\n            Back to Recipes\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      // Format ingredients and instructions properly\r\n      const formattedData = {\r\n        ...formData,\r\n        ingredients: formData.ingredients.trim(),\r\n        instructions: formData.instructions.trim()\r\n      };\r\n\r\n      const response = await fetch(`/api/recipes/${recipeId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formattedData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        if (result.success) {\r\n          toast.success('Recipe updated successfully!');\r\n          router.push('/recipes');\r\n        } else {\r\n          toast.error(`Failed to update recipe: ${result.error || 'Unknown error'}`);\r\n        }\r\n      } else {\r\n        const error = await response.json();\r\n        toast.error(`Failed to update recipe: ${error.error || error.message || 'Unknown error'}`);\r\n      }\r\n    } catch (error) {\r\n      toast.error('Failed to update recipe. Please try again.');\r\n      console.error('Error updating recipe:', error);\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: name === 'prep_time' || name === 'cook_time' || name === 'servings' \r\n        ? parseInt(value) || 0 \r\n        : value\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-8 px-4 sm:px-6 lg:px-8\">\r\n      <div className=\"max-w-2xl mx-auto\">\r\n        <div className=\"bg-white shadow rounded-lg\">\r\n          {/* Header */}\r\n          <div className=\"px-6 py-4 border-b border-gray-200\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <h1 className=\"text-2xl font-bold text-gray-900\">Edit Recipe</h1>\r\n                <p className=\"text-gray-600\">Update your recipe details</p>\r\n              </div>\r\n              <button\r\n                onClick={() => router.back()}\r\n                className=\"text-gray-400 hover:text-gray-600\"\r\n              >\r\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n                </svg>\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Form */}\r\n          <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\r\n            {/* Recipe Name */}\r\n            <div>\r\n              <label htmlFor=\"title\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                Recipe Name *\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"title\"\r\n                name=\"title\"\r\n                required\r\n                value={formData.title}\r\n                onChange={handleChange}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                placeholder=\"Enter recipe name\"\r\n              />\r\n            </div>\r\n\r\n            {/* Description */}\r\n            <div>\r\n              <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                Description\r\n              </label>\r\n              <textarea\r\n                id=\"description\"\r\n                name=\"description\"\r\n                rows={3}\r\n                value={formData.description}\r\n                onChange={handleChange}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                placeholder=\"Brief description of the recipe\"\r\n              />\r\n            </div>\r\n\r\n            {/* Time and Servings */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n              <div>\r\n                <label htmlFor=\"prep_time\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Prep Time (min)\r\n                </label>\r\n                <input\r\n                  type=\"number\"\r\n                  id=\"prep_time\"\r\n                  name=\"prep_time\"\r\n                  min=\"0\"\r\n                  value={formData.prep_time}\r\n                  onChange={handleChange}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                />\r\n              </div>\r\n              <div>\r\n                <label htmlFor=\"cook_time\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Cook Time (min)\r\n                </label>\r\n                <input\r\n                  type=\"number\"\r\n                  id=\"cook_time\"\r\n                  name=\"cook_time\"\r\n                  min=\"0\"\r\n                  value={formData.cook_time}\r\n                  onChange={handleChange}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                />\r\n              </div>\r\n              <div>\r\n                <label htmlFor=\"servings\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Servings\r\n                </label>\r\n                <input\r\n                  type=\"number\"\r\n                  id=\"servings\"\r\n                  name=\"servings\"\r\n                  min=\"1\"\r\n                  value={formData.servings}\r\n                  onChange={handleChange}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Ingredients */}\r\n            <div>\r\n              <label htmlFor=\"ingredients\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                Ingredients *\r\n              </label>\r\n              <textarea\r\n                id=\"ingredients\"\r\n                name=\"ingredients\"\r\n                rows={4}\r\n                required\r\n                value={formData.ingredients}\r\n                onChange={handleChange}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                placeholder=\"List ingredients, one per line or separated by commas\"\r\n              />\r\n            </div>\r\n\r\n            {/* Instructions */}\r\n            <div>\r\n              <label htmlFor=\"instructions\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                Instructions *\r\n              </label>\r\n              <textarea\r\n                id=\"instructions\"\r\n                name=\"instructions\"\r\n                rows={6}\r\n                required\r\n                value={formData.instructions}\r\n                onChange={handleChange}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                placeholder=\"Step-by-step cooking instructions\"\r\n              />\r\n            </div>\r\n\r\n            {/* Submit Button */}\r\n            <div className=\"flex justify-end space-x-3 pt-4\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => router.back()}\r\n                className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n              >\r\n                Cancel\r\n              </button>\r\n              <button\r\n                type=\"submit\"\r\n                disabled={isSubmitting}\r\n                className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n              >\r\n                {isSubmitting ? 'Updating...' : 'Update Recipe'}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\recipes\\create\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\recipes\\page.tsx","messages":[{"ruleId":"no-useless-return","severity":1,"message":"Unnecessary return statement.","line":42,"column":7,"nodeType":"ReturnStatement","messageId":"unnecessaryReturn","endLine":42,"endColumn":14,"fix":{"range":[1313,1558],"text":"() => {\r\n    if (!isLoaded) return;\r\n\r\n    if (!isSignedIn) {\r\n      router.push('/sign-in');\r\n      return;\r\n    }\r\n    \r\n    if (isSignedIn && !loading && !hasCompletedOnboarding) {\r\n      router.push('/onboarding');\r\n      \r\n    }\r\n  }"}},{"ruleId":"no-alert","severity":1,"message":"Unexpected confirm.","line":117,"column":10,"nodeType":"CallExpression","messageId":"unexpected","endLine":117,"endColumn":95},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":185,"column":20,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":187,"endColumn":20,"fix":{"range":[6651,6791],"text":"recipe.description ? <p className=\"text-sm text-gray-600 line-clamp-2\">{recipe.description}</p> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":208,"column":22,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":221,"endColumn":22,"fix":{"range":[7812,8472],"text":"recipe.tags && recipe.tags.length > 0 ? <div className=\"flex flex-wrap gap-1\">\r\n                        {recipe.tags.slice(0, 3).map((tag, index) => (\r\n                          <Badge key={index} variant=\"outline\" className=\"text-xs\">\r\n                            {tag}\r\n                          </Badge>\r\n                        ))}\r\n                        {recipe.tags.length > 3 && (\r\n                          <Badge variant=\"outline\" className=\"text-xs\">\r\n                            +{recipe.tags.length - 3}\r\n                          </Badge>\r\n                        )}\r\n                      </div> : null"}},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":211,"column":39,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":211,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":3,"source":"'use client';\r\n\r\nimport { useAuth } from '@clerk/nextjs';\r\nimport React, { useEffect } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { toast } from 'sonner';\r\nimport { useUserData } from '@/hooks/useUserData';\r\nimport { useRecipes, Recipe } from '@/hooks/useRecipes';\r\n\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner';\r\nimport { ErrorDisplay } from '@/components/ui/ErrorDisplay';\r\n\r\nexport default function RecipesPage() {\r\n  const { isSignedIn, isLoaded } = useAuth();\r\n  const router = useRouter();\r\n  \r\n  // Data fetching hooks\r\n  const { userData, isLoading: userDataLoading, error: userDataError } = useUserData();\r\n  const { data: recipes, isLoading: recipesLoading, error: recipesError, refetch } = useRecipes();\r\n  const recipesData = recipes as { success: boolean; recipes: Recipe[] } | undefined;\r\n  \r\n  // Loading and error states\r\n  const loading = userDataLoading || recipesLoading;\r\n  const error = userDataError || recipesError;\r\n  \r\n  // Check if user has completed onboarding\r\n  const hasCompletedOnboarding = userData?.has_onboarded && userData?.household_id;\r\n\r\n  useEffect(() => {\r\n    if (!isLoaded) return;\r\n\r\n    if (!isSignedIn) {\r\n      router.push('/sign-in');\r\n      return;\r\n    }\r\n    \r\n    if (isSignedIn && !loading && !hasCompletedOnboarding) {\r\n      router.push('/onboarding');\r\n      return;\r\n    }\r\n  }, [isLoaded, isSignedIn, loading, hasCompletedOnboarding, router]);\r\n\r\n  // Show loading spinner while auth is loading or data is being fetched\r\n  if (!isLoaded || loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <LoadingSpinner size=\"lg\" text=\"Loading recipes...\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!isSignedIn) {\r\n    return null;\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <ErrorDisplay \r\n          error={error.message || 'Failed to load recipes'} \r\n          onRetry={() => window.location.reload()}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Check if user has completed onboarding\r\n  if (!hasCompletedOnboarding) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <Card className=\"max-w-md w-full mx-4\">\r\n          <CardHeader className=\"text-center\">\r\n            <div className=\"text-blue-500 text-6xl mb-4\">🏠</div>\r\n            <CardTitle>Complete Onboarding First</CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"text-center\">\r\n            <p className=\"text-gray-600 mb-4\">\r\n              You need to complete the onboarding process to access recipes.\r\n            </p>\r\n            <Button \r\n              onClick={() => router.push('/onboarding')}\r\n              className=\"w-full\"\r\n            >\r\n              Go to Onboarding\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Final safety check - ensure user data is loaded\r\n  if (!userData || !userData.household_id) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <LoadingSpinner size=\"lg\" text=\"Loading user data...\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const handleCreateRecipe = () => {\r\n    router.push('/recipes/create');\r\n  };\r\n\r\n  const handleBackToMealPlanner = () => {\r\n    router.push('/meal-planner');\r\n  };\r\n\r\n  const handleEditRecipe = (recipeId: string) => {\r\n    router.push(`/recipes/${recipeId}/edit`);\r\n  };\r\n\r\n  const handleDeleteRecipe = async (recipeId: string) => {\r\n    if (!confirm('Are you sure you want to delete this recipe? This action cannot be undone.')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`/api/recipes/${recipeId}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (response.ok) {\r\n        toast.success('Recipe deleted successfully!');\r\n        refetch(); // Refresh the recipes list\r\n      } else {\r\n        toast.error('Failed to delete recipe');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting recipe:', error);\r\n      toast.error('Failed to delete recipe');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-8 px-4 sm:px-6 lg:px-8\">\r\n      <div className=\"max-w-7xl mx-auto\">\r\n        {/* Header */}\r\n        <div className=\"mb-8\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <h1 className=\"text-3xl font-bold text-gray-900\">My Recipes</h1>\r\n              <p className=\"text-gray-600 mt-2\">Manage and organize your recipe collection</p>\r\n            </div>\r\n            <div className=\"flex items-center space-x-4\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={handleBackToMealPlanner}\r\n              >\r\n                <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\r\n                </svg>\r\n                Back to Meal Planner\r\n              </Button>\r\n              <Button\r\n                onClick={handleCreateRecipe}\r\n                className=\"bg-green-600 hover:bg-green-700\"\r\n              >\r\n                <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n                </svg>\r\n                Create New Recipe\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Recipes Grid */}\r\n        {recipesData?.recipes && recipesData.recipes.length > 0 ? (\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\r\n            {recipesData.recipes.map((recipe) => (\r\n              <Card key={recipe.id} className=\"hover:shadow-md transition-shadow\">\r\n                <CardHeader className=\"pb-3\">\r\n                  <div className=\"flex items-start justify-between\">\r\n                    <CardTitle className=\"text-lg line-clamp-2\">{recipe.name}</CardTitle>\r\n                    <div className=\"flex items-center space-x-1\">\r\n                      <Badge variant=\"secondary\" className=\"text-xs\">\r\n                        {recipe.difficulty || 'Easy'}\r\n                      </Badge>\r\n                    </div>\r\n                  </div>\r\n                  {recipe.description && (\r\n                    <p className=\"text-sm text-gray-600 line-clamp-2\">{recipe.description}</p>\r\n                  )}\r\n                </CardHeader>\r\n                <CardContent className=\"pt-0\">\r\n                  <div className=\"space-y-3\">\r\n                    {/* Recipe Stats */}\r\n                    <div className=\"grid grid-cols-3 gap-2 text-xs text-gray-600\">\r\n                      <div className=\"text-center\">\r\n                        <div className=\"font-medium text-gray-900\">{recipe.prep_time || 0}</div>\r\n                        <div>Prep (min)</div>\r\n                      </div>\r\n                      <div className=\"text-center\">\r\n                        <div className=\"font-medium text-gray-900\">{recipe.cook_time || 0}</div>\r\n                        <div>Cook (min)</div>\r\n                      </div>\r\n                      <div className=\"text-center\">\r\n                        <div className=\"font-medium text-gray-900\">{recipe.servings || 1}</div>\r\n                        <div>Servings</div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* Tags */}\r\n                    {recipe.tags && recipe.tags.length > 0 && (\r\n                      <div className=\"flex flex-wrap gap-1\">\r\n                        {recipe.tags.slice(0, 3).map((tag, index) => (\r\n                          <Badge key={index} variant=\"outline\" className=\"text-xs\">\r\n                            {tag}\r\n                          </Badge>\r\n                        ))}\r\n                        {recipe.tags.length > 3 && (\r\n                          <Badge variant=\"outline\" className=\"text-xs\">\r\n                            +{recipe.tags.length - 3}\r\n                          </Badge>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n\r\n                    {/* Action Buttons */}\r\n                    <div className=\"flex items-center space-x-2 pt-2\">\r\n                      <Button\r\n                        variant=\"outline\"\r\n                        size=\"sm\"\r\n                        onClick={() => handleEditRecipe(recipe.id)}\r\n                        className=\"flex-1\"\r\n                      >\r\n                        <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\r\n                        </svg>\r\n                        Edit\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"outline\"\r\n                        size=\"sm\"\r\n                        onClick={() => handleDeleteRecipe(recipe.id)}\r\n                        className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\r\n                      >\r\n                        <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\r\n                        </svg>\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          /* Empty State */\r\n          <Card className=\"text-center py-12\">\r\n            <CardContent>\r\n              <div className=\"text-gray-400 text-6xl mb-4\">🍽️</div>\r\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Recipes Yet</h3>\r\n              <p className=\"text-gray-500 mb-6\">\r\n                Start building your recipe collection to make meal planning easier.\r\n              </p>\r\n              <div className=\"flex items-center justify-center space-x-4\">\r\n                <Button\r\n                  onClick={handleCreateRecipe}\r\n                  className=\"bg-green-600 hover:bg-green-700\"\r\n                >\r\n                  <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n                  </svg>\r\n                  Create Your First Recipe\r\n                </Button>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  onClick={handleBackToMealPlanner}\r\n                >\r\n                  Back to Meal Planner\r\n                </Button>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\reminders\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":4,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport { useAuth, useUser } from '@clerk/nextjs';\r\nimport { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { getReminders, addReminder, deleteReminder } from '@/lib/reminders';\r\nimport { getChores } from '@/lib/chores';\r\nimport { getCalendarEvents } from '@/lib/calendar';\r\nimport { canAccessFeature } from '@/lib/planFeatures';\r\n\r\ninterface UserData {\r\n  email: string;\r\n  role: 'owner' | 'member';\r\n  plan: 'free' | 'pro' | 'pro_plus';\r\n  xp: number;\r\n  coins: number;\r\n  household: {\r\n    id: string;\r\n    plan: string;\r\n    game_mode: string;\r\n    created_at: string;\r\n  };\r\n}\r\n\r\ninterface Reminder {\r\n  id: string;\r\n  title: string;\r\n  related_type: 'chore' | 'calendar_event';\r\n  related_id: string;\r\n  remind_at: string;\r\n  created_by: string;\r\n  household_id: string;\r\n  created_at: string;\r\n}\r\n\r\ninterface Chore {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  assigned_to?: string;\r\n  due_at?: string;\r\n  recurrence?: string;\r\n  created_by: string;\r\n  household_id: string;\r\n  created_at: string;\r\n}\r\n\r\ninterface CalendarEvent {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  start_time: string;\r\n  end_time: string;\r\n  created_by: string;\r\n  household_id: string;\r\n  created_at: string;\r\n}\r\n\r\nexport default function RemindersPage() {\r\n  const { isSignedIn, isLoaded } = useAuth();\r\n  const { user } = useUser();\r\n  const router = useRouter();\r\n  \r\n  const [userData, setUserData] = useState<UserData | null>(null);\r\n  const [reminders, setReminders] = useState<Reminder[]>([]);\r\n  const [chores, setChores] = useState<Chore[]>([]);\r\n  const [calendarEvents, setCalendarEvents] = useState<CalendarEvent[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [addingReminder, setAddingReminder] = useState(false);\r\n  const [deletingReminder, setDeletingReminder] = useState<string | null>(null);\r\n  const [loadingRelatedItems, setLoadingRelatedItems] = useState(false);\r\n  \r\n  // Form state\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    related_type: 'chore' as 'chore' | 'calendar_event',\r\n    related_id: '',\r\n    remind_at: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!isLoaded) return;\r\n\r\n    if (!isSignedIn) {\r\n      router.push('/sign-in');\r\n      return;\r\n    }\r\n\r\n    async function fetchUserData() {\r\n      if (!user?.id) return;\r\n\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        const response = await fetch('/api/user-data');\r\n        const result = await response.json();\r\n\r\n        if (!response.ok) {\r\n          console.error('Error fetching user data:', result.error);\r\n          setError(result.error || 'Failed to load user data');\r\n          return;\r\n        }\r\n\r\n        if (result.success && result.data) {\r\n          const userDataObj = {\r\n            email: result.data.email,\r\n            role: result.data.role,\r\n            plan: result.data.plan || 'free',\r\n            xp: result.data.xp || 0,\r\n            coins: result.data.coins || 0,\r\n            household: result.data.household\r\n          };\r\n          \r\n          setUserData(userDataObj);\r\n\r\n          // Check if user can access reminders feature\r\n          if (!canAccessFeature(userDataObj.plan, 'reminders')) {\r\n            router.push('/upgrade');\r\n          }\r\n        } else {\r\n          setError('User not found in database');\r\n        }\r\n      } catch (err) {\r\n        console.error('Exception fetching user data:', err);\r\n        setError('An unexpected error occurred');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchUserData();\r\n  }, [isLoaded, isSignedIn, user?.id, router]);\r\n\r\n  const householdId = userData?.household?.id;\r\n\r\n  const fetchRelatedItems = useCallback(async () => {\r\n    if (!householdId) return;\r\n\r\n    try {\r\n      setLoadingRelatedItems(true);\r\n      const [choresData, eventsData] = await Promise.all([\r\n        getChores(householdId),\r\n        getCalendarEvents(householdId),\r\n      ]);\r\n      setChores(Array.isArray(choresData) ? choresData : choresData?.chores ?? []);\r\n      setCalendarEvents(Array.isArray(eventsData) ? eventsData : eventsData?.events ?? []);\r\n    } catch (err) {\r\n      console.error('Error fetching related items:', err);\r\n      setError('Failed to load chores and events');\r\n    } finally {\r\n      setLoadingRelatedItems(false);\r\n    }\r\n  }, [householdId]);\r\n\r\n  const fetchReminders = useCallback(async () => {\r\n    if (!householdId) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const data = await getReminders(householdId);\r\n      setReminders(data);\r\n    } catch (err) {\r\n      console.error('Error fetching reminders:', err);\r\n      setError('Failed to load reminders');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [householdId]);\r\n\r\n  useEffect(() => {\r\n    if (householdId) {\r\n      void fetchReminders();\r\n      void fetchRelatedItems();\r\n    }\r\n  }, [fetchRelatedItems, fetchReminders, householdId]);\r\n\r\n  const handleAddReminder = useCallback(async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    if (!user?.id || !householdId) return;\r\n\r\n    try {\r\n      setAddingReminder(true);\r\n      setError(null);\r\n\r\n      await addReminder({\r\n        title: formData.title,\r\n        related_type: formData.related_type,\r\n        related_id: formData.related_id,\r\n        remind_at: formData.remind_at,\r\n        created_by: user.id,\r\n        household_id: householdId,\r\n      });\r\n\r\n      setFormData({\r\n        title: '',\r\n        related_type: 'chore',\r\n        related_id: '',\r\n        remind_at: '',\r\n      });\r\n\r\n      await fetchReminders();\r\n    } catch (err) {\r\n      console.error('Error adding reminder:', err);\r\n      setError('Failed to add reminder');\r\n    } finally {\r\n      setAddingReminder(false);\r\n    }\r\n  }, [fetchReminders, formData, householdId, user?.id]);\r\n\r\n  const handleRelatedTypeChange = useCallback((newType: 'chore' | 'calendar_event') => {\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      related_type: newType,\r\n      related_id: '',\r\n    }));\r\n  }, []);\r\n\r\n  const handleDeleteReminder = useCallback(async (reminderId: string) => {\r\n    if (!user?.id) return;\r\n\r\n    try {\r\n      setDeletingReminder(reminderId);\r\n      setError(null);\r\n\r\n      await deleteReminder(reminderId);\r\n      await fetchReminders();\r\n    } catch (err) {\r\n      console.error('Error deleting reminder:', err);\r\n      setError('Failed to delete reminder');\r\n    } finally {\r\n      setDeletingReminder(null);\r\n    }\r\n  }, [fetchReminders, user?.id]);\r\n\r\n  const formatDateTime = useCallback((dateTimeString: string) => {\r\n    return new Date(dateTimeString).toLocaleString('en-US', {\r\n      weekday: 'short',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n    });\r\n  }, []);\r\n\r\n  // Show loading spinner while auth is loading or data is being fetched\r\n  if (!isLoaded || loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\" />\r\n          <p className=\"text-gray-600\">Loading...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // This should not be reached if redirect is working, but just in case\r\n  if (!isSignedIn) {\r\n    return null;\r\n  }\r\n\r\n  // Show error state\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"bg-white shadow rounded-lg p-6 max-w-md w-full mx-4\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-red-500 text-6xl mb-4\">⚠️</div>\r\n            <h1 className=\"text-xl font-semibold text-gray-900 mb-2\">Error</h1>\r\n            <p className=\"text-gray-600 mb-4\">{error}</p>\r\n            <button \r\n              onClick={() => {\r\n          if (typeof window !== 'undefined') {\r\n            window.location.reload();\r\n          }\r\n        }}\r\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700\"\r\n            >\r\n              Try Again\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n        <div className=\"mb-8\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">⏰ Reminders</h1>\r\n          <p className=\"text-gray-600\">Manage your household reminders</p>\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\r\n          {/* Add Reminder Form */}\r\n          <div className=\"lg:col-span-1\">\r\n            <div className=\"bg-white rounded-lg shadow p-6\">\r\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Add New Reminder</h2>\r\n              \r\n              <form onSubmit={handleAddReminder} className=\"space-y-4\">\r\n                <div>\r\n                  <label htmlFor=\"title\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Title *\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"title\"\r\n                    required\r\n                    value={formData.title}\r\n                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                    placeholder=\"Reminder title\"\r\n                  />\r\n                </div>\r\n\r\n                                 <div>\r\n                   <label htmlFor=\"related_type\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                     Related Type *\r\n                   </label>\r\n                   <select\r\n                     id=\"related_type\"\r\n                     required\r\n                     value={formData.related_type}\r\n                     onChange={(e) => handleRelatedTypeChange(e.target.value as 'chore' | 'calendar_event')}\r\n                     className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                   >\r\n                     <option value=\"chore\">Chore</option>\r\n                     <option value=\"calendar_event\">Calendar Event</option>\r\n                   </select>\r\n                 </div>\r\n\r\n                 <div>\r\n                   <label htmlFor=\"related_id\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                     Related Item *\r\n                   </label>\r\n                   {loadingRelatedItems ? (\r\n                     <div className=\"w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-500\">\r\n                       Loading {formData.related_type === 'chore' ? 'chores' : 'events'}...\r\n                     </div>\r\n                   ) : (\r\n                     <select\r\n                       id=\"related_id\"\r\n                       required\r\n                       value={formData.related_id}\r\n                       onChange={(e) => setFormData({ ...formData, related_id: e.target.value })}\r\n                       className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                     >\r\n                       <option value=\"\">Select a {formData.related_type === 'chore' ? 'chore' : 'event'}</option>\r\n                       {formData.related_type === 'chore' ? (\r\n                         chores.map((chore) => (\r\n                           <option key={chore.id} value={chore.id}>\r\n                             {chore.title}\r\n                           </option>\r\n                         ))\r\n                       ) : (\r\n                         calendarEvents.map((event) => (\r\n                           <option key={event.id} value={event.id}>\r\n                             {event.title}\r\n                           </option>\r\n                         ))\r\n                       )}\r\n                     </select>\r\n                   )}\r\n                   {formData.related_type === 'chore' && chores.length === 0 && !loadingRelatedItems && (\r\n                     <p className=\"text-sm text-gray-500 mt-1\">No chores available. Create some chores first.</p>\r\n                   )}\r\n                   {formData.related_type === 'calendar_event' && calendarEvents.length === 0 && !loadingRelatedItems && (\r\n                     <p className=\"text-sm text-gray-500 mt-1\">No calendar events available. Create some events first.</p>\r\n                   )}\r\n                 </div>\r\n\r\n                <div>\r\n                  <label htmlFor=\"remind_at\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Remind At *\r\n                  </label>\r\n                  <input\r\n                    type=\"datetime-local\"\r\n                    id=\"remind_at\"\r\n                    required\r\n                    value={formData.remind_at}\r\n                    onChange={(e) => setFormData({ ...formData, remind_at: e.target.value })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                  />\r\n                </div>\r\n\r\n                <button\r\n                  type=\"submit\"\r\n                  disabled={addingReminder}\r\n                  className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                >\r\n                  {addingReminder ? 'Adding...' : 'Add Reminder'}\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Reminders List */}\r\n          <div className=\"lg:col-span-2\">\r\n            <div className=\"bg-white rounded-lg shadow overflow-hidden\">\r\n              <div className=\"px-6 py-4 border-b border-gray-200\">\r\n                <h2 className=\"text-xl font-semibold text-gray-900\">Upcoming Reminders</h2>\r\n              </div>\r\n              \r\n              {reminders.length === 0 ? (\r\n                <div className=\"p-6 text-center\">\r\n                  <div className=\"text-gray-400 text-6xl mb-4\">⏰</div>\r\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No reminders set</h3>\r\n                  <p className=\"text-gray-600\">Add your first reminder to get started!</p>\r\n                </div>\r\n              ) : (\r\n                <ul className=\"divide-y divide-gray-200\">\r\n                  {reminders.map((reminder) => (\r\n                    <li key={reminder.id} className=\"px-6 py-4 hover:bg-gray-50\">\r\n                      <div className=\"flex items-start justify-between\">\r\n                        <div className=\"flex-1\">\r\n                          <div className=\"flex items-center gap-2 mb-2\">\r\n                            <h3 className=\"text-lg font-semibold text-gray-900\">{reminder.title}</h3>\r\n                            <span className={`text-xs px-2 py-1 rounded-full ${\r\n                              reminder.related_type === 'chore' \r\n                                ? 'bg-green-100 text-green-800' \r\n                                : 'bg-blue-100 text-blue-800'\r\n                            }`}>\r\n                              {reminder.related_type === 'chore' ? 'Chore' : 'Event'}\r\n                            </span>\r\n                          </div>\r\n                          \r\n                          <div className=\"text-sm text-gray-500 space-y-1\">\r\n                            <div>⏰ {formatDateTime(reminder.remind_at)}</div>\r\n                            <div>🔗 Related ID: {reminder.related_id}</div>\r\n                            <div>👤 Created by: {reminder.created_by.replace('user_', '').slice(0, 6)}...</div>\r\n                          </div>\r\n                        </div>\r\n                        \r\n                        {reminder.created_by === user?.id && (\r\n                          <button\r\n                            onClick={() => handleDeleteReminder(reminder.id)}\r\n                            disabled={deletingReminder === reminder.id}\r\n                            className=\"ml-4 text-red-600 hover:text-red-800 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                          >\r\n                            {deletingReminder === reminder.id ? 'Deleting...' : '🗑️'}\r\n                          </button>\r\n                        )}\r\n                      </div>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\rewards\\history\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":19,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":17},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":40,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":40,"endColumn":20,"suggestions":[{"fix":{"range":[986,1025],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":46,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":46,"endColumn":20,"suggestions":[{"fix":{"range":[1231,1265],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":54,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":54,"endColumn":20,"suggestions":[{"fix":{"range":[1423,1483],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":56,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":56,"endColumn":20,"suggestions":[{"fix":{"range":[1547,1593],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":80,"column":23,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":80,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// @/app/rewards/history/page.tsx\r\n'use client'\r\n\r\nimport { useEffect, useState } from 'react'\r\nimport { getRewardHistory } from '@/lib/supabase/rewardHistory'\r\nimport { ProBadge } from '@/components/ProBadge'\r\n\r\n// Simple date formatter as fallback\r\nfunction formatDate(dateString: string) {\r\n  try {\r\n    const date = new Date(dateString)\r\n    return date.toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    })\r\n  } catch (error) {\r\n    return dateString\r\n  }\r\n}\r\n\r\nexport default function RewardHistoryPage() {\r\n  const [history, setHistory] = useState<Array<{\r\n    rewards: Array<{\r\n      name: string;\r\n      pro_only: boolean;\r\n      xp_cost: number;\r\n      coin_cost: number;\r\n    }>;\r\n    created_at: string;\r\n    reward_id: string;\r\n  }>>([])\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    const fetchHistory = async () => {\r\n      try {\r\n        console.log('🔄 Fetching user data...')\r\n        const res = await fetch('/api/user-data')\r\n        if (!res.ok) {\r\n          throw new Error(`Failed to fetch user data: ${res.status}`)\r\n        }\r\n        const user = await res.json()\r\n        console.log('👤 User data:', user)\r\n        \r\n        if (!user?.id) {\r\n          console.error('❌ No user ID found')\r\n          setHistory([])\r\n          return\r\n        }\r\n        \r\n        console.log('🎯 Fetching reward history for user:', user.id)\r\n        const data = await getRewardHistory(user.id)\r\n        console.log('📊 Reward history result:', data)\r\n        setHistory(data)\r\n      } catch {\r\n        console.error('❌ Error fetching reward history')\r\n        setHistory([])\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchHistory()\r\n  }, [])\r\n\r\n  if (loading) return <div className=\"p-4\">Loading history...</div>\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">🎖️ Claimed Rewards</h1>\r\n      <div className=\"space-y-4\">\r\n        {history.map((entry, i) => {\r\n          const reward = entry.rewards[0]; // Get the first reward from the array\r\n          if (!reward) return null; // Skip if no reward data\r\n          \r\n          return (\r\n            <div key={i} className=\"p-4 rounded shadow bg-white\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <div>\r\n                  <div className=\"font-semibold text-lg\">\r\n                    {reward.name}{' '}\r\n                    {reward.pro_only ? <ProBadge size=\"sm\" /> : null}\r\n                  </div>\r\n                  <div className=\"text-sm text-gray-600\">\r\n                    Claimed on {formatDate(entry.created_at)}\r\n                  </div>\r\n                </div>\r\n                <div className=\"text-right text-sm\">\r\n                  <div>🟡 {reward.xp_cost} XP</div>\r\n                  <div>🪙 {reward.coin_cost} Coins</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\rewards\\page.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":89,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":89,"endColumn":22,"suggestions":[{"fix":{"range":[2560,2599],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":90,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":90,"endColumn":22,"suggestions":[{"fix":{"range":[2611,2672],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":147,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":147,"endColumn":18,"suggestions":[{"fix":{"range":[4364,4418],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":175,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":175,"endColumn":18,"suggestions":[{"fix":{"range":[5161,5204],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useAuth, useUser } from '@clerk/nextjs';\r\nimport { useEffect, useState } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { getClaimedRewards } from '@/lib/supabase/rewards';\r\nimport { getRewards } from '@/lib/rewards';\r\nimport { canAccessFeature } from '@/lib/planFeatures';\r\nimport { ProBadge } from '@/components/ProBadge';\r\n\r\ninterface UserData {\r\n  email: string;\r\n  role: 'owner' | 'member';\r\n  plan: 'free' | 'pro' | 'pro_plus';\r\n  xp: number;\r\n  coins: number;\r\n  household: {\r\n    id: string;\r\n    plan: string;\r\n    game_mode: string;\r\n    created_at: string;\r\n  };\r\n}\r\n\r\ninterface Reward {\r\n  id: string;\r\n  title: string;\r\n  cost_xp: number;\r\n  cost_coins: number;\r\n  pro_only: boolean;\r\n  created_at: string;\r\n}\r\n\r\nexport default function RewardsPage() {\r\n  const { isSignedIn, isLoaded } = useAuth();\r\n  const { user } = useUser();\r\n  const router = useRouter();\r\n  \r\n  const [userData, setUserData] = useState<UserData | null>(null);\r\n  const [rewards, setRewards] = useState<Reward[]>([]);\r\n  const [claimedRewards, setClaimedRewards] = useState<string[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [claimingReward, setClaimingReward] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!isLoaded) return;\r\n\r\n    if (!isSignedIn) {\r\n      router.push('/sign-in');\r\n      return;\r\n    }\r\n\r\n    async function fetchData() {\r\n      if (!user?.id) return;\r\n\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        // Fetch user data with cache busting\r\n        const userResponse = await fetch('/api/user-data', {\r\n          headers: {\r\n            'Cache-Control': 'no-cache',\r\n            'Pragma': 'no-cache'\r\n          }\r\n        });\r\n        const userResult = await userResponse.json();\r\n\r\n        if (!userResponse.ok) {\r\n          console.error('Error fetching user data:', userResult.error);\r\n          setError(userResult.error || 'Failed to load user data');\r\n          return;\r\n        }\r\n\r\n        if (userResult.success && userResult.data) {\r\n          const userDataObj = {\r\n            email: userResult.data.email,\r\n            role: userResult.data.role,\r\n            plan: userResult.data.plan || 'free',\r\n            xp: userResult.data.xp || 0,\r\n            coins: userResult.data.coins || 0,\r\n            household: userResult.data.household\r\n          };\r\n          \r\n          setUserData(userDataObj);\r\n\r\n          // Debug: Log user ID and household ID\r\n          console.log(\"Your user ID:\", user?.id);\r\n          console.log(\"Your household ID:\", userDataObj.household?.id);\r\n\r\n          // Check if user can access rewards feature\r\n          if (!canAccessFeature(userDataObj.plan, 'xp_rewards')) {\r\n            router.push('/upgrade');\r\n            return;\r\n          }\r\n\r\n          // Fetch rewards and claimed rewards in parallel\r\n          const [rewardsData, claimedRewardsData] = await Promise.all([\r\n            getRewards(userDataObj.household.id),\r\n            getClaimedRewards(user.id)\r\n          ]);\r\n\r\n          setRewards(rewardsData);\r\n          setClaimedRewards(claimedRewardsData);\r\n        } else {\r\n          setError('User not found in database');\r\n        }\r\n      } catch (err) {\r\n        console.error('Exception fetching data:', err);\r\n        setError('An unexpected error occurred');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, [isLoaded, isSignedIn, user?.id, router]);\r\n\r\n  const handleClaimReward = async (rewardId: string) => {\r\n    if (!user?.id) return;\r\n\r\n    try {\r\n      setClaimingReward(rewardId);\r\n      \r\n      // Send POST request to /api/claim-reward\r\n      const response = await fetch('/api/claim-reward', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ rewardId }),\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (!response.ok) {\r\n        console.error('Error claiming reward:', result.error);\r\n        setError(result.error || 'Failed to claim reward');\r\n        return;\r\n      }\r\n\r\n      // Success - refresh claimed rewards\r\n      const updatedClaimedRewards = await getClaimedRewards(user.id);\r\n      setClaimedRewards(updatedClaimedRewards);\r\n      \r\n      console.log('✅ Reward claimed successfully:', result);\r\n    } catch (err) {\r\n      console.error('Error claiming reward:', err);\r\n      setError('Failed to claim reward');\r\n    } finally {\r\n      setClaimingReward(null);\r\n    }\r\n  };\r\n\r\n  const isRewardClaimed = (rewardId: string) => {\r\n    return claimedRewards.includes(rewardId);\r\n  };\r\n\r\n  const canAffordReward = (reward: Reward) => {\r\n    if (!userData) return false;\r\n    return userData.xp >= reward.cost_xp && userData.coins >= reward.cost_coins;\r\n  };\r\n\r\n  const handleSyncUser = async () => {\r\n    try {\r\n      const response = await fetch('/api/sync-user', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n      \r\n      const result = await response.json();\r\n      console.log('Sync user response:', result);\r\n    } catch (error) {\r\n      console.error('Error syncing user:', error);\r\n    }\r\n  };\r\n\r\n  // Show loading spinner while auth is loading or data is being fetched\r\n  if (!isLoaded || loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\" />\r\n          <p className=\"text-gray-600\">Loading...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // This should not be reached if redirect is working, but just in case\r\n  if (!isSignedIn) {\r\n    return null;\r\n  }\r\n\r\n  // Show error state\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"bg-white shadow rounded-lg p-6 max-w-md w-full mx-4\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-red-500 text-6xl mb-4\">⚠️</div>\r\n            <h1 className=\"text-xl font-semibold text-gray-900 mb-2\">Error</h1>\r\n            <p className=\"text-gray-600 mb-4\">{error}</p>\r\n            <button \r\n              onClick={() => {\r\n          if (typeof window !== 'undefined') {\r\n            window.location.reload();\r\n          }\r\n        }}\r\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700\"\r\n            >\r\n              Try Again\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n                 <div className=\"mb-8\">\r\n           <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">🎁 Reward Store</h1>\r\n           {userData ? <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\r\n               <span>XP: {userData.xp}</span>\r\n               <span>Coins: {userData.coins}</span>\r\n             </div> : null}\r\n           \r\n           {/* Temporary debug button */}\r\n           <div className=\"mt-4\">\r\n             <button\r\n               onClick={handleSyncUser}\r\n               className=\"bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600 transition-colors\"\r\n             >\r\n               🔄 Sync User (Debug)\r\n             </button>\r\n           </div>\r\n         </div>\r\n\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\r\n          {rewards.map((reward) => {\r\n            const isClaimed = isRewardClaimed(reward.id);\r\n            const canAfford = canAffordReward(reward);\r\n            const isClaiming = claimingReward === reward.id;\r\n\r\n            return (\r\n              <div key={reward.id} className=\"bg-white rounded-lg shadow-md overflow-hidden relative\">\r\n                {reward.pro_only ? <div className=\"absolute top-2 right-2 z-10\">\r\n                    <ProBadge size=\"sm\" />\r\n                  </div> : null}\r\n                \r\n                <div className=\"p-6\">\r\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\r\n                    {reward.title}\r\n                  </h3>\r\n                  \r\n                  <div className=\"space-y-2 mb-4\">\r\n                    {reward.cost_xp > 0 && (\r\n                      <div className=\"flex items-center text-sm text-gray-600\">\r\n                        <span className=\"mr-2\">🟡</span>\r\n                        <span>{reward.cost_xp} XP</span>\r\n                      </div>\r\n                    )}\r\n                    {reward.cost_coins > 0 && (\r\n                      <div className=\"flex items-center text-sm text-gray-600\">\r\n                        <span className=\"mr-2\">🪙</span>\r\n                        <span>{reward.cost_coins} Coins</span>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  <button\r\n                    onClick={() => handleClaimReward(reward.id)}\r\n                    disabled={isClaimed || !canAfford || isClaiming}\r\n                    className={`w-full py-2 px-4 rounded-md font-medium transition-colors ${\r\n                      isClaimed\r\n                        ? 'bg-gray-100 text-gray-500 cursor-not-allowed'\r\n                        : !canAfford\r\n                        ? 'bg-red-100 text-red-600 cursor-not-allowed'\r\n                        : isClaiming\r\n                        ? 'bg-blue-100 text-blue-600 cursor-not-allowed'\r\n                        : 'bg-blue-600 text-white hover:bg-blue-700'\r\n                    }`}\r\n                  >\r\n                    {isClaiming ? (\r\n                      <div className=\"flex items-center justify-center\">\r\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2\" />\r\n                        Claiming...\r\n                      </div>\r\n                    ) : isClaimed ? (\r\n                      'Claimed'\r\n                    ) : !canAfford ? (\r\n                      'Insufficient Resources'\r\n                    ) : (\r\n                      'Claim Reward'\r\n                    )}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        {rewards.length === 0 && !loading && (\r\n          <div className=\"text-center py-12\">\r\n            <div className=\"text-gray-400 text-6xl mb-4\">🎁</div>\r\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No rewards available</h3>\r\n            <p className=\"text-gray-600\">Check back later for new rewards!</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\security\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\sentry-example-page\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\settings\\plan\\page.tsx","messages":[{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":136,"column":9,"nodeType":"CallExpression","messageId":"unexpected","endLine":136,"endColumn":66},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":140,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":140,"endColumn":52},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":219,"column":36,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6864,6935],"text":"\r\n              Manage your household&apos;s subscription plan\r\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6864,6935],"text":"\r\n              Manage your household&lsquo;s subscription plan\r\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6864,6935],"text":"\r\n              Manage your household&#39;s subscription plan\r\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6864,6935],"text":"\r\n              Manage your household&rsquo;s subscription plan\r\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useAuth, useUser } from '@clerk/nextjs';\r\nimport { useEffect, useState } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\n\r\n\r\ninterface UserData {\r\n  email: string;\r\n  role: 'owner' | 'member';\r\n  plan: 'free' | 'pro' | 'pro_plus';\r\n}\r\n\r\nexport default function PlanSettingsPage() {\r\n  const { isSignedIn, isLoaded } = useAuth();\r\n  const { user } = useUser();\r\n  const router = useRouter();\r\n  \r\n  const [userData, setUserData] = useState<UserData | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [updating, setUpdating] = useState(false);\r\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\r\n  const [billingLoading, setBillingLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!isLoaded) return;\r\n\r\n    if (!isSignedIn) {\r\n      router.push('/sign-in');\r\n      return;\r\n    }\r\n\r\n    async function fetchUserData() {\r\n      if (!user?.id) return;\r\n\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        const response = await fetch('/api/user-data');\r\n        const result = await response.json();\r\n\r\n        if (!response.ok) {\r\n          console.error('Error fetching user data:', result.error);\r\n          setError(result.error || 'Failed to load user data');\r\n          return;\r\n        }\r\n\r\n        if (result.success && result.data) {\r\n          setUserData({\r\n            email: result.data.email,\r\n            role: result.data.role,\r\n            plan: result.data.plan || 'free'\r\n          });\r\n        } else {\r\n          setError('User not found in database');\r\n        }\r\n      } catch (err) {\r\n        console.error('Exception fetching user data:', err);\r\n        setError('An unexpected error occurred');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchUserData();\r\n  }, [isLoaded, isSignedIn, user?.id, router]);\r\n\r\n  const handlePlanToggle = async () => {\r\n    if (!userData || userData.role !== 'owner') return;\r\n\r\n    // Cycle through plans: free -> pro -> pro_plus -> free\r\n    let newPlan: 'free' | 'pro' | 'pro_plus';\r\n    if (userData.plan === 'free') {\r\n      newPlan = 'pro';\r\n    } else if (userData.plan === 'pro') {\r\n      newPlan = 'pro_plus';\r\n    } else {\r\n      newPlan = 'free';\r\n    }\r\n    \r\n    try {\r\n      setUpdating(true);\r\n      setError(null);\r\n      setSuccessMessage(null);\r\n\r\n      const response = await fetch('/api/update-plan', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ plan: newPlan }),\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (!response.ok) {\r\n        console.error('Error updating plan:', result.error);\r\n        setError(result.error || 'Failed to update plan');\r\n        return;\r\n      }\r\n\r\n      if (result.success) {\r\n        setUserData(prev => prev ? { ...prev, plan: newPlan } : null);\r\n        const planDisplayName = newPlan === 'pro_plus' ? 'Pro+' : newPlan === 'pro' ? 'Pro' : 'Free';\r\n        setSuccessMessage(`Plan successfully updated to ${planDisplayName}!`);\r\n      }\r\n    } catch (err) {\r\n      console.error('Exception updating plan:', err);\r\n      setError('An unexpected error occurred while updating plan');\r\n    } finally {\r\n      setUpdating(false);\r\n    }\r\n  };\r\n\r\n  const handleBillingPortal = async () => {\r\n    if (!userData) return;\r\n\r\n    setBillingLoading(true);\r\n    \r\n    try {\r\n      const response = await fetch('/api/stripe/create-portal-session', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.success && data.url) {\r\n        window.location.href = data.url;\r\n      } else {\r\n        console.error('Failed to create portal session:', data.error);\r\n        alert('Failed to open billing portal. Please try again.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error opening billing portal:', error);\r\n      alert('An error occurred. Please try again.');\r\n    } finally {\r\n      setBillingLoading(false);\r\n    }\r\n  };\r\n\r\n  // Show loading spinner while auth is loading or data is being fetched\r\n  if (!isLoaded || loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\" />\r\n          <p className=\"text-gray-600\">Loading...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // This should not be reached if redirect is working, but just in case\r\n  if (!isSignedIn) {\r\n    return null;\r\n  }\r\n\r\n  // Check if user is owner\r\n  if (userData && userData.role !== 'owner') {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"bg-white shadow rounded-lg p-6 max-w-md w-full mx-4\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-red-500 text-6xl mb-4\">🚫</div>\r\n            <h1 className=\"text-xl font-semibold text-gray-900 mb-2\">Access Denied</h1>\r\n            <p className=\"text-gray-600 mb-4\">Only household owners can manage plan settings.</p>\r\n            <button \r\n              onClick={() => router.push('/dashboard')}\r\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700\"\r\n            >\r\n              Back to Dashboard\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Show error state\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"bg-white shadow rounded-lg p-6 max-w-md w-full mx-4\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-red-500 text-6xl mb-4\">⚠️</div>\r\n            <h1 className=\"text-xl font-semibold text-gray-900 mb-2\">Error</h1>\r\n            <p className=\"text-gray-600 mb-4\">{error}</p>\r\n            <button \r\n              onClick={() => {\r\n          if (typeof window !== 'undefined') {\r\n            window.location.reload();\r\n          }\r\n        }}\r\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700\"\r\n            >\r\n              Try Again\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Show plan settings content\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\r\n      <div className=\"max-w-4xl mx-auto\">\r\n        <div className=\"bg-white shadow rounded-lg p-6\">\r\n          <div className=\"text-center mb-8\">\r\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\r\n              Plan Settings\r\n            </h1>\r\n            <p className=\"text-gray-600\">\r\n              Manage your household's subscription plan\r\n            </p>\r\n          </div>\r\n\r\n          {successMessage ? <div className=\"mb-6 bg-green-50 border border-green-200 rounded-md p-4\">\r\n              <div className=\"flex\">\r\n                <div className=\"flex-shrink-0\">\r\n                  <div className=\"text-green-400\">✓</div>\r\n                </div>\r\n                <div className=\"ml-3\">\r\n                  <p className=\"text-sm text-green-800\">{successMessage}</p>\r\n                </div>\r\n              </div>\r\n            </div> : null}\r\n\r\n          <div className=\"grid md:grid-cols-2 gap-8\">\r\n            {/* Current Plan Section */}\r\n            <div className=\"bg-gray-50 rounded-lg p-6\">\r\n              <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Current Plan</h2>\r\n              <div className=\"space-y-4\">\r\n                <div>\r\n                  <p className=\"text-sm text-gray-600 mb-2\">Your current plan is:</p>\r\n                  <div className=\"flex items-center\">\r\n                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${\r\n                      userData?.plan === 'pro_plus' \r\n                        ? 'bg-purple-100 text-purple-800' \r\n                        : userData?.plan === 'pro'\r\n                        ? 'bg-blue-100 text-blue-800'\r\n                        : 'bg-gray-100 text-gray-800'\r\n                    }`}>\r\n                      {userData?.plan === 'pro_plus' ? '⭐ Pro+' : userData?.plan === 'pro' ? '⭐ Pro' : '🆓 Free'}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"pt-4 space-y-3\">\r\n                  {userData?.plan !== 'free' && (\r\n                    <button\r\n                      onClick={handleBillingPortal}\r\n                      disabled={billingLoading}\r\n                      className={`w-full px-4 py-2 rounded-md font-medium transition-colors ${\r\n                        billingLoading\r\n                          ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n                          : 'bg-green-600 text-white hover:bg-green-700'\r\n                      }`}\r\n                    >\r\n                      {billingLoading ? 'Loading...' : 'Manage Billing'}\r\n                    </button>\r\n                  )}\r\n                  \r\n                  <button\r\n                    onClick={handlePlanToggle}\r\n                    disabled={updating}\r\n                    className={`w-full px-4 py-2 rounded-md font-medium transition-colors ${\r\n                      updating\r\n                        ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n                        : 'bg-blue-600 text-white hover:bg-blue-700'\r\n                    }`}\r\n                  >\r\n                    {updating ? 'Updating...' : `Switch to ${userData?.plan === 'free' ? 'Pro' : userData?.plan === 'pro' ? 'Pro+' : 'Free'}`}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Plan Comparison */}\r\n            <div className=\"bg-gray-50 rounded-lg p-6\">\r\n              <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Plan Features</h2>\r\n              <div className=\"space-y-6\">\r\n                <div>\r\n                  <h3 className=\"font-medium text-gray-900 mb-2\">Free Plan</h3>\r\n                  <ul className=\"text-sm text-gray-600 space-y-1\">\r\n                    <li className=\"flex items-center\">\r\n                      <span className=\"text-green-500 mr-2\">✓</span>\r\n                      Shopping List\r\n                    </li>\r\n                    <li className=\"flex items-center\">\r\n                      <span className=\"text-green-500 mr-2\">✓</span>\r\n                      Calendar & Events\r\n                    </li>\r\n                    <li className=\"flex items-center\">\r\n                      <span className=\"text-green-500 mr-2\">✓</span>\r\n                      Chores\r\n                    </li>\r\n                    <li className=\"flex items-center\">\r\n                      <span className=\"text-green-500 mr-2\">✓</span>\r\n                      Basic Reminders\r\n                    </li>\r\n                    <li className=\"flex items-center\">\r\n                      <span className=\"text-red-500 mr-2\">✗</span>\r\n                      Finance Tracking\r\n                    </li>\r\n                    <li className=\"flex items-center\">\r\n                      <span className=\"text-red-500 mr-2\">✗</span>\r\n                      Advanced Analytics\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n\r\n                <div>\r\n                  <h3 className=\"font-medium text-gray-900 mb-2\">Pro Plan</h3>\r\n                  <ul className=\"text-sm text-gray-600 space-y-1\">\r\n                    <li className=\"flex items-center\">\r\n                      <span className=\"text-green-500 mr-2\">✓</span>\r\n                      Everything in Free\r\n                    </li>\r\n                    <li className=\"flex items-center\">\r\n                      <span className=\"text-green-500 mr-2\">✓</span>\r\n                      Finance Tracking\r\n                    </li>\r\n                    <li className=\"flex items-center\">\r\n                      <span className=\"text-green-500 mr-2\">✓</span>\r\n                      Advanced Analytics\r\n                    </li>\r\n                    <li className=\"flex items-center\">\r\n                      <span className=\"text-green-500 mr-2\">✓</span>\r\n                      AI Features\r\n                    </li>\r\n                    <li className=\"flex items-center\">\r\n                      <span className=\"text-green-500 mr-2\">✓</span>\r\n                      Google Calendar Read\r\n                    </li>\r\n                    <li className=\"flex items-center\">\r\n                      <span className=\"text-red-500 mr-2\">✗</span>\r\n                      Multi-household\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n\r\n                <div>\r\n                  <h3 className=\"font-medium text-gray-900 mb-2\">Pro+ Plan</h3>\r\n                  <ul className=\"text-sm text-gray-600 space-y-1\">\r\n                    <li className=\"flex items-center\">\r\n                      <span className=\"text-green-500 mr-2\">✓</span>\r\n                      Everything in Pro\r\n                    </li>\r\n                    <li className=\"flex items-center\">\r\n                      <span className=\"text-green-500 mr-2\">✓</span>\r\n                      Two-way Google Calendar Sync\r\n                    </li>\r\n                    <li className=\"flex items-center\">\r\n                      <span className=\"text-green-500 mr-2\">✓</span>\r\n                      Multi-household (up to 3)\r\n                    </li>\r\n                    <li className=\"flex items-center\">\r\n                      <span className=\"text-green-500 mr-2\">✓</span>\r\n                      Admin Tools\r\n                    </li>\r\n                    <li className=\"flex items-center\">\r\n                      <span className=\"text-green-500 mr-2\">✓</span>\r\n                      Unlimited Automations\r\n                    </li>\r\n                    <li className=\"flex items-center\">\r\n                      <span className=\"text-green-500 mr-2\">✓</span>\r\n                      Priority Support\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"mt-8 text-center\">\r\n            <button \r\n              onClick={() => router.push('/dashboard')}\r\n              className=\"bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700\"\r\n            >\r\n              Back to Dashboard\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\shopping-lists\\[id]\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Brain' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Sparkles' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is assigned a value but never used.","line":55,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchListDetails'. Either include it or remove the dependency array.","line":85,"column":6,"nodeType":"ArrayExpression","endLine":85,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [fetchListDetails, listId]","fix":{"range":[2282,2290],"text":"[fetchListDetails, listId]"}}]},{"ruleId":"no-alert","severity":1,"message":"Unexpected confirm.","line":188,"column":10,"nodeType":"CallExpression","messageId":"unexpected","endLine":188,"endColumn":63},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":288,"column":34,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9478,9586],"text":"\r\n            The shopping list you&apos;re looking for doesn't exist or you don't have access to it.\r\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9478,9586],"text":"\r\n            The shopping list you&lsquo;re looking for doesn't exist or you don't have access to it.\r\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9478,9586],"text":"\r\n            The shopping list you&#39;re looking for doesn't exist or you don't have access to it.\r\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9478,9586],"text":"\r\n            The shopping list you&rsquo;re looking for doesn't exist or you don't have access to it.\r\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":288,"column":55,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9478,9586],"text":"\r\n            The shopping list you're looking for doesn&apos;t exist or you don't have access to it.\r\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9478,9586],"text":"\r\n            The shopping list you're looking for doesn&lsquo;t exist or you don't have access to it.\r\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9478,9586],"text":"\r\n            The shopping list you're looking for doesn&#39;t exist or you don't have access to it.\r\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9478,9586],"text":"\r\n            The shopping list you're looking for doesn&rsquo;t exist or you don't have access to it.\r\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":288,"column":74,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9478,9586],"text":"\r\n            The shopping list you're looking for doesn't exist or you don&apos;t have access to it.\r\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9478,9586],"text":"\r\n            The shopping list you're looking for doesn't exist or you don&lsquo;t have access to it.\r\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9478,9586],"text":"\r\n            The shopping list you're looking for doesn't exist or you don&#39;t have access to it.\r\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9478,9586],"text":"\r\n            The shopping list you're looking for doesn't exist or you don&rsquo;t have access to it.\r\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":315,"column":18,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":317,"endColumn":18,"fix":{"range":[10483,10599],"text":"list.description ? <p className=\"text-gray-600 mt-2\">{list.description}</p> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":388,"column":24,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":388,"endColumn":80,"fix":{"range":[13451,13507],"text":"item.is_completed ? <CheckCircle className=\"h-4 w-4\" /> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":405,"column":24,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":407,"endColumn":24,"fix":{"range":[14319,14438],"text":"item.notes ? <p className=\"text-sm text-gray-600\">{item.notes}</p> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":443,"column":10,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":542,"endColumn":10,"fix":{"range":[15823,19944],"text":"showAddItemModal ? <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n            <div className=\"bg-white rounded-lg p-6 w-full max-w-md mx-4\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <h2 className=\"text-xl font-semibold\">Add New Item</h2>\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={() => setShowAddItemModal(false)}\r\n                  className=\"h-8 w-8 p-0\"\r\n                >\r\n                  <X className=\"h-4 w-4\" />\r\n                </Button>\r\n              </div>\r\n              \r\n              <form onSubmit={handleAddItem} className=\"space-y-4\">\r\n                <div>\r\n                  <Label htmlFor=\"item-name\">Item Name *</Label>\r\n                  <Input\r\n                    id=\"item-name\"\r\n                    value={newItem.name}\r\n                    onChange={(e) => setNewItem(prev => ({ ...prev, name: e.target.value }))}\r\n                    placeholder=\"e.g., Milk\"\r\n                    className=\"mt-1\"\r\n                    required\r\n                  />\r\n                </div>\r\n                \r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <Label htmlFor=\"quantity\">Quantity</Label>\r\n                    <Input\r\n                      id=\"quantity\"\r\n                      type=\"number\"\r\n                      min=\"1\"\r\n                      value={newItem.quantity}\r\n                      onChange={(e) => setNewItem(prev => ({ ...prev, quantity: parseInt(e.target.value) || 1 }))}\r\n                      className=\"mt-1\"\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <Label htmlFor=\"unit\">Unit</Label>\r\n                    <Input\r\n                      id=\"unit\"\r\n                      value={newItem.unit}\r\n                      onChange={(e) => setNewItem(prev => ({ ...prev, unit: e.target.value }))}\r\n                      placeholder=\"e.g., liters\"\r\n                      className=\"mt-1\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                \r\n                <div>\r\n                  <Label htmlFor=\"category\">Category</Label>\r\n                  <select\r\n                    id=\"category\"\r\n                    value={newItem.category}\r\n                    onChange={(e) => setNewItem(prev => ({ ...prev, category: e.target.value }))}\r\n                    className=\"w-full mt-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                  >\r\n                    {categories.map((category) => (\r\n                      <option key={category} value={category}>\r\n                        {category.charAt(0).toUpperCase() + category.slice(1)}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n                \r\n                <div>\r\n                  <Label htmlFor=\"notes\">Notes (optional)</Label>\r\n                  <Textarea\r\n                    id=\"notes\"\r\n                    value={newItem.notes}\r\n                    onChange={(e) => setNewItem(prev => ({ ...prev, notes: e.target.value }))}\r\n                    placeholder=\"Any additional notes...\"\r\n                    className=\"mt-1\"\r\n                    rows={2}\r\n                  />\r\n                </div>\r\n                \r\n                <div className=\"flex gap-3 pt-2\">\r\n                  <Button\r\n                    type=\"submit\"\r\n                    disabled={!newItem.name.trim()}\r\n                    className=\"flex-1\"\r\n                  >\r\n                    Add Item\r\n                  </Button>\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"outline\"\r\n                    onClick={() => setShowAddItemModal(false)}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":545,"column":10,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":604,"endColumn":10,"fix":{"range":[19991,22400],"text":"showEditListModal ? <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n            <div className=\"bg-white rounded-lg p-6 w-full max-w-md mx-4\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <h2 className=\"text-xl font-semibold\">Edit List</h2>\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={() => setShowEditListModal(false)}\r\n                  className=\"h-8 w-8 p-0\"\r\n                >\r\n                  <X className=\"h-4 w-4\" />\r\n                </Button>\r\n              </div>\r\n              \r\n              <form onSubmit={handleEditList} className=\"space-y-4\">\r\n                <div>\r\n                  <Label htmlFor=\"list-name\">List Name *</Label>\r\n                  <Input\r\n                    id=\"list-name\"\r\n                    value={editListData.name}\r\n                    onChange={(e) => setEditListData(prev => ({ ...prev, name: e.target.value }))}\r\n                    placeholder=\"e.g., Groceries for this week\"\r\n                    className=\"mt-1\"\r\n                    required\r\n                  />\r\n                </div>\r\n                \r\n                <div>\r\n                  <Label htmlFor=\"list-description\">Description</Label>\r\n                  <Textarea\r\n                    id=\"list-description\"\r\n                    value={editListData.description}\r\n                    onChange={(e) => setEditListData(prev => ({ ...prev, description: e.target.value }))}\r\n                    placeholder=\"e.g., Weekly grocery shopping for family of 4\"\r\n                    className=\"mt-1\"\r\n                    rows={3}\r\n                  />\r\n                </div>\r\n                \r\n                <div className=\"flex gap-3 pt-2\">\r\n                  <Button\r\n                    type=\"submit\"\r\n                    disabled={!editListData.name.trim()}\r\n                    className=\"flex-1\"\r\n                  >\r\n                    Update List\r\n                  </Button>\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"outline\"\r\n                    onClick={() => setShowEditListModal(false)}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div> : null"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":5,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useAuth } from '@clerk/nextjs';\r\nimport { useRouter, useParams } from 'next/navigation';\r\nimport { toast } from 'sonner';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { \r\n  ArrowLeft, \r\n  Plus, \r\n  ShoppingCart, \r\n  Brain, \r\n  CheckCircle, \r\n  Clock,\r\n  Edit,\r\n  Trash2,\r\n  X,\r\n  Sparkles\r\n} from 'lucide-react';\r\nimport { fetchWithCSRF } from '@/lib/csrf-client';\r\n\r\ninterface ShoppingItem {\r\n  id: string;\r\n  name: string;\r\n  quantity: number;\r\n  unit: string;\r\n  category: string;\r\n  is_completed: boolean;\r\n  notes?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\ninterface ShoppingList {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  household_id: string;\r\n  created_by: string;\r\n  created_at: string;\r\n  is_completed: boolean;\r\n  total_items: number;\r\n  completed_items: number;\r\n  ai_suggestions_count: number;\r\n  ai_confidence: number;\r\n}\r\n\r\nexport default function ShoppingListDetailPage() {\r\n  const { userId } = useAuth();\r\n  const router = useRouter();\r\n  const params = useParams();\r\n  const listId = params.id as string;\r\n  \r\n  const [list, setList] = useState<ShoppingList | null>(null);\r\n  const [items, setItems] = useState<ShoppingItem[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [showAddItemModal, setShowAddItemModal] = useState(false);\r\n  const [showEditListModal, setShowEditListModal] = useState(false);\r\n  const [newItem, setNewItem] = useState({\r\n    name: '',\r\n    quantity: 1,\r\n    unit: '',\r\n    category: 'general',\r\n    notes: ''\r\n  });\r\n  const [editListData, setEditListData] = useState({\r\n    name: '',\r\n    description: ''\r\n  });\r\n\r\n  const categories = [\r\n    'general', 'produce', 'dairy', 'meat', 'pantry', 'frozen', 'bakery', 'beverages', 'snacks', 'health', 'household'\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (listId) {\r\n      fetchListDetails();\r\n    }\r\n  }, [listId]);\r\n\r\n  const fetchListDetails = async () => {\r\n    try {\r\n      // Fetch list details\r\n      const listResponse = await fetch(`/api/shopping-lists/${listId}`);\r\n      if (listResponse.ok) {\r\n        const listData = await listResponse.json();\r\n        // Handle the correct API response structure\r\n        const list = listData.data?.list || listData.list;\r\n        if (list) {\r\n          setList(list);\r\n          setEditListData({\r\n            name: list.name || list.title, // Handle both 'name' and 'title' fields\r\n            description: list.description || ''\r\n          });\r\n        } else {\r\n          console.error('List not found in response:', listData);\r\n          setError('List not found');\r\n        }\r\n      } else {\r\n        setError('Failed to load shopping list');\r\n      }\r\n\r\n      // Fetch items\r\n      const itemsResponse = await fetch(`/api/shopping-lists/${listId}/items`);\r\n      if (itemsResponse.ok) {\r\n        const itemsData = await itemsResponse.json();\r\n        setItems(itemsData.items || []);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching list details:', error);\r\n      toast.error('Failed to load shopping list');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAddItem = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!newItem.name.trim()) return;\r\n\r\n    try {\r\n      const response = await fetch(`/api/shopping-lists/${listId}/items`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(newItem),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        if (result.success) {\r\n          toast.success('Item added successfully!');\r\n          setItems(prev => [...prev, result.item]);\r\n          setNewItem({ name: '', quantity: 1, unit: '', category: 'general', notes: '' });\r\n          setShowAddItemModal(false);\r\n          fetchListDetails(); // Refresh list stats\r\n        } else {\r\n          toast.error(`Failed to add item: ${result.error || 'Unknown error'}`);\r\n        }\r\n      } else {\r\n        const error = await response.json();\r\n        toast.error(`Failed to add item: ${error.error || error.message || 'Unknown error'}`);\r\n      }\r\n    } catch (error) {\r\n      toast.error('Failed to add item. Please try again.');\r\n      console.error('Error adding item:', error);\r\n    }\r\n  };\r\n\r\n  const handleToggleItem = async (itemId: string, isCompleted: boolean) => {\r\n    try {\r\n      const response = await fetch(`/api/shopping-items/toggle`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ itemId, isCompleted }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        if (result.success) {\r\n          setItems(prev => prev.map(item => \r\n            item.id === itemId ? { ...item, is_completed: isCompleted } : item\r\n          ));\r\n          fetchListDetails(); // Refresh list stats\r\n        } else {\r\n          toast.error(`Failed to update item: ${result.error || 'Unknown error'}`);\r\n        }\r\n      } else {\r\n        const error = await response.json();\r\n        toast.error(`Failed to update item: ${error.error || error.message || 'Unknown error'}`);\r\n      }\r\n    } catch (error) {\r\n      toast.error('Failed to update item. Please try again.');\r\n      console.error('Error updating item:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteItem = async (itemId: string) => {\r\n    if (!confirm('Are you sure you want to delete this item?')) return;\r\n\r\n    try {\r\n      const response = await fetchWithCSRF(`/api/shopping-lists/${listId}/items/${itemId}`, {\r\n        method: 'DELETE',\r\n        credentials: 'include'\r\n      });\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        if (result.success) {\r\n          toast.success('Item deleted successfully!');\r\n          setItems(prev => prev.filter(item => item.id !== itemId));\r\n          fetchListDetails(); // Refresh list stats\r\n        } else {\r\n          toast.error(`Failed to delete item: ${result.error || 'Unknown error'}`);\r\n        }\r\n      } else {\r\n        const error = await response.json();\r\n        toast.error(`Failed to delete item: ${error.error || error.message || 'Unknown error'}`);\r\n      }\r\n    } catch (error) {\r\n      toast.error('Failed to delete item. Please try again.');\r\n      console.error('Error deleting item:', error);\r\n    }\r\n  };\r\n\r\n  const handleEditList = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!editListData.name.trim()) return;\r\n\r\n    try {\r\n      const response = await fetch(`/api/shopping-lists/${listId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(editListData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        if (result.success) {\r\n          toast.success('List updated successfully!');\r\n          setList(prev => prev ? { ...prev, ...editListData } : null);\r\n          setShowEditListModal(false);\r\n        } else {\r\n          toast.error(`Failed to update list: ${result.error || 'Unknown error'}`);\r\n        }\r\n      } else {\r\n        const error = await response.json();\r\n        toast.error(`Failed to update list: ${error.error || error.message || 'Unknown error'}`);\r\n      }\r\n    } catch (error) {\r\n      toast.error('Failed to update list. Please try again.');\r\n      console.error('Error updating list:', error);\r\n    }\r\n  };\r\n\r\n  const getCompletionPercentage = () => {\r\n    if (items.length === 0) return 0;\r\n    const completed = items.filter(item => item.is_completed).length;\r\n    return Math.round((completed / items.length) * 100);\r\n  };\r\n\r\n  const getCategoryColor = (category: string) => {\r\n    const colors: Record<string, string> = {\r\n      produce: 'bg-green-100 text-green-800',\r\n      dairy: 'bg-blue-100 text-blue-800',\r\n      meat: 'bg-red-100 text-red-800',\r\n      pantry: 'bg-yellow-100 text-yellow-800',\r\n      frozen: 'bg-purple-100 text-purple-800',\r\n      bakery: 'bg-orange-100 text-orange-800',\r\n      beverages: 'bg-cyan-100 text-cyan-800',\r\n      snacks: 'bg-pink-100 text-pink-800',\r\n      health: 'bg-indigo-100 text-indigo-800',\r\n      household: 'bg-gray-100 text-gray-800',\r\n      general: 'bg-gray-100 text-gray-800'\r\n    };\r\n    return colors[category] || colors.general;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-center\">\r\n          <ShoppingCart className=\"h-12 w-12 animate-pulse mx-auto mb-4 text-blue-500\" />\r\n          <p className=\"text-lg text-gray-600\">Loading shopping list...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!list) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-center\">\r\n          <ShoppingCart className=\"h-16 w-16 mx-auto mb-6 text-red-500\" />\r\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">List Not Found</h2>\r\n          <p className=\"text-gray-600 mb-6\">\r\n            The shopping list you're looking for doesn't exist or you don't have access to it.\r\n          </p>\r\n          <Button onClick={() => router.push('/shopping-lists')}>\r\n            Back to Shopping Lists\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-8 px-4 sm:px-6 lg:px-8\">\r\n      <div className=\"max-w-4xl mx-auto\">\r\n        {/* Header */}\r\n        <div className=\"mb-8\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-4\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={() => router.push('/shopping-lists')}\r\n                className=\"flex items-center gap-2\"\r\n              >\r\n                <ArrowLeft className=\"h-4 w-4\" />\r\n                Back to Lists\r\n              </Button>\r\n              <div>\r\n                <h1 className=\"text-3xl font-bold text-gray-900\">{list.name}</h1>\r\n                {list.description && (\r\n                  <p className=\"text-gray-600 mt-2\">{list.description}</p>\r\n                )}\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-center gap-3\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={() => setShowEditListModal(true)}\r\n                className=\"flex items-center gap-2\"\r\n              >\r\n                <Edit className=\"h-4 w-4\" />\r\n                Edit List\r\n              </Button>\r\n              <Button\r\n                onClick={() => setShowAddItemModal(true)}\r\n                className=\"bg-blue-600 hover:bg-blue-700 flex items-center gap-2\"\r\n              >\r\n                <Plus className=\"h-4 w-4\" />\r\n                Add Item\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Progress Card */}\r\n        <Card className=\"mb-8\">\r\n          <CardContent className=\"pt-6\">\r\n            <div className=\"flex items-center justify-between mb-4\">\r\n              <div>\r\n                <h3 className=\"text-lg font-medium\">Progress</h3>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  {items.filter(item => item.is_completed).length} of {items.length} items completed\r\n                </p>\r\n              </div>\r\n              <div className=\"text-right\">\r\n                <div className=\"text-2xl font-bold text-blue-600\">{getCompletionPercentage()}%</div>\r\n                <div className=\"text-sm text-gray-500\">Complete</div>\r\n              </div>\r\n            </div>\r\n            <Progress value={getCompletionPercentage()} className=\"h-2\" />\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Items List */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <ShoppingCart className=\"h-5 w-5\" />\r\n              Items ({items.length})\r\n            </CardTitle>\r\n            <CardDescription>\r\n              Manage your shopping list items\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            {items.length > 0 ? (\r\n              <div className=\"space-y-3\">\r\n                {items.map((item) => (\r\n                  <div\r\n                    key={item.id}\r\n                    className={`flex items-center gap-4 p-4 border rounded-lg ${\r\n                      item.is_completed ? 'bg-green-50 border-green-200' : 'bg-white border-gray-200'\r\n                    }`}\r\n                  >\r\n                    <button\r\n                      onClick={() => handleToggleItem(item.id, !item.is_completed)}\r\n                      className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${\r\n                        item.is_completed\r\n                          ? 'bg-green-500 border-green-500 text-white'\r\n                          : 'border-gray-300 hover:border-green-500'\r\n                      }`}\r\n                    >\r\n                      {item.is_completed && <CheckCircle className=\"h-4 w-4\" />}\r\n                    </button>\r\n                    \r\n                    <div className=\"flex-1\">\r\n                      <div className=\"flex items-center gap-3 mb-1\">\r\n                        <h4 className={`font-medium ${item.is_completed ? 'line-through text-gray-500' : 'text-gray-900'}`}>\r\n                          {item.name}\r\n                        </h4>\r\n                        <Badge className={getCategoryColor(item.category)}>\r\n                          {item.category}\r\n                        </Badge>\r\n                        {item.quantity > 1 && (\r\n                          <span className=\"text-sm text-gray-600\">\r\n                            {item.quantity} {item.unit}\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                      {item.notes && (\r\n                        <p className=\"text-sm text-gray-600\">{item.notes}</p>\r\n                      )}\r\n                    </div>\r\n                    \r\n                    <div className=\"flex items-center gap-2\">\r\n                      <Button\r\n                        variant=\"ghost\"\r\n                        size=\"sm\"\r\n                        onClick={() => handleDeleteItem(item.id)}\r\n                        className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\r\n                      >\r\n                        <Trash2 className=\"h-4 w-4\" />\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            ) : (\r\n              <div className=\"text-center py-12\">\r\n                <ShoppingCart className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\r\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No items yet</h3>\r\n                <p className=\"text-gray-500 mb-6\">\r\n                  Add your first item to get started with this shopping list\r\n                </p>\r\n                <Button\r\n                  onClick={() => setShowAddItemModal(true)}\r\n                  className=\"bg-blue-600 hover:bg-blue-700\"\r\n                >\r\n                  <Plus className=\"h-4 w-4 mr-2\" />\r\n                  Add First Item\r\n                </Button>\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Add Item Modal */}\r\n        {showAddItemModal && (\r\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n            <div className=\"bg-white rounded-lg p-6 w-full max-w-md mx-4\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <h2 className=\"text-xl font-semibold\">Add New Item</h2>\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={() => setShowAddItemModal(false)}\r\n                  className=\"h-8 w-8 p-0\"\r\n                >\r\n                  <X className=\"h-4 w-4\" />\r\n                </Button>\r\n              </div>\r\n              \r\n              <form onSubmit={handleAddItem} className=\"space-y-4\">\r\n                <div>\r\n                  <Label htmlFor=\"item-name\">Item Name *</Label>\r\n                  <Input\r\n                    id=\"item-name\"\r\n                    value={newItem.name}\r\n                    onChange={(e) => setNewItem(prev => ({ ...prev, name: e.target.value }))}\r\n                    placeholder=\"e.g., Milk\"\r\n                    className=\"mt-1\"\r\n                    required\r\n                  />\r\n                </div>\r\n                \r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <Label htmlFor=\"quantity\">Quantity</Label>\r\n                    <Input\r\n                      id=\"quantity\"\r\n                      type=\"number\"\r\n                      min=\"1\"\r\n                      value={newItem.quantity}\r\n                      onChange={(e) => setNewItem(prev => ({ ...prev, quantity: parseInt(e.target.value) || 1 }))}\r\n                      className=\"mt-1\"\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <Label htmlFor=\"unit\">Unit</Label>\r\n                    <Input\r\n                      id=\"unit\"\r\n                      value={newItem.unit}\r\n                      onChange={(e) => setNewItem(prev => ({ ...prev, unit: e.target.value }))}\r\n                      placeholder=\"e.g., liters\"\r\n                      className=\"mt-1\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                \r\n                <div>\r\n                  <Label htmlFor=\"category\">Category</Label>\r\n                  <select\r\n                    id=\"category\"\r\n                    value={newItem.category}\r\n                    onChange={(e) => setNewItem(prev => ({ ...prev, category: e.target.value }))}\r\n                    className=\"w-full mt-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                  >\r\n                    {categories.map((category) => (\r\n                      <option key={category} value={category}>\r\n                        {category.charAt(0).toUpperCase() + category.slice(1)}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n                \r\n                <div>\r\n                  <Label htmlFor=\"notes\">Notes (optional)</Label>\r\n                  <Textarea\r\n                    id=\"notes\"\r\n                    value={newItem.notes}\r\n                    onChange={(e) => setNewItem(prev => ({ ...prev, notes: e.target.value }))}\r\n                    placeholder=\"Any additional notes...\"\r\n                    className=\"mt-1\"\r\n                    rows={2}\r\n                  />\r\n                </div>\r\n                \r\n                <div className=\"flex gap-3 pt-2\">\r\n                  <Button\r\n                    type=\"submit\"\r\n                    disabled={!newItem.name.trim()}\r\n                    className=\"flex-1\"\r\n                  >\r\n                    Add Item\r\n                  </Button>\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"outline\"\r\n                    onClick={() => setShowAddItemModal(false)}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Edit List Modal */}\r\n        {showEditListModal && (\r\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n            <div className=\"bg-white rounded-lg p-6 w-full max-w-md mx-4\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <h2 className=\"text-xl font-semibold\">Edit List</h2>\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={() => setShowEditListModal(false)}\r\n                  className=\"h-8 w-8 p-0\"\r\n                >\r\n                  <X className=\"h-4 w-4\" />\r\n                </Button>\r\n              </div>\r\n              \r\n              <form onSubmit={handleEditList} className=\"space-y-4\">\r\n                <div>\r\n                  <Label htmlFor=\"list-name\">List Name *</Label>\r\n                  <Input\r\n                    id=\"list-name\"\r\n                    value={editListData.name}\r\n                    onChange={(e) => setEditListData(prev => ({ ...prev, name: e.target.value }))}\r\n                    placeholder=\"e.g., Groceries for this week\"\r\n                    className=\"mt-1\"\r\n                    required\r\n                  />\r\n                </div>\r\n                \r\n                <div>\r\n                  <Label htmlFor=\"list-description\">Description</Label>\r\n                  <Textarea\r\n                    id=\"list-description\"\r\n                    value={editListData.description}\r\n                    onChange={(e) => setEditListData(prev => ({ ...prev, description: e.target.value }))}\r\n                    placeholder=\"e.g., Weekly grocery shopping for family of 4\"\r\n                    className=\"mt-1\"\r\n                    rows={3}\r\n                  />\r\n                </div>\r\n                \r\n                <div className=\"flex gap-3 pt-2\">\r\n                  <Button\r\n                    type=\"submit\"\r\n                    disabled={!editListData.name.trim()}\r\n                    className=\"flex-1\"\r\n                  >\r\n                    Update List\r\n                  </Button>\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"outline\"\r\n                    onClick={() => setShowEditListModal(false)}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\shopping-lists\\components\\CreateListModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\shopping-lists\\components\\ShoppingListCard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'items' logical expression could make the dependencies of useMemo Hook (at line 20) change on every render. To fix this, wrap the initialization of 'items' in its own useMemo() Hook.","line":13,"column":9,"nodeType":"VariableDeclarator","endLine":13,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useMemo } from 'react';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Sparkles } from 'lucide-react';\r\nimport { useShoppingListItems } from '@/hooks/useShoppingListItems';\r\nimport { logger } from '@/lib/logging/logger';\r\nimport type { ShoppingListCardProps } from '../types';\r\n\r\nexport function ShoppingListCard({ list }: ShoppingListCardProps) {\r\n  const { data: itemsData, isLoading: itemsLoading } = useShoppingListItems(list.id);\r\n  const items = itemsData?.items ?? [];\r\n\r\n  const completionPercentage = useMemo(() => {\r\n    if (list.total_items === 0) return 0;\r\n    return Math.round((list.completed_items / list.total_items) * 100);\r\n  }, [list.completed_items, list.total_items]);\r\n\r\n  const visibleItems = useMemo(() => items.slice(0, 5), [items]);\r\n  const remainingItems = useMemo(() => Math.max(items.length - visibleItems.length, 0), [items.length, visibleItems.length]);\r\n\r\n  logger.info('Shopping list render', {\r\n    listId: list.id,\r\n    itemCount: items.length,\r\n    completionPercentage,\r\n  });\r\n\r\n  return (\r\n    <div className=\"p-4 border rounded-lg bg-white\">\r\n      <div className=\"flex items-center justify-between mb-3\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <h4 className=\"font-medium text-lg\">{list.name}</h4>\r\n          {list.ai_suggestions_count > 0 ? (\r\n            <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-800 text-xs\">\r\n              <Sparkles className=\"h-3 w-3 mr-1\" />\r\n              {list.ai_suggestions_count} AI suggestions\r\n            </Badge>\r\n          ) : null}\r\n        </div>\r\n        <div className=\"text-right\">\r\n          <div className=\"text-sm text-gray-600 mb-1\">Progress</div>\r\n          <Progress value={completionPercentage} className=\"w-20\" />\r\n          <div className=\"text-xs text-gray-500 mt-1\">{completionPercentage}%</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex items-center gap-4 text-sm text-gray-600 mb-3\">\r\n        <span>{list.total_items} items</span>\r\n        <span>{list.completed_items} completed</span>\r\n        <span className={getAIConfidenceColor(list.ai_confidence)}>AI Confidence: {list.ai_confidence}%</span>\r\n      </div>\r\n\r\n      {itemsLoading ? (\r\n        <div className=\"flex items-center justify-center py-2\">\r\n          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\" />\r\n          <span className=\"ml-2 text-sm text-gray-600\">Loading items...</span>\r\n        </div>\r\n      ) : items.length > 0 ? (\r\n        <div className=\"space-y-2\">\r\n          <h5 className=\"text-sm font-medium text-gray-700 mb-2\">Items:</h5>\r\n          <div className=\"space-y-1\">\r\n            {visibleItems.map((item) => (\r\n              <div key={item.id} className=\"flex items-center justify-between text-sm\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <div className={`w-2 h-2 rounded-full ${item.is_complete ? 'bg-green-500' : 'bg-gray-300'}`} />\r\n                  <span className={item.is_complete ? 'line-through text-gray-500' : 'text-gray-900'}>{item.name}</span>\r\n                  {item.quantity ? <Badge variant=\"outline\" className=\"text-xs\">{item.quantity}</Badge> : null}\r\n                  {item.auto_added ? (\r\n                    <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800 text-xs\">AI</Badge>\r\n                  ) : null}\r\n                </div>\r\n              </div>\r\n            ))}\r\n            {remainingItems > 0 ? (\r\n              <div className=\"text-xs text-gray-500\">+{remainingItems} more items</div>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"text-sm text-gray-500 italic\">No items in this list yet</div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst getAIConfidenceColor = (confidence: number) => {\r\n  if (confidence >= 80) return 'text-green-600';\r\n  if (confidence >= 60) return 'text-yellow-600';\r\n  return 'text-red-600';\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\shopping-lists\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\shopping-lists\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\sign-in\\[[...sign-in]]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\sign-up\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\test-automation\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\test-notification\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\today\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\upgrade\\cancelled\\page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":24,"column":57,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[785,899],"text":"\r\n            No worries! You can upgrade anytime when you&apos;re ready. Your current plan remains active.\r\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[785,899],"text":"\r\n            No worries! You can upgrade anytime when you&lsquo;re ready. Your current plan remains active.\r\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[785,899],"text":"\r\n            No worries! You can upgrade anytime when you&#39;re ready. Your current plan remains active.\r\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[785,899],"text":"\r\n            No worries! You can upgrade anytime when you&rsquo;re ready. Your current plan remains active.\r\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useRouter } from 'next/navigation';\r\nimport { useAuth } from '@clerk/nextjs';\r\nimport { useEffect } from 'react';\r\n\r\nexport default function UpgradeCancelledPage() {\r\n  const router = useRouter();\r\n  const { isSignedIn } = useAuth();\r\n\r\n  useEffect(() => {\r\n    if (!isSignedIn) {\r\n      router.push('/sign-in');\r\n    }\r\n  }, [isSignedIn, router]);\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n      <div className=\"bg-white shadow rounded-lg p-8 max-w-md w-full mx-4\">\r\n        <div className=\"text-center\">\r\n          <div className=\"text-yellow-500 text-6xl mb-4\">😔</div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Upgrade Cancelled</h1>\r\n          <p className=\"text-gray-600 mb-6\">\r\n            No worries! You can upgrade anytime when you're ready. Your current plan remains active.\r\n          </p>\r\n          <div className=\"space-y-3\">\r\n            <button \r\n              onClick={() => router.push('/upgrade')}\r\n              className=\"w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700\"\r\n            >\r\n              Try Again\r\n            </button>\r\n            <button \r\n              onClick={() => router.push('/dashboard')}\r\n              className=\"w-full bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700\"\r\n            >\r\n              Back to Dashboard\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\upgrade\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ProBadge' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":36,"column":9,"nodeType":"CallExpression","messageId":"unexpected","endLine":36,"endColumn":68},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":40,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":40,"endColumn":52},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":143,"column":26,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":143,"endColumn":31},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":169,"column":26,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":169,"endColumn":31},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":196,"column":26,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":196,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useRouter } from 'next/navigation';\r\nimport { useState } from 'react';\r\nimport { useAuth } from '@clerk/nextjs';\r\nimport { ProBadge } from '@/components/ProBadge';\r\n\r\nexport default function UpgradePage() {\r\n  const router = useRouter();\r\n  const { isSignedIn } = useAuth();\r\n  const [loading, setLoading] = useState<string | null>(null);\r\n\r\n  const handleUpgrade = async (plan: 'pro' | 'pro_plus') => {\r\n    if (!isSignedIn) {\r\n      router.push('/sign-in');\r\n      return;\r\n    }\r\n\r\n    setLoading(plan);\r\n    \r\n    try {\r\n      const response = await fetch('/api/stripe/create-checkout-session', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ plan }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.success && data.url) {\r\n        window.location.href = data.url;\r\n      } else {\r\n        console.error('Failed to create checkout session:', data.error);\r\n        alert('Failed to start upgrade process. Please try again.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error upgrading plan:', error);\r\n      alert('An error occurred. Please try again.');\r\n    } finally {\r\n      setLoading(null);\r\n    }\r\n  };\r\n\r\n  const freeFeatures = [\r\n    {\r\n      icon: '📅',\r\n      title: 'Calendar & Events',\r\n      description: 'Manage family events and schedules'\r\n    },\r\n    {\r\n      icon: '🧹',\r\n      title: 'Chores',\r\n      description: 'AI-powered chore assignment and tracking'\r\n    },\r\n    {\r\n      icon: '🛒',\r\n      title: 'Shopping Lists',\r\n      description: 'Smart shopping list management'\r\n    },\r\n    {\r\n      icon: '🍽️',\r\n      title: 'Meal Planning',\r\n      description: 'Plan meals and generate grocery lists'\r\n    }\r\n  ];\r\n\r\n  const proFeatures = [\r\n    {\r\n      icon: '💰',\r\n      title: 'Finance Tracking',\r\n      description: 'Bills, budgets, and spending management'\r\n    },\r\n    {\r\n      icon: '🤖',\r\n      title: 'AI Features',\r\n      description: 'Smart suggestions and automation'\r\n    },\r\n    {\r\n      icon: '📊',\r\n      title: 'Advanced Analytics',\r\n      description: 'Detailed insights and progress tracking'\r\n    },\r\n    {\r\n      icon: '📱',\r\n      title: 'Push Notifications',\r\n      description: 'Stay updated with important reminders'\r\n    }\r\n  ];\r\n\r\n  const proPlusFeatures = [\r\n    {\r\n      icon: '🔄',\r\n      title: 'Two-way Google Sync',\r\n      description: 'Seamless calendar synchronization'\r\n    },\r\n    {\r\n      icon: '🏠',\r\n      title: 'Multi-household',\r\n      description: 'Manage up to 3 households'\r\n    },\r\n    {\r\n      icon: '⚙️',\r\n      title: 'Admin Tools',\r\n      description: 'Advanced management and bulk operations'\r\n    },\r\n    {\r\n      icon: '🚀',\r\n      title: 'Unlimited Automations',\r\n      description: 'Create complex multi-step workflows'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n        <div className=\"text-center mb-12\">\r\n          <div className=\"mb-6\">\r\n            <div className=\"inline-flex items-center justify-center w-20 h-20 bg-purple-100 rounded-full mb-4\">\r\n              <span className=\"text-3xl\">⭐</span>\r\n            </div>\r\n            <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">\r\n              Choose Your Plan\r\n            </h1>\r\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\r\n              Unlock powerful features and take your home management to the next level\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Pricing Cards */}\r\n        <div className=\"grid md:grid-cols-3 gap-8 mb-12\">\r\n          {/* Free Plan */}\r\n          <div className=\"bg-white rounded-lg shadow-lg p-6\">\r\n            <div className=\"text-center mb-6\">\r\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">Free</h3>\r\n              <div className=\"text-4xl font-bold text-gray-900 mb-2\">$0</div>\r\n              <p className=\"text-gray-600\">Perfect for getting started</p>\r\n            </div>\r\n            <ul className=\"space-y-3 mb-6\">\r\n              {freeFeatures.map((feature, index) => (\r\n                <li key={index} className=\"flex items-start space-x-3\">\r\n                  <div className=\"text-green-500 text-lg\">✓</div>\r\n                  <div>\r\n                    <div className=\"font-medium text-gray-900\">{feature.title}</div>\r\n                    <div className=\"text-sm text-gray-600\">{feature.description}</div>\r\n                  </div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <button className=\"w-full bg-gray-600 text-white py-2 px-4 rounded-md hover:bg-gray-700 transition-colors\">\r\n              Current Plan\r\n            </button>\r\n          </div>\r\n\r\n          {/* Pro Plan */}\r\n          <div className=\"bg-white rounded-lg shadow-lg p-6 border-2 border-blue-500 relative\">\r\n            <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\r\n              <span className=\"bg-blue-500 text-white px-3 py-1 rounded-full text-sm font-medium\">Most Popular</span>\r\n            </div>\r\n            <div className=\"text-center mb-6\">\r\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">Pro</h3>\r\n              <div className=\"text-4xl font-bold text-gray-900 mb-2\">$8.99</div>\r\n              <p className=\"text-gray-600\">per month</p>\r\n            </div>\r\n            <ul className=\"space-y-3 mb-6\">\r\n              {proFeatures.map((feature, index) => (\r\n                <li key={index} className=\"flex items-start space-x-3\">\r\n                  <div className=\"text-green-500 text-lg\">✓</div>\r\n                  <div>\r\n                    <div className=\"font-medium text-gray-900\">{feature.title}</div>\r\n                    <div className=\"text-sm text-gray-600\">{feature.description}</div>\r\n                  </div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <button \r\n              onClick={() => handleUpgrade('pro')}\r\n              disabled={loading === 'pro'}\r\n              className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n            >\r\n              {loading === 'pro' ? 'Processing...' : 'Upgrade to Pro'}\r\n            </button>\r\n          </div>\r\n\r\n          {/* Pro+ Plan */}\r\n          <div className=\"bg-white rounded-lg shadow-lg p-6\">\r\n            <div className=\"text-center mb-6\">\r\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">Pro+</h3>\r\n              <div className=\"text-4xl font-bold text-gray-900 mb-2\">$14.99</div>\r\n              <p className=\"text-gray-600\">per month</p>\r\n            </div>\r\n            <ul className=\"space-y-3 mb-6\">\r\n              {proPlusFeatures.map((feature, index) => (\r\n                <li key={index} className=\"flex items-start space-x-3\">\r\n                  <div className=\"text-green-500 text-lg\">✓</div>\r\n                  <div>\r\n                    <div className=\"font-medium text-gray-900\">{feature.title}</div>\r\n                    <div className=\"text-sm text-gray-600\">{feature.description}</div>\r\n                  </div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <button \r\n              onClick={() => handleUpgrade('pro_plus')}\r\n              disabled={loading === 'pro_plus'}\r\n              className=\"w-full bg-purple-600 text-white py-2 px-4 rounded-md hover:bg-purple-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n            >\r\n              {loading === 'pro_plus' ? 'Processing...' : 'Upgrade to Pro+'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"bg-white rounded-lg shadow-lg p-8 mb-8\">\r\n          <div className=\"text-center\">\r\n            <h3 className=\"text-xl font-semibold mb-2\">Ready to upgrade?</h3>\r\n            <p className=\"text-gray-600 mb-4\">\r\n              Contact your household owner to upgrade your plan and unlock Pro features\r\n            </p>\r\n            <button className=\"bg-blue-600 text-white px-6 py-2 rounded-md font-semibold hover:bg-blue-700 transition-colors\">\r\n              Contact Owner\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"text-center\">\r\n          <button\r\n            onClick={() => router.push('/dashboard')}\r\n            className=\"bg-gray-600 text-white px-6 py-3 rounded-md hover:bg-gray-700 transition-colors font-medium\"\r\n          >\r\n            ← Back to Dashboard\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"mt-12 text-center\">\r\n          <p className=\"text-sm text-gray-500\">\r\n            Have questions about upgrading? Reach out to your household owner for assistance.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\upgrade\\success\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\app\\user-button\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\CalendarTemplates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ConflictDetection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\CreateTemplateForm.tsx","messages":[{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":355,"column":22,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":357,"endColumn":22,"fix":{"range":[11634,11769],"text":"eventError ? <p className=\"text-sm text-red-600\" role=\"alert\">{eventError.message}</p> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":369,"column":24,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":371,"endColumn":24,"fix":{"range":[12359,12503],"text":"eventError ? <p className=\"text-sm text-red-600 mt-1\" role=\"alert\">{eventError.message}</p> : null"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"'use client';\r\n\r\nimport { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Plus, Trash2, Calendar } from 'lucide-react';\r\nimport { CalendarTemplate } from '@/lib/entitlements';\r\nimport { useFormState } from '@/hooks/useFormValidation';\r\nimport { createCalendarTemplateSchema } from '@/lib/validation/schemas';\r\nimport { toast } from 'sonner';\r\n\r\ninterface CreateTemplateFormProps {\r\n  householdId: string;\r\n  template?: CalendarTemplate;\r\n  onCreateTemplate: (template: CalendarTemplatePayload) => Promise<void>;\r\n  onEditTemplate?: (template: CalendarTemplatePayload) => Promise<void>;\r\n  onCancel: () => void;\r\n}\r\n\r\ninterface TemplateEvent {\r\n  id: string;\r\n  title: string;\r\n  start: string;\r\n  end: string;\r\n  color: string;\r\n  recurring?: boolean;\r\n}\r\n\r\ntype CalendarTemplatePayload = {\r\n  household_id: string;\r\n  name: string;\r\n  description?: string;\r\n  template_type: CalendarTemplate['template_type'];\r\n  rrule: string;\r\n  events: Array<Omit<TemplateEvent, 'id'>>;\r\n  is_active: boolean;\r\n};\r\n\r\nconst DEFAULT_COLORS = [\r\n  '#3B82F6', // Blue\r\n  '#10B981', // Green\r\n  '#F59E0B', // Yellow\r\n  '#EF4444', // Red\r\n  '#8B5CF6', // Purple\r\n  '#06B6D4', // Cyan\r\n  '#84CC16', // Lime\r\n  '#F97316', // Orange\r\n];\r\n\r\nconst generateEventId = () =>\r\n  typeof crypto !== 'undefined' && 'randomUUID' in crypto\r\n    ? crypto.randomUUID()\r\n    : Math.random().toString(36).slice(2);\r\n\r\nexport default function CreateTemplateForm({ householdId, template, onCreateTemplate, onEditTemplate, onCancel }: CreateTemplateFormProps) {\r\n  const isEditing = !!template;\r\n\r\n  const {\r\n    values: formData,\r\n    setValue,\r\n    reset,\r\n    validate,\r\n    errors,\r\n    getFieldError,\r\n    hasFieldError,\r\n  } = useFormState({\r\n    name: template?.name || '',\r\n    description: template?.description || '',\r\n    template_type: (template?.template_type || 'custom') as 'school_term' | 'sports_training' | 'custom',\r\n    rrule: template?.rrule || 'FREQ=WEEKLY;BYDAY=MO',\r\n  }, createCalendarTemplateSchema.pick({\r\n    name: true,\r\n    description: true,\r\n    template_type: true,\r\n    rrule: true,\r\n  }));\r\n\r\n  const initialEvents = useMemo<TemplateEvent[]>(\r\n    () =>\r\n      template?.events?.map((event) => ({\r\n        id: generateEventId(),\r\n        title: event.title,\r\n        start: event.start,\r\n        end: event.end,\r\n        color: event.color || DEFAULT_COLORS[0],\r\n        recurring: event.recurring,\r\n      })) ?? [\r\n        {\r\n          id: generateEventId(),\r\n          title: '',\r\n          start: new Date().toISOString().slice(0, 16),\r\n          end: new Date().toISOString().slice(0, 16),\r\n          color: DEFAULT_COLORS[0],\r\n          recurring: false,\r\n        },\r\n      ],\r\n    [template?.events]\r\n  );\r\n\r\n  const [events, setEvents] = useState<TemplateEvent[]>(initialEvents);\r\n  const [errorsState, setErrorsState] = useState<FormFieldError[]>([]);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setEvents(initialEvents);\r\n  }, [initialEvents]);\r\n\r\n  const handleInputChange = useCallback(\r\n    (field: keyof typeof formData, value: string) => {\r\n      setValue(field, value);\r\n    },\r\n    [setValue]\r\n  );\r\n\r\n  const handleEventChange = useCallback(\r\n    (index: number, field: keyof TemplateEvent, value: string | boolean) => {\r\n      setEvents((prev) =>\r\n        prev.map((event, i) =>\r\n          i === index\r\n            ? {\r\n                ...event,\r\n                [field]: value,\r\n              }\r\n            : event\r\n        )\r\n      );\r\n    },\r\n    []\r\n  );\r\n\r\n  const addEvent = useCallback(() => {\r\n    setEvents((prev) => [\r\n      ...prev,\r\n      {\r\n        id: generateEventId(),\r\n        title: '',\r\n        start: new Date().toISOString().slice(0, 16),\r\n        end: new Date().toISOString().slice(0, 16),\r\n        color: DEFAULT_COLORS[prev.length % DEFAULT_COLORS.length],\r\n        recurring: false,\r\n      },\r\n    ]);\r\n  }, []);\r\n\r\n  const removeEvent = useCallback((index: number) => {\r\n    setEvents((prev) => {\r\n      if (prev.length <= 1) {\r\n        return prev;\r\n      }\r\n      return prev.filter((_, i) => i !== index);\r\n    });\r\n  }, []);\r\n\r\n  const validateEvents = useCallback(() => {\r\n    const validationErrors: { field: string; message: string }[] = [];\r\n\r\n    events.forEach((event) => {\r\n      if (!event.title.trim()) {\r\n        validationErrors.push({ field: event.id, message: 'Event title is required' });\r\n      }\r\n      if (!event.start || !event.end) {\r\n        validationErrors.push({ field: event.id, message: 'Start and end time are required' });\r\n      }\r\n      if (event.start && event.end && new Date(event.start) >= new Date(event.end)) {\r\n        validationErrors.push({ field: event.id, message: 'End time must be after start time' });\r\n      }\r\n    });\r\n\r\n    return validationErrors;\r\n  }, [events]);\r\n\r\n  const handleSubmit = useCallback(\r\n    async (submitEvent?: React.FormEvent<HTMLFormElement>) => {\r\n      submitEvent?.preventDefault();\r\n      setIsSubmitting(true);\r\n      setErrorsState([]);\r\n\r\n      const isValid = validate();\r\n      const eventErrors = validateEvents();\r\n\r\n      if (!isValid || eventErrors.length > 0) {\r\n        setErrorsState(eventErrors);\r\n        toast.error('Please fix the highlighted fields');\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n\r\n      const templateEvents = events.map(({ id: _id, ...rest }) => rest);\r\n\r\n      const templateData: CalendarTemplatePayload = {\r\n        household_id: householdId,\r\n        name: formData.name.trim(),\r\n        description: formData.description.trim() || undefined,\r\n        template_type: formData.template_type,\r\n        rrule: formData.rrule,\r\n        events: templateEvents,\r\n        is_active: true,\r\n      };\r\n\r\n      try {\r\n        if (isEditing && onEditTemplate) {\r\n          await onEditTemplate(templateData);\r\n        } else {\r\n          await onCreateTemplate(templateData);\r\n        }\r\n\r\n        reset();\r\n        setEvents([\r\n          {\r\n            id: generateEventId(),\r\n            title: '',\r\n            start: new Date().toISOString().slice(0, 16),\r\n            end: new Date().toISOString().slice(0, 16),\r\n            color: DEFAULT_COLORS[0],\r\n            recurring: false,\r\n          },\r\n        ]);\r\n        toast.success(isEditing ? 'Template updated successfully' : 'Template created successfully');\r\n      } catch (submissionError) {\r\n        console.error('Error saving template:', submissionError);\r\n        toast.error('Failed to save template');\r\n      } finally {\r\n        setIsSubmitting(false);\r\n      }\r\n    },\r\n    [\r\n      events,\r\n      formData.description,\r\n      formData.name,\r\n      formData.rrule,\r\n      formData.template_type,\r\n      householdId,\r\n      isEditing,\r\n      onCreateTemplate,\r\n      onEditTemplate,\r\n      reset,\r\n      validate,\r\n      validateEvents,\r\n    ]\r\n  );\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Calendar className=\"h-5 w-5\" />\r\n          {isEditing ? 'Edit Calendar Template' : 'Create Calendar Template'}\r\n        </CardTitle>\r\n        <CardDescription>\r\n          {isEditing ? 'Update your calendar template' : 'Create a reusable template for calendar events'}\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n          {errors.length > 0 && (\r\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n              <p className=\"text-red-800 text-sm\">{errors[0].message}</p>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\r\n            <div>\r\n              <Label htmlFor=\"name\">Template Name *</Label>\r\n              <Input\r\n                id=\"name\"\r\n                value={formData.name}\r\n                onChange={(e) => handleInputChange('name', e.target.value)}\r\n                placeholder=\"e.g., Weekly Team Meeting\"\r\n                aria-invalid={hasFieldError('name') ? 'true' : 'false'}\r\n              />\r\n              {hasFieldError('name') && (\r\n                <p className=\"text-sm text-red-600 mt-1\" role=\"alert\">{getFieldError('name')}</p>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"template_type\">Template Type</Label>\r\n              <Select\r\n                value={formData.template_type}\r\n                onValueChange={(value) => handleInputChange('template_type', value)}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"custom\">Custom</SelectItem>\r\n                  <SelectItem value=\"school_term\">School Term</SelectItem>\r\n                  <SelectItem value=\"sports_training\">Sports Training</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"description\">Description</Label>\r\n            <Textarea\r\n              id=\"description\"\r\n              value={formData.description}\r\n              onChange={(e) => handleInputChange('description', e.target.value)}\r\n              placeholder=\"Describe the template's purpose\"\r\n              aria-invalid={hasFieldError('description') ? 'true' : 'false'}\r\n            />\r\n            {hasFieldError('description') && (\r\n              <p className=\"text-sm text-red-600 mt-1\">{getFieldError('description')}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"rrule\">Recurrence Rule</Label>\r\n            <Input\r\n              id=\"rrule\"\r\n              value={formData.rrule}\r\n              onChange={(e) => handleInputChange('rrule', e.target.value)}\r\n              placeholder=\"FREQ=WEEKLY;BYDAY=MO\"\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <div className=\"flex items-center justify-between mb-4\">\r\n              <Label>Events</Label>\r\n              <Button\r\n                type=\"button\"\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={addEvent}\r\n                className=\"flex items-center gap-2\"\r\n              >\r\n                <Plus className=\"h-4 w-4\" />\r\n                Add Event\r\n              </Button>\r\n            </div>\r\n\r\n              <div className=\"space-y-4\">\r\n              {events.map((event, index) => {\r\n                const eventError = errorsState.find((eventErr) => eventErr.field === event.id);\r\n                return (\r\n                  <div key={event.id} className=\"border rounded-lg p-4 space-y-4\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <h4 className=\"font-medium\">Event {index + 1}</h4>\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"ghost\"\r\n                        size=\"sm\"\r\n                        onClick={() => removeEvent(index)}\r\n                        disabled={events.length === 1}\r\n                      >\r\n                        <Trash2 className=\"h-4 w-4 mr-2\" />\r\n                        Remove\r\n                      </Button>\r\n                    </div>\r\n\r\n                    {eventError && (\r\n                      <p className=\"text-sm text-red-600\" role=\"alert\">{eventError.message}</p>\r\n                    )}\r\n\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <Label htmlFor={`event-title-${index}`}>Event Title *</Label>\r\n                      <Input\r\n                        id={`event-title-${index}`}\r\n                        value={event.title}\r\n                        onChange={(e) => handleEventChange(index, 'title', e.target.value)}\r\n                        placeholder=\"e.g., Team Meeting\"\r\n                        aria-invalid={eventError ? 'true' : 'false'}\r\n                      />\r\n                      {eventError && (\r\n                        <p className=\"text-sm text-red-600 mt-1\" role=\"alert\">{eventError.message}</p>\r\n                      )}\r\n                    </div>\r\n\r\n                    <div>\r\n                      <Label htmlFor={`event-color-${index}`}>Color</Label>\r\n                      <div className=\"flex gap-2\">\r\n                        {DEFAULT_COLORS.map((color) => (\r\n                          <button\r\n                            key={color}\r\n                            type=\"button\"\r\n                            className={`w-8 h-8 rounded-full border-2 ${\r\n                              event.color === color ? 'border-gray-900' : 'border-gray-300'\r\n                            }`}\r\n                            style={{ backgroundColor: color }}\r\n                            onClick={() => handleEventChange(index, 'color', color)}\r\n                          />\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <Label>Start Time *</Label>\r\n                      <Input\r\n                        type=\"datetime-local\"\r\n                        value={event.start}\r\n                        onChange={(e) => handleEventChange(index, 'start', e.target.value)}\r\n                        aria-invalid={eventError ? 'true' : 'false'}\r\n                      />\r\n                    </div>\r\n\r\n                    <div>\r\n                      <Label>End Time *</Label>\r\n                      <Input\r\n                        type=\"datetime-local\"\r\n                        value={event.end}\r\n                        onChange={(e) => handleEventChange(index, 'end', e.target.value)}\r\n                        aria-invalid={eventError ? 'true' : 'false'}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id={`event-recurring-${index}`}\r\n                      checked={event.recurring || false}\r\n                      onChange={(e) => handleEventChange(index, 'recurring', e.target.checked)}\r\n                      className=\"rounded\"\r\n                    />\r\n                    <Label htmlFor={`event-recurring-${index}`} className=\"text-sm\">\r\n                      This event repeats\r\n                    </Label>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex justify-end space-x-3 pt-4\">\r\n            <Button variant=\"outline\" type=\"button\" onClick={onCancel} disabled={isSubmitting}>\r\n              Cancel\r\n            </Button>\r\n            <Button type=\"submit\" disabled={isSubmitting}>\r\n              {isSubmitting ? 'Saving…' : isEditing ? 'Update Template' : 'Create Calendar Template'}\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\DailyDigest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\DigestPreferences.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ErrorBoundary.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":55,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1657,1766],"text":"\r\n              We&apos;re sorry, but something unexpected happened. Please try refreshing the page.\r\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1657,1766],"text":"\r\n              We&lsquo;re sorry, but something unexpected happened. Please try refreshing the page.\r\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1657,1766],"text":"\r\n              We&#39;re sorry, but something unexpected happened. Please try refreshing the page.\r\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1657,1766],"text":"\r\n              We&rsquo;re sorry, but something unexpected happened. Please try refreshing the page.\r\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { Component, ErrorInfo, ReactNode } from 'react';\r\n\r\ninterface Props {\r\n  children: ReactNode;\r\n  fallback?: ReactNode;\r\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\r\n}\r\n\r\ninterface State {\r\n  hasError: boolean;\r\n  error?: Error;\r\n}\r\n\r\nexport class ErrorBoundary extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error: Error): State {\r\n    return { hasError: true, error };\r\n  }\r\n\r\n  override componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\r\n    \r\n    // Call the onError callback if provided\r\n    if (this.props.onError) {\r\n      this.props.onError(error, errorInfo);\r\n    }\r\n\r\n    // Log to external error reporting service\r\n    if (process.env.NODE_ENV === 'production') {\r\n      // You can send to Sentry, LogRocket, etc. here\r\n      console.error('Production error:', error);\r\n    }\r\n  }\r\n\r\n  override render() {\r\n    if (this.state.hasError) {\r\n      if (this.props.fallback) {\r\n        return this.props.fallback;\r\n      }\r\n\r\n      return (\r\n        <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\" role=\"alert\" aria-live=\"polite\">\r\n          <div className=\"bg-white shadow-lg rounded-lg p-8 max-w-md w-full text-center\">\r\n            <div className=\"text-red-500 text-6xl mb-4\" aria-hidden=\"true\">⚠️</div>\r\n            <h1 className=\"text-xl font-semibold text-gray-900 mb-2\">\r\n              Something went wrong\r\n            </h1>\r\n            <p className=\"text-gray-600 mb-6\">\r\n              We're sorry, but something unexpected happened. Please try refreshing the page.\r\n            </p>\r\n            <div className=\"space-y-3\" role=\"group\" aria-label=\"Error recovery actions\">\r\n              <button\r\n                onClick={() => {\r\n                  if (typeof window !== 'undefined') {\r\n                    window.location.reload();\r\n                  }\r\n                }}\r\n                className=\"w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors\"\r\n                aria-label=\"Refresh the page to try again\"\r\n                type=\"button\"\r\n              >\r\n                Refresh Page\r\n              </button>\r\n              <button\r\n                onClick={() => this.setState({ hasError: false })}\r\n                className=\"w-full bg-gray-200 text-gray-800 px-4 py-2 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors\"\r\n                aria-label=\"Try to continue without refreshing\"\r\n                type=\"button\"\r\n              >\r\n                Try Again\r\n              </button>\r\n            </div>\r\n            {process.env.NODE_ENV === 'development' && this.state.error ? (\r\n              <details className=\"mt-6 text-left\">\r\n                <summary className=\"cursor-pointer text-sm text-gray-600 hover:text-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 rounded px-2 py-1\">\r\n                  Error Details (Development)\r\n                </summary>\r\n                <pre className=\"mt-2 text-xs text-red-600 bg-red-50 p-3 rounded overflow-auto\" role=\"region\" aria-label=\"Error stack trace\">\r\n                  {this.state.error.stack}\r\n                </pre>\r\n              </details>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ExampleFeatureGatedPage.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":16,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":16,"endColumn":16,"suggestions":[{"fix":{"range":[466,503],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":22,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":22,"endColumn":16,"suggestions":[{"fix":{"range":[665,701],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":28,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":28,"endColumn":16,"suggestions":[{"fix":{"range":[858,892],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":77,"column":30,"nodeType":"MemberExpression","messageId":"limited","endLine":77,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { FeatureGatedButton } from './FeatureGatedButton';\r\nimport UpgradeModal from './UpgradeModal';\r\nimport { useUpgradeModal } from '@/hooks/useUpgradeModal';\r\n\r\ninterface ExampleFeatureGatedPageProps {\r\n  userPlan: string;\r\n}\r\n\r\nexport function ExampleFeatureGatedPage({ userPlan }: ExampleFeatureGatedPageProps) {\r\n  const upgradeModal = useUpgradeModal();\r\n\r\n  const handleAddEvent = async () => {\r\n    // Simulate opening an event form\r\n    console.log('Opening event form...');\r\n    // In a real app, this would open a modal or navigate to a form\r\n  };\r\n\r\n  const handleCreateList = async () => {\r\n    // Simulate creating a new list\r\n    console.log('Creating new list...');\r\n    // In a real app, this would open a form or create the list\r\n  };\r\n\r\n  const handleAddReminder = async () => {\r\n    // Simulate adding a reminder\r\n    console.log('Adding reminder...');\r\n    // In a real app, this would open a reminder form\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 space-y-4\">\r\n      <h1 className=\"text-2xl font-bold\">Feature Examples</h1>\r\n      \r\n      <div className=\"space-y-4\">\r\n        <div>\r\n          <h2 className=\"text-lg font-semibold mb-2\">Calendar Features</h2>\r\n          <div className=\"flex gap-2\">\r\n            <FeatureGatedButton\r\n              feature=\"calendar\"\r\n              userPlan={userPlan}\r\n              onClick={handleAddEvent}\r\n            >\r\n              Add Event\r\n            </FeatureGatedButton>\r\n            \r\n            <FeatureGatedButton\r\n              feature=\"reminders\"\r\n              userPlan={userPlan}\r\n              onClick={handleAddReminder}\r\n            >\r\n              Add Reminder\r\n            </FeatureGatedButton>\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <h2 className=\"text-lg font-semibold mb-2\">Shopping List Features</h2>\r\n          <div className=\"flex gap-2\">\r\n            <FeatureGatedButton\r\n              feature=\"shopping_list\"\r\n              userPlan={userPlan}\r\n              onClick={handleCreateList}\r\n            >\r\n              New List\r\n            </FeatureGatedButton>\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <h2 className=\"text-lg font-semibold mb-2\">XP Rewards (Premium Only)</h2>\r\n          <div className=\"flex gap-2\">\r\n            <FeatureGatedButton\r\n              feature=\"xp_rewards\"\r\n              userPlan={userPlan}\r\n              onClick={() => console.log('Opening XP store...')}\r\n            >\r\n              Open XP Store\r\n            </FeatureGatedButton>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <UpgradeModal \r\n        open={upgradeModal.isOpen} \r\n        onClose={upgradeModal.onClose} \r\n      />\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\FeatureGatedButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\GoogleCalendarImport.tsx","messages":[{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":319,"column":18,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":328,"endColumn":18,"fix":{"range":[10416,10755],"text":"importStatus.needs_reauth ? <Button \r\n                    onClick={handleConnectGoogle}\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                  >\r\n                    <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n                    Reconnect\r\n                  </Button> : null"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\r\n\r\nimport { useState, useCallback, useEffect } from 'react';\r\nimport { canAccessFeature, type Entitlements } from '@/lib/entitlements';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Label } from '@/components/ui/label';\r\nimport {\r\n  Calendar,\r\n  ExternalLink,\r\n  RefreshCw,\r\n  CheckCircle,\r\n  AlertCircle,\r\n  Clock,\r\n  Download,\r\n  Info,\r\n} from 'lucide-react';\r\nimport { ErrorDisplay } from '@/components/ui/ErrorDisplay';\r\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner';\r\nimport { toast } from 'sonner';\r\n\r\ninterface GoogleCalendarImportProps {\r\n  householdId: string;\r\n  entitlements: Entitlements | null;\r\n}\r\n\r\ninterface CalendarInfo {\r\n  id: string;\r\n  summary: string;\r\n  accessRole: string;\r\n  selected: boolean;\r\n}\r\n\r\ninterface ImportStats {\r\n  imported_events: number;\r\n  calendars_imported: number;\r\n}\r\n\r\ninterface ImportStatus {\r\n  connected: boolean;\r\n  status: string;\r\n  is_token_expired: boolean;\r\n  last_import_at: string | null;\r\n  last_successful_import_at: string | null;\r\n  calendars: CalendarInfo[];\r\n  recent_imports: {\r\n    last_7_days: number;\r\n    last_import: string | null;\r\n  };\r\n  needs_reauth: boolean;\r\n}\r\n\r\ntype ImportStatusResponse =\r\n  | ({ success: true; error?: undefined } & ImportStatus)\r\n  | { success: false; error?: string };\r\n\r\ninterface AuthResponse {\r\n  success: boolean;\r\n  auth_url?: string;\r\n  error?: string;\r\n}\r\n\r\ninterface ImportResponse {\r\n  success: boolean;\r\n  error?: string;\r\n  stats?: ImportStats;\r\n}\r\n\r\nexport default function GoogleCalendarImport({ householdId, entitlements }: GoogleCalendarImportProps) {\r\n  const [importStatus, setImportStatus] = useState<ImportStatus | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isImporting, setIsImporting] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [selectedCalendars, setSelectedCalendars] = useState<string[]>([]);\r\n\r\n  const canAccessGoogleImport = canAccessFeature(entitlements, 'google_import');\r\n\r\n  const loadImportStatus = useCallback(async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await fetch(`/api/google-calendar/status?household_id=${householdId}`);\r\n      const data: ImportStatusResponse = await response.json();\r\n      \r\n      if (data.success) {\r\n        setImportStatus(data);\r\n        if (data.calendars) {\r\n          setSelectedCalendars(data.calendars.filter((cal) => cal.selected).map((cal) => cal.id));\r\n        }\r\n      } else {\r\n        setError(data.error || 'Failed to load import status');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error loading import status:', err);\r\n      setError('Failed to load import status');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [householdId]);\r\n\r\n  const handleConnectGoogle = useCallback(async () => {\r\n    try {\r\n      const response = await fetch('/api/google-calendar/auth', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ household_id: householdId }),\r\n      });\r\n\r\n      const data: AuthResponse = await response.json();\r\n      \r\n      if (data.success) {\r\n        // Redirect to Google OAuth\r\n        if (data.auth_url) {\r\n          window.location.href = data.auth_url;\r\n        } else {\r\n          toast.error('Missing redirect URL for Google authentication.');\r\n        }\r\n      } else {\r\n        if (data.error?.includes('Missing Google OAuth2 configuration')) {\r\n          toast.error('Google Calendar integration is not configured. Please check the setup guide or contact support.');\r\n        } else {\r\n          toast.error(data.error || 'Failed to initiate Google Calendar connection');\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Error connecting to Google Calendar:', err);\r\n      toast.error('Failed to connect to Google Calendar');\r\n    }\r\n  }, [householdId]);\r\n\r\n  const handleImportEvents = useCallback(async () => {\r\n    if (selectedCalendars.length === 0) {\r\n      toast.error('Please select at least one calendar to import from');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsImporting(true);\r\n      setError(null);\r\n\r\n      const response = await fetch('/api/google-calendar/import', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          household_id: householdId,\r\n          calendar_ids: selectedCalendars,\r\n          max_results: 100,\r\n        }),\r\n      });\r\n\r\n      const data: ImportResponse = await response.json();\r\n      \r\n      if (data.success) {\r\n        if (data.stats) {\r\n          toast.success(`Successfully imported ${data.stats.imported_events} events from ${data.stats.calendars_imported} calendars`);\r\n        } else {\r\n          toast.success('Events imported successfully');\r\n        }\r\n        void loadImportStatus();\r\n      } else {\r\n        toast.error(data.error || 'Failed to import events');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error importing events:', err);\r\n      toast.error('Failed to import events');\r\n    } finally {\r\n      setIsImporting(false);\r\n    }\r\n  }, [householdId, loadImportStatus, selectedCalendars]);\r\n\r\n  const toggleCalendarSelection = useCallback((calendarId: string) => {\r\n    setSelectedCalendars((prev) =>\r\n      prev.includes(calendarId)\r\n        ? prev.filter((id) => id !== calendarId)\r\n        : [...prev, calendarId]\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (canAccessGoogleImport) {\r\n      void loadImportStatus();\r\n    } else {\r\n      setIsLoading(false);\r\n    }\r\n  }, [canAccessGoogleImport, loadImportStatus]);\r\n\r\n  const formatDate = (dateString: string | null) => {\r\n    if (!dateString) return 'Never';\r\n    return new Date(dateString).toLocaleString();\r\n  };\r\n\r\n  if (!canAccessGoogleImport) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Calendar className=\"h-5 w-5\" />\r\n            Google Calendar Import\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Import events from your Google Calendar\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"text-center py-8\">\r\n            <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\r\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\r\n              Upgrade to Pro to unlock Google Calendar Import\r\n            </h3>\r\n            <p className=\"text-gray-600 mb-4\">\r\n              Sync your Google Calendar events with your household calendar.\r\n            </p>\r\n            <Button className=\"bg-green-600 hover:bg-green-700\">\r\n              Upgrade to Pro\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Calendar className=\"h-5 w-5\" />\r\n            Google Calendar Import\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <LoadingSpinner />\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Calendar className=\"h-5 w-5\" />\r\n            Google Calendar Import\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <ErrorDisplay error={error} />\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Calendar className=\"h-5 w-5\" />\r\n            Google Calendar Import\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Import events from your Google Calendar to your household calendar\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-6\">\r\n          {!importStatus?.connected ? (\r\n            <div className=\"text-center py-8\">\r\n              <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\r\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\r\n                Connect Google Calendar\r\n              </h3>\r\n              <p className=\"text-gray-600 mb-4\">\r\n                Connect your Google Calendar to import events into your household calendar.\r\n              </p>\r\n              <Button \r\n                onClick={handleConnectGoogle}\r\n                className=\"bg-blue-600 hover:bg-blue-700\"\r\n              >\r\n                <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n                Connect Google Calendar\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            <>\r\n              {/* Connection Status */}\r\n              <div className=\"flex items-center justify-between p-4 border rounded-lg\">\r\n                <div className=\"flex items-center gap-3\">\r\n                  <div className=\"w-6 h-6 bg-blue-600 rounded flex items-center justify-center\">\r\n                    <span className=\"text-white text-xs font-bold\">G</span>\r\n                  </div>\r\n                  <div>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <span className=\"font-medium\">Google Calendar Connected</span>\r\n                      {importStatus.is_token_expired ? (\r\n                        <Badge variant=\"destructive\">\r\n                          <AlertCircle className=\"h-3 w-3 mr-1\" />\r\n                          Token Expired\r\n                        </Badge>\r\n                      ) : (\r\n                        <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\r\n                          <CheckCircle className=\"h-3 w-3 mr-1\" />\r\n                          Active\r\n                        </Badge>\r\n                      )}\r\n                    </div>\r\n                    <p className=\"text-sm text-gray-600\">\r\n                      Last import: {formatDate(importStatus.last_successful_import_at)}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                {importStatus.needs_reauth && (\r\n                  <Button \r\n                    onClick={handleConnectGoogle}\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                  >\r\n                    <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n                    Reconnect\r\n                  </Button>\r\n                )}\r\n              </div>\r\n\r\n              {/* Calendar Selection */}\r\n              {importStatus.calendars.length > 0 && (\r\n                <div className=\"space-y-4\">\r\n                  <h4 className=\"font-medium text-gray-900\">Select Calendars to Import</h4>\r\n                  <div className=\"grid gap-3\">\r\n                    {importStatus.calendars.map((calendar) => (\r\n                      <div key={calendar.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\r\n                        <div className=\"flex items-center gap-3\">\r\n                          <Switch\r\n                            id={`calendar-${calendar.id}`}\r\n                            checked={selectedCalendars.includes(calendar.id)}\r\n                            onCheckedChange={() => toggleCalendarSelection(calendar.id)}\r\n                          />\r\n                          <Label htmlFor={`calendar-${calendar.id}`} className=\"font-medium\">\r\n                            {calendar.summary}\r\n                          </Label>\r\n                          <Badge variant=\"outline\" className=\"text-xs\">\r\n                            {calendar.accessRole}\r\n                          </Badge>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* Import Actions */}\r\n              <div className=\"flex gap-4\">\r\n                <Button \r\n                  onClick={handleImportEvents}\r\n                  disabled={isImporting || selectedCalendars.length === 0}\r\n                  className=\"bg-blue-600 hover:bg-blue-700\"\r\n                >\r\n                  {isImporting ? (\r\n                    <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\r\n                  ) : (\r\n                    <Download className=\"h-4 w-4 mr-2\" />\r\n                  )}\r\n                  {isImporting ? 'Importing...' : 'Import Events'}\r\n                </Button>\r\n                \r\n                <Button \r\n                  onClick={loadImportStatus}\r\n                  variant=\"outline\"\r\n                  disabled={isImporting}\r\n                >\r\n                  <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n                  Refresh Status\r\n                </Button>\r\n              </div>\r\n\r\n              {/* Recent Import Stats */}\r\n              {importStatus.recent_imports.last_7_days > 0 && (\r\n                <div className=\"p-4 bg-gray-50 rounded-lg\">\r\n                  <div className=\"flex items-center gap-2 mb-2\">\r\n                    <Clock className=\"h-4 w-4 text-gray-600\" />\r\n                    <span className=\"font-medium text-gray-900\">Recent Activity</span>\r\n                  </div>\r\n                  <p className=\"text-sm text-gray-600\">\r\n                    {importStatus.recent_imports.last_7_days} events imported in the last 7 days\r\n                  </p>\r\n                </div>\r\n              )}\r\n\r\n              {/* Info Notice */}\r\n              <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\r\n                <div className=\"flex items-start gap-2\">\r\n                  <Info className=\"h-5 w-5 text-blue-600 mt-0.5\" />\r\n                  <div className=\"text-sm text-blue-800\">\r\n                    <p className=\"font-medium mb-1\">Import Information</p>\r\n                    <p>\r\n                      Events are imported as read-only. Changes made in your household calendar \r\n                      will not sync back to Google Calendar. Only future events are imported by default.\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\HeartbeatProvider.tsx","messages":[{"ruleId":"react/jsx-no-useless-fragment","severity":1,"message":"Fragments should contain more than one child - otherwise, there’s no need for a Fragment at all.","line":13,"column":10,"nodeType":"JSXFragment","messageId":"NeedsMoreChildren","endLine":13,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useHeartbeat } from '@/hooks/useHeartbeat';\r\n\r\ninterface HeartbeatProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport default function HeartbeatProvider({ children }: HeartbeatProviderProps) {\r\n  // Re-enable heartbeat for user activity monitoring\r\n  useHeartbeat();\r\n  \r\n  return <>{children}</>;\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\Inbox\\EventRow.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[239,242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[239,242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":93,"column":12,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":105,"endColumn":12,"fix":{"range":[3249,3737],"text":"showPayload ? <div className=\"mt-3 p-3 bg-gray-50 rounded-md\">\r\n              {Object.keys(event.payload).length > 0 ? (\r\n                <pre className=\"text-xs text-gray-700 whitespace-pre-wrap\">\r\n                  {JSON.stringify(event.payload, null, 2)}\r\n                </pre>\r\n              ) : (\r\n                <div className=\"text-sm text-gray-500\">\r\n                  No additional data\r\n                </div>\r\n              )}\r\n            </div> : null"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\r\n\r\nimport { useState } from 'react';\r\nimport Link from 'next/link';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\ninterface HouseholdEvent {\r\n  id: string;\r\n  type: string;\r\n  source: string;\r\n  payload: Record<string, any>;\r\n  occurred_at: string;\r\n  created_at: string;\r\n}\r\n\r\ninterface EventRowProps {\r\n  event: HouseholdEvent;\r\n}\r\n\r\nexport default function EventRow({ event }: EventRowProps) {\r\n  const [showPayload, setShowPayload] = useState(false);\r\n\r\n  const formatEventType = (type: string) => {\r\n    return type.split('.').map(word => \r\n      word.charAt(0).toUpperCase() + word.slice(1)\r\n    ).join(' ');\r\n  };\r\n\r\n  const formatSource = (source: string) => {\r\n    if (source === 'app') return 'App';\r\n    if (source.startsWith('webhook:')) return source.replace('webhook:', 'Webhook: ');\r\n    if (source === 'automation') return 'Automation';\r\n    return source;\r\n  };\r\n\r\n  const getEventIcon = (type: string) => {\r\n    if (type.includes('bill')) return '💰';\r\n    if (type.includes('chore')) return '✅';\r\n    if (type.includes('shopping')) return '🛒';\r\n    if (type.includes('heartbeat')) return '💓';\r\n    if (type.includes('notify')) return '🔔';\r\n    return '📋';\r\n  };\r\n\r\n  const getEventColor = (type: string) => {\r\n    if (type.includes('bill')) return 'text-blue-600 bg-blue-100';\r\n    if (type.includes('chore')) return 'text-green-600 bg-green-100';\r\n    if (type.includes('shopping')) return 'text-purple-600 bg-purple-100';\r\n    if (type.includes('heartbeat')) return 'text-gray-600 bg-gray-100';\r\n    if (type.includes('notify')) return 'text-orange-600 bg-orange-100';\r\n    return 'text-gray-600 bg-gray-100';\r\n  };\r\n\r\n  return (\r\n    <div className=\"px-6 py-4 hover:bg-gray-50 transition-colors\">\r\n      <div className=\"flex items-start space-x-3\">\r\n        <div className=\"flex-shrink-0\">\r\n          <span className=\"text-2xl\">{getEventIcon(event.type)}</span>\r\n        </div>\r\n        \r\n        <div className=\"flex-1 min-w-0\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getEventColor(event.type)}`}>\r\n                {formatEventType(event.type)}\r\n              </span>\r\n              <span className=\"text-sm text-gray-500\">\r\n                from {formatSource(event.source)}\r\n              </span>\r\n            </div>\r\n            \r\n            <div className=\"flex items-center space-x-2\">\r\n              <span className=\"text-sm text-gray-500\">\r\n                {formatDistanceToNow(new Date(event.occurred_at), { addSuffix: true })}\r\n              </span>\r\n              \r\n              <button\r\n                onClick={() => setShowPayload(!showPayload)}\r\n                className=\"text-sm text-blue-600 hover:text-blue-800\"\r\n              >\r\n                {showPayload ? 'Hide' : 'Show'} Details\r\n              </button>\r\n              \r\n              <Link\r\n                href={`/inbox/${event.id}`}\r\n                className=\"text-sm text-blue-600 hover:text-blue-800\"\r\n              >\r\n                View Full\r\n              </Link>\r\n            </div>\r\n          </div>\r\n          \r\n          {showPayload && (\r\n            <div className=\"mt-3 p-3 bg-gray-50 rounded-md\">\r\n              {Object.keys(event.payload).length > 0 ? (\r\n                <pre className=\"text-xs text-gray-700 whitespace-pre-wrap\">\r\n                  {JSON.stringify(event.payload, null, 2)}\r\n                </pre>\r\n              ) : (\r\n                <div className=\"text-sm text-gray-500\">\r\n                  No additional data\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n          \r\n          {!showPayload && Object.keys(event.payload).length === 0 && (\r\n            <div className=\"mt-1 text-sm text-gray-500\">\r\n              No additional data\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\Inbox\\InboxEvents.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[306,309],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[306,309],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchEventTypes' and 'fetchEvents'. Either include them or remove the dependency array.","line":36,"column":6,"nodeType":"ArrayExpression","endLine":36,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [fetchEventTypes, fetchEvents, householdId, selectedType]","fix":{"range":[1024,1051],"text":"[fetchEventTypes, fetchEvents, householdId, selectedType]"}}]},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":90,"column":9,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":90,"endColumn":87,"fix":{"range":[2462,2469],"text":" />"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { createBrowserClient } from '@supabase/ssr';\r\nimport { Database } from '@/types/supabase';\r\nimport EventRow from './EventRow';\r\n\r\ninterface HouseholdEvent {\r\n  id: string;\r\n  type: string;\r\n  source: string;\r\n  payload: Record<string, any>;\r\n  occurred_at: string;\r\n  created_at: string;\r\n}\r\n\r\ninterface InboxEventsProps {\r\n  householdId: string;\r\n}\r\n\r\nexport default function InboxEvents({ householdId }: InboxEventsProps) {\r\n  const [events, setEvents] = useState<HouseholdEvent[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [selectedType, setSelectedType] = useState<string>('all');\r\n  const [eventTypes, setEventTypes] = useState<string[]>([]);\r\n\r\n  const supabase = createBrowserClient<Database>(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetchEvents();\r\n    fetchEventTypes();\r\n  }, [householdId, selectedType]);\r\n\r\n  const fetchEvents = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      let query = supabase\r\n        .from('household_events')\r\n        .select('*')\r\n        .eq('household_id', householdId)\r\n        .order('occurred_at', { ascending: false })\r\n        .limit(100);\r\n\r\n      if (selectedType !== 'all') {\r\n        query = query.eq('type', selectedType);\r\n      }\r\n\r\n      const { data, error } = await query;\r\n\r\n      if (error) throw error;\r\n      \r\n      setEvents(data || []);\r\n    } catch (err) {\r\n      console.error('Error fetching events:', err);\r\n      setError(err instanceof Error ? err.message : 'Failed to fetch events');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchEventTypes = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('household_events')\r\n        .select('type')\r\n        .eq('household_id', householdId);\r\n\r\n      if (error) throw error;\r\n      \r\n      const types = [...new Set(data?.map(e => e.type) || [])];\r\n      setEventTypes(types);\r\n    } catch (err) {\r\n      console.error('Error fetching event types:', err);\r\n    }\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    fetchEvents();\r\n    fetchEventTypes();\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center py-12\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\r\n        <div className=\"flex\">\r\n          <div className=\"ml-3\">\r\n            <h3 className=\"text-sm font-medium text-red-800\">Error loading events</h3>\r\n            <div className=\"mt-2 text-sm text-red-700\">\r\n              <p>{error}</p>\r\n            </div>\r\n            <div className=\"mt-4\">\r\n              <button\r\n                onClick={handleRefresh}\r\n                className=\"bg-red-100 text-red-800 px-3 py-2 rounded-md text-sm font-medium hover:bg-red-200\"\r\n              >\r\n                Try again\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-white shadow rounded-lg\">\r\n      <div className=\"px-6 py-4 border-b border-gray-200\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <h2 className=\"text-lg font-medium text-gray-900\">Recent Events</h2>\r\n          <div className=\"flex items-center space-x-4\">\r\n            <select\r\n              value={selectedType}\r\n              onChange={(e) => setSelectedType(e.target.value)}\r\n              className=\"block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md\"\r\n            >\r\n              <option value=\"all\">All Event Types</option>\r\n              {eventTypes.map((type) => (\r\n                <option key={type} value={type}>\r\n                  {type}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            <button\r\n              onClick={handleRefresh}\r\n              className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n            >\r\n              Refresh\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"divide-y divide-gray-200\">\r\n        {events.length === 0 ? (\r\n          <div className=\"px-6 py-12 text-center\">\r\n            <div className=\"text-gray-500\">\r\n              {selectedType === 'all' ? 'No events found' : `No events of type \"${selectedType}\" found`}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          events.map((event) => (\r\n            <EventRow key={event.id} event={event} />\r\n          ))\r\n        )}\r\n      </div>\r\n\r\n      {events.length > 0 && (\r\n        <div className=\"px-6 py-3 bg-gray-50 text-xs text-gray-500 text-center\">\r\n          Showing {events.length} most recent events\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\LazyPageWrapper.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1273,1276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1273,1276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2697,2700],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2697,2700],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { Suspense, lazy, ComponentType } from 'react';\r\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner';\r\nimport { ErrorBoundary } from '@/components/ErrorBoundary';\r\n\r\ninterface LazyPageWrapperProps {\r\n  fallback?: React.ReactNode;\r\n  errorFallback?: React.ReactNode;\r\n}\r\n\r\n// Higher-order component for lazy loading pages\r\nexport function withLazyLoading<P extends object>(\r\n  Component: ComponentType<P>,\r\n  fallback?: React.ReactNode\r\n) {\r\n  const LazyComponent = lazy(() => \r\n    Promise.resolve({ default: Component })\r\n  );\r\n\r\n  return function LazyPageWrapper(props: P & LazyPageWrapperProps) {\r\n    const { fallback: customFallback, errorFallback, ...componentProps } = props;\r\n    \r\n    const defaultFallback = fallback || customFallback || (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <LoadingSpinner size=\"lg\" text=\"Loading page...\" />\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <ErrorBoundary fallback={errorFallback}>\r\n        <Suspense fallback={defaultFallback}>\r\n          <LazyComponent {...(componentProps as P)} />\r\n        </Suspense>\r\n      </ErrorBoundary>\r\n    );\r\n  };\r\n}\r\n\r\n// Hook for lazy loading components\r\nexport function useLazyComponent<T extends ComponentType<any>>(\r\n  importFn: () => Promise<{ default: T }>,\r\n  fallback?: React.ReactNode\r\n) {\r\n  const [Component, setComponent] = React.useState<T | null>(null);\r\n  const [loading, setLoading] = React.useState(true);\r\n  const [error, setError] = React.useState<Error | null>(null);\r\n\r\n  React.useEffect(() => {\r\n    importFn()\r\n      .then((module) => {\r\n        setComponent(() => module.default);\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        setError(err);\r\n        setLoading(false);\r\n      });\r\n  }, [importFn]);\r\n\r\n  if (loading) {\r\n    return { Component: null, loading: true, error: null, fallback };\r\n  }\r\n\r\n  if (error) {\r\n    return { Component: null, loading: false, error, fallback };\r\n  }\r\n\r\n  return { Component, loading: false, error: null, fallback };\r\n}\r\n\r\n// Lazy page wrapper component\r\nexport function LazyPageWrapper({ \r\n  children, \r\n  fallback, \r\n  errorFallback \r\n}: LazyPageWrapperProps & { children: React.ReactNode }) {\r\n  const defaultFallback = fallback || (\r\n    <div className=\"flex items-center justify-center min-h-screen\">\r\n      <LoadingSpinner size=\"lg\" text=\"Loading page...\" />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <ErrorBoundary fallback={errorFallback}>\r\n      <Suspense fallback={defaultFallback}>\r\n        {children}\r\n      </Suspense>\r\n    </ErrorBoundary>\r\n  );\r\n}\r\n\r\n// Preload function for critical pages\r\nexport function preloadPage(importFn: () => Promise<any>) {\r\n  return importFn();\r\n}\r\n\r\n// Lazy page components with optimized loading\r\nexport const LazyDashboard = withLazyLoading(\r\n  lazy(() => import('@/app/dashboard/page')),\r\n  <div className=\"flex items-center justify-center min-h-screen\">\r\n    <LoadingSpinner size=\"lg\" text=\"Loading dashboard...\" />\r\n  </div>\r\n);\r\n\r\nexport const LazyShoppingLists = withLazyLoading(\r\n  lazy(() => import('@/app/shopping-lists/page')),\r\n  <div className=\"flex items-center justify-center min-h-screen\">\r\n    <LoadingSpinner size=\"lg\" text=\"Loading shopping lists...\" />\r\n  </div>\r\n);\r\n\r\nexport const LazyChores = withLazyLoading(\r\n  lazy(() => import('@/app/chores/page')),\r\n  <div className=\"flex items-center justify-center min-h-screen\">\r\n    <LoadingSpinner size=\"lg\" text=\"Loading chores...\" />\r\n  </div>\r\n);\r\n\r\nexport const LazyMealPlanner = withLazyLoading(\r\n  lazy(() => import('@/app/meal-planner/page')),\r\n  <div className=\"flex items-center justify-center min-h-screen\">\r\n    <LoadingSpinner size=\"lg\" text=\"Loading meal planner...\" />\r\n  </div>\r\n);\r\n\r\nexport const LazyRecipes = withLazyLoading(\r\n  lazy(() => import('@/app/recipes/page')),\r\n  <div className=\"flex items-center justify-center min-h-screen\">\r\n    <LoadingSpinner size=\"lg\" text=\"Loading recipes...\" />\r\n  </div>\r\n);\r\n\r\nexport const LazyCalendar = withLazyLoading(\r\n  lazy(() => import('@/app/calendar/page')),\r\n  <div className=\"flex items-center justify-center min-h-screen\">\r\n    <LoadingSpinner size=\"lg\" text=\"Loading calendar...\" />\r\n  </div>\r\n);\r\n\r\nexport const LazyBills = withLazyLoading(\r\n  lazy(() => import('@/app/bills/page')),\r\n  <div className=\"flex items-center justify-center min-h-screen\">\r\n    <LoadingSpinner size=\"lg\" text=\"Loading bills...\" />\r\n  </div>\r\n);\r\n\r\nexport const LazyRewards = withLazyLoading(\r\n  lazy(() => import('@/app/rewards/page')),\r\n  <div className=\"flex items-center justify-center min-h-screen\">\r\n    <LoadingSpinner size=\"lg\" text=\"Loading rewards...\" />\r\n  </div>\r\n);\r\n\r\n// Lazy component components\r\nexport const LazyPWAInstallPrompt = lazy(() => import('@/components/PWAInstallPrompt'));\r\nexport const LazyPWAStatus = lazy(() => import('@/components/PWAStatus'));\r\nexport const LazyPushNotificationSetup = lazy(() => import('@/components/PushNotificationSetup'));\r\nexport const LazyHeartbeatProvider = lazy(() => import('@/components/HeartbeatProvider'));\r\n\r\n// Lazy heavy components\r\nexport const LazyErrorBoundary = lazy(() => import('@/components/ErrorBoundary'));\r\nexport const LazyNavBar = lazy(() => import('@/components/NavBar'));\r\nexport const LazySyncUserClient = lazy(() => import('@/components/SyncUserClient'));\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\NavBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\NotificationPermission.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":73,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":73,"endColumn":20,"suggestions":[{"fix":{"range":[2261,2322],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useAuth } from '@clerk/nextjs';\r\n\r\nexport default function NotificationPermission() {\r\n  const [permission, setPermission] = useState<NotificationPermission>('default');\r\n  const [isSupported, setIsSupported] = useState(false);\r\n\r\n  const [showPrompt, setShowPrompt] = useState(false);\r\n  const { userId } = useAuth();\r\n\r\n  useEffect(() => {\r\n    // Check if notifications and service workers are supported\r\n    if ('Notification' in window && 'serviceWorker' in navigator && 'PushManager' in window) {\r\n      setIsSupported(true);\r\n      setPermission(Notification.permission);\r\n      \r\n      // Show prompt after delay if not granted and user is signed in\r\n      if (Notification.permission === 'default' && userId) {\r\n        const timer = setTimeout(() => {\r\n          setShowPrompt(true);\r\n        }, 15000); // Show after 15 seconds\r\n        \r\n        return () => clearTimeout(timer);\r\n      }\r\n    }\r\n    \r\n    // Return empty cleanup function for cases where no timer is set\r\n    return () => {};\r\n  }, [userId]);\r\n\r\n  const requestPermission = async () => {\r\n    if (!isSupported) return;\r\n\r\n    try {\r\n      const permission = await Notification.requestPermission();\r\n      setPermission(permission);\r\n      \r\n      if (permission === 'granted') {\r\n        await subscribeToNotifications();\r\n        setShowPrompt(false);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error requesting notification permission:', error);\r\n    }\r\n  };\r\n\r\n  const subscribeToNotifications = async () => {\r\n    if (!isSupported || !userId) return;\r\n\r\n    try {\r\n      const registration = await navigator.serviceWorker.ready;\r\n      \r\n      const subscription = await registration.pushManager.subscribe({\r\n        userVisibleOnly: true,\r\n        applicationServerKey: urlB64ToUint8Array(process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY!)\r\n      });\r\n\r\n      // Send subscription to server\r\n      const response = await fetch('/api/notifications/subscribe', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          subscription,\r\n          userId\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Successfully subscribed to push notifications');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error subscribing to notifications:', error);\r\n    }\r\n  };\r\n\r\n  const dismissPrompt = () => {\r\n    setShowPrompt(false);\r\n    // Don't show again for this session\r\n    sessionStorage.setItem('notification-prompt-dismissed', 'true');\r\n  };\r\n\r\n  // Don't show if not supported, already granted, or dismissed this session\r\n  if (!isSupported || \r\n      permission === 'granted' || \r\n      permission === 'denied' || \r\n      !showPrompt ||\r\n      sessionStorage.getItem('notification-prompt-dismissed')) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"fixed bottom-4 left-4 right-4 z-50 mx-auto max-w-sm\">\r\n      <div className=\"bg-white border border-gray-200 rounded-lg shadow-lg p-4\">\r\n        <div className=\"flex items-start space-x-3\">\r\n          <div className=\"flex-shrink-0\">\r\n            <div className=\"w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center\">\r\n              <span className=\"text-white text-xl\">🔔</span>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex-1 min-w-0\">\r\n            <h3 className=\"text-sm font-medium text-gray-900\">\r\n              Enable Notifications\r\n            </h3>\r\n            <p className=\"text-xs text-gray-500 mt-1\">\r\n              Get reminders for chores, meal planning, and household tasks!\r\n            </p>\r\n            <div className=\"mt-3 flex space-x-2\">\r\n              <button\r\n                onClick={requestPermission}\r\n                className=\"bg-blue-600 text-white px-3 py-1 rounded text-xs font-medium hover:bg-blue-700 transition-colors\"\r\n              >\r\n                Enable\r\n              </button>\r\n              <button\r\n                onClick={dismissPrompt}\r\n                className=\"bg-gray-100 text-gray-700 px-3 py-1 rounded text-xs font-medium hover:bg-gray-200 transition-colors\"\r\n              >\r\n                Not now\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <button\r\n            onClick={dismissPrompt}\r\n            className=\"flex-shrink-0 text-gray-400 hover:text-gray-600\"\r\n            aria-label=\"Close\"\r\n          >\r\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Helper function to convert VAPID key\r\nfunction urlB64ToUint8Array(base64String: string) {\r\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\r\n  const base64 = (base64String + padding)\r\n    .replace(/-/g, '+')\r\n    .replace(/_/g, '/');\r\n\r\n  const rawData = window.atob(base64);\r\n  const outputArray = new Uint8Array(rawData.length);\r\n\r\n  for (let i = 0; i < rawData.length; ++i) {\r\n    outputArray[i] = rawData.charCodeAt(i);\r\n  }\r\n  return outputArray;\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\NotificationSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\PWAInstallPrompt.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[905,908],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[905,908],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":72,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":72,"endColumn":18,"suggestions":[{"fix":{"range":[2175,2216],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":74,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":74,"endColumn":18,"suggestions":[{"fix":{"range":[2238,2280],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { usePWAPerformance } from '@/lib/performance';\r\n\r\ninterface BeforeInstallPromptEvent extends Event {\r\n  prompt(): Promise<void>;\r\n  userChoice: Promise<{\r\n    outcome: 'accepted' | 'dismissed';\r\n    platform: string;\r\n  }>;\r\n}\r\n\r\nexport default function PWAInstallPrompt() {\r\n  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);\r\n  const [showPrompt, setShowPrompt] = useState(false);\r\n  const [isInstalled, setIsInstalled] = useState(false);\r\n  const { trackInstall } = usePWAPerformance();\r\n\r\n  useEffect(() => {\r\n    // Check if app is already installed\r\n    const checkIfInstalled = () => {\r\n      if (window.matchMedia('(display-mode: standalone)').matches) {\r\n        setIsInstalled(true);\r\n      }\r\n      \r\n      // Check for iOS Safari standalone mode\r\n      if ((window.navigator as any).standalone === true) {\r\n        setIsInstalled(true);\r\n      }\r\n    };\r\n\r\n    checkIfInstalled();\r\n\r\n    // Listen for the beforeinstallprompt event\r\n    const handleBeforeInstallPrompt = (e: Event) => {\r\n      e.preventDefault();\r\n      setDeferredPrompt(e as BeforeInstallPromptEvent);\r\n      \r\n      // Show prompt after a delay to not be too aggressive\r\n      setTimeout(() => {\r\n        setShowPrompt(true);\r\n      }, 10000); // 10 seconds delay\r\n    };\r\n\r\n    // Listen for app installed event\r\n    const handleAppInstalled = () => {\r\n      setIsInstalled(true);\r\n      setShowPrompt(false);\r\n      setDeferredPrompt(null);\r\n    };\r\n\r\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\r\n    window.addEventListener('appinstalled', handleAppInstalled);\r\n\r\n    return () => {\r\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\r\n      window.removeEventListener('appinstalled', handleAppInstalled);\r\n    };\r\n  }, []);\r\n\r\n  const handleInstall = async () => {\r\n    if (!deferredPrompt) return;\r\n\r\n    deferredPrompt.prompt();\r\n    const { outcome } = await deferredPrompt.userChoice;\r\n    \r\n    // Track installation outcome\r\n    trackInstall(outcome);\r\n    \r\n    if (outcome === 'accepted') {\r\n      console.log('PWA installation accepted');\r\n    } else {\r\n      console.log('PWA installation dismissed');\r\n    }\r\n    \r\n    setDeferredPrompt(null);\r\n    setShowPrompt(false);\r\n  };\r\n\r\n  const handleDismiss = () => {\r\n    setShowPrompt(false);\r\n    // Don't show again for this session\r\n    sessionStorage.setItem('pwa-prompt-dismissed', 'true');\r\n  };\r\n\r\n  // Don't show if already installed or dismissed this session\r\n  if (isInstalled || !showPrompt || sessionStorage.getItem('pwa-prompt-dismissed')) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"fixed bottom-4 left-4 right-4 z-50 mx-auto max-w-sm\">\r\n      <div className=\"bg-white border border-gray-200 rounded-lg shadow-lg p-4\">\r\n        <div className=\"flex items-start space-x-3\">\r\n          <div className=\"flex-shrink-0\">\r\n            <div className=\"w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center\">\r\n              <span className=\"text-white text-xl\">🏠</span>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex-1 min-w-0\">\r\n            <h3 className=\"text-sm font-medium text-gray-900\">\r\n              Install Home Manager\r\n            </h3>\r\n            <p className=\"text-xs text-gray-500 mt-1\">\r\n              Get quick access and offline features by installing our app!\r\n            </p>\r\n            <div className=\"mt-3 flex space-x-2\">\r\n              <button\r\n                onClick={handleInstall}\r\n                className=\"bg-blue-600 text-white px-3 py-1 rounded text-xs font-medium hover:bg-blue-700 transition-colors\"\r\n              >\r\n                Install\r\n              </button>\r\n              <button\r\n                onClick={handleDismiss}\r\n                className=\"bg-gray-100 text-gray-700 px-3 py-1 rounded text-xs font-medium hover:bg-gray-200 transition-colors\"\r\n              >\r\n                Not now\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <button\r\n            onClick={handleDismiss}\r\n            className=\"flex-shrink-0 text-gray-400 hover:text-gray-600\"\r\n            aria-label=\"Close\"\r\n          >\r\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\PWAStatus.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":47,"column":45,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1494,1511],"text":"📱 You&apos;re offline"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1494,1511],"text":"📱 You&lsquo;re offline"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1494,1511],"text":"📱 You&#39;re offline"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1494,1511],"text":"📱 You&rsquo;re offline"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport default function PWAStatus() {\r\n  const [isOnline, setIsOnline] = useState(true);\r\n  const [updateAvailable, setUpdateAvailable] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Check online/offline status\r\n    const handleOnline = () => setIsOnline(true);\r\n    const handleOffline = () => setIsOnline(false);\r\n\r\n    setIsOnline(navigator.onLine);\r\n    window.addEventListener('online', handleOnline);\r\n    window.addEventListener('offline', handleOffline);\r\n\r\n    // Check for service worker updates\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.addEventListener('controllerchange', () => {\r\n        setUpdateAvailable(true);\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      window.removeEventListener('online', handleOnline);\r\n      window.removeEventListener('offline', handleOffline);\r\n    };\r\n  }, []);\r\n\r\n  const handleUpdate = () => {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.getRegistration().then(registration => {\r\n        if (registration && registration.waiting) {\r\n          registration.waiting.postMessage({ type: 'SKIP_WAITING' });\r\n          if (typeof window !== 'undefined') {\r\n          window.location.reload();\r\n        }\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  if (!isOnline) {\r\n    return (\r\n      <div className=\"fixed top-0 left-0 right-0 z-50 bg-yellow-500 text-white px-4 py-2 text-center text-sm\">\r\n        <span className=\"font-medium\">📱 You're offline</span>\r\n        <span className=\"ml-2\">Some features may be limited</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (updateAvailable) {\r\n    return (\r\n      <div className=\"fixed top-0 left-0 right-0 z-50 bg-blue-600 text-white px-4 py-2 text-center text-sm\">\r\n        <span className=\"font-medium\">🚀 Update available!</span>\r\n        <button\r\n          onClick={handleUpdate}\r\n          className=\"ml-2 underline hover:no-underline\"\r\n        >\r\n          Refresh to update\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ProBadge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\PushNotificationSetup.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":17,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":17,"endColumn":20,"suggestions":[{"fix":{"range":[556,604],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":23,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":23,"endColumn":20,"suggestions":[{"fix":{"range":[691,736],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":28,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":28,"endColumn":20,"suggestions":[{"fix":{"range":[872,941],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":32,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":32,"endColumn":20,"suggestions":[{"fix":{"range":[1047,1086],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":37,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":37,"endColumn":22,"suggestions":[{"fix":{"range":[1265,1321],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":43,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":43,"endColumn":22,"suggestions":[{"fix":{"range":[1473,1526],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":45,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":45,"endColumn":22,"suggestions":[{"fix":{"range":[1608,1660],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":48,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":48,"endColumn":24,"suggestions":[{"fix":{"range":[1729,1775],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":55,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":55,"endColumn":22,"suggestions":[{"fix":{"range":[1967,2012],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":63,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":63,"endColumn":22,"suggestions":[{"fix":{"range":[2280,2336],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":78,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":78,"endColumn":24,"suggestions":[{"fix":{"range":[2772,2835],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useEffect } from 'react';\r\nimport { useUser } from '@clerk/nextjs';\r\n\r\nconst VAPID_PUBLIC_KEY = process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY;\r\n\r\nexport default function PushNotificationSetup() {\r\n  const { user, isLoaded } = useUser();\r\n\r\n  useEffect(() => {\r\n    if (!isLoaded || !user) return;\r\n\r\n    const setupPushNotifications = async () => {\r\n      // Check if browser supports notifications and service workers\r\n      if (!('Notification' in window) || !('serviceWorker' in navigator) || !('PushManager' in window)) {\r\n        console.log('Push notifications not supported');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // Register service worker\r\n        console.log('Registering service worker...');\r\n        const registration = await navigator.serviceWorker.register('/sw.js', {\r\n          scope: '/'\r\n        });\r\n        \r\n        console.log('Service Worker registered successfully:', registration);\r\n\r\n        // Wait for service worker to be ready\r\n        await navigator.serviceWorker.ready;\r\n        console.log('Service Worker is ready');\r\n\r\n        // Check if already subscribed\r\n        const existingSubscription = await registration.pushManager.getSubscription();\r\n        if (existingSubscription) {\r\n          console.log('Already subscribed to push notifications');\r\n          return;\r\n        }\r\n\r\n        // Request notification permission if needed\r\n        if (Notification.permission === 'default') {\r\n          console.log('Requesting notification permission...');\r\n          const permission = await Notification.requestPermission();\r\n          console.log('Notification permission:', permission);\r\n          \r\n          if (permission !== 'granted') {\r\n            console.log('Notification permission denied');\r\n            return;\r\n          }\r\n        }\r\n\r\n        // Create push subscription if permission granted\r\n        if (Notification.permission === 'granted' && VAPID_PUBLIC_KEY) {\r\n          console.log('Creating push subscription...');\r\n          \r\n          const applicationServerKey = urlBase64ToUint8Array(VAPID_PUBLIC_KEY);\r\n          const subscription = await registration.pushManager.subscribe({\r\n            userVisibleOnly: true,\r\n            applicationServerKey,\r\n          });\r\n\r\n          console.log('Push subscription created:', subscription);\r\n\r\n          // Send subscription to server\r\n          const response = await fetch('/api/notifications/subscribe', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              subscription: subscription.toJSON(),\r\n              userId: user.id,\r\n            }),\r\n          });\r\n\r\n          if (response.ok) {\r\n            console.log('✅ Push subscription sent to server successfully');\r\n          } else {\r\n            console.error('❌ Failed to send subscription to server:', await response.text());\r\n          }\r\n        }\r\n\r\n      } catch (error) {\r\n        console.error('Error setting up push notifications:', error);\r\n      }\r\n    };\r\n\r\n    // Setup with a small delay to ensure everything is loaded\r\n    const timer = setTimeout(setupPushNotifications, 2000);\r\n    return () => clearTimeout(timer);\r\n  }, [isLoaded, user]);\r\n\r\n  return null; // This component doesn't render anything\r\n}\r\n\r\n// Helper function to convert VAPID key\r\nfunction urlBase64ToUint8Array(base64String: string): Uint8Array {\r\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\r\n  const base64 = (base64String + padding)\r\n    .replace(/\\-/g, '+')\r\n    .replace(/_/g, '/');\r\n\r\n  const rawData = window.atob(base64);\r\n  const outputArray = new Uint8Array(rawData.length);\r\n\r\n  for (let i = 0; i < rawData.length; ++i) {\r\n    outputArray[i] = rawData.charCodeAt(i);\r\n  }\r\n  return outputArray;\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\QueryProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\QuietHours.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Bell' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[932,935],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[932,935],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1142,1145],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1142,1145],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userData' is assigned a value but never used.","line":61,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadQuietHours'. Either include it or remove the dependency array.","line":82,"column":6,"nodeType":"ArrayExpression","endLine":82,"endColumn":40,"suggestions":[{"desc":"Update the dependencies array to be: [canAccessQuietHours, householdId, loadQuietHours]","fix":{"range":[2497,2531],"text":"[canAccessQuietHours, householdId, loadQuietHours]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":144,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":144,"endColumn":22,"suggestions":[{"fix":{"range":[4441,4525],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":266,"column":12,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":294,"endColumn":12,"fix":{"range":[8153,9434],"text":"status ? <div className=\"p-4 border rounded-lg bg-gray-50\">\r\n              <div className=\"flex items-center justify-between mb-2\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  {status.is_quiet_hours ? (\r\n                    <Moon className=\"h-5 w-5 text-blue-600\" />\r\n                  ) : (\r\n                    <Sun className=\"h-5 w-5 text-yellow-600\" />\r\n                  )}\r\n                  <span className=\"font-medium\">\r\n                    {status.is_quiet_hours ? 'Quiet Hours Active' : 'Quiet Hours Inactive'}\r\n                  </span>\r\n                </div>\r\n                <Badge variant={status.is_quiet_hours ? \"default\" : \"secondary\"}>\r\n                  {status.is_quiet_hours ? 'Silent' : 'Active'}\r\n                </Badge>\r\n              </div>\r\n              {status.formatted.time_range && (\r\n                <p className=\"text-sm text-gray-600\">\r\n                  {status.formatted.time_range} • {status.formatted.days_of_week}\r\n                </p>\r\n              )}\r\n              {status.next_change && (\r\n                <p className=\"text-sm text-gray-500 mt-1\">\r\n                  Next change: {status.formatted.next_change}\r\n                </p>\r\n              )}\r\n            </div> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":283,"column":16,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":287,"endColumn":16,"fix":{"range":[8988,9197],"text":"status.formatted.time_range ? <p className=\"text-sm text-gray-600\">\r\n                  {status.formatted.time_range} • {status.formatted.days_of_week}\r\n                </p> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":288,"column":16,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":292,"endColumn":16,"fix":{"range":[9215,9400],"text":"status.next_change ? <p className=\"text-sm text-gray-500 mt-1\">\r\n                  Next change: {status.formatted.next_change}\r\n                </p> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":314,"column":14,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":375,"endColumn":14,"fix":{"range":[10185,13068],"text":"settings.enabled ? <>\r\n                {/* Time Settings */}\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"start-time\">Start Time</Label>\r\n                    <Input\r\n                      id=\"start-time\"\r\n                      type=\"time\"\r\n                      value={settings.start_time}\r\n                      onChange={(e) => setSettings(prev => ({ ...prev, start_time: e.target.value }))}\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"end-time\">End Time</Label>\r\n                    <Input\r\n                      id=\"end-time\"\r\n                      type=\"time\"\r\n                      value={settings.end_time}\r\n                      onChange={(e) => setSettings(prev => ({ ...prev, end_time: e.target.value }))}\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Days of Week */}\r\n                <div className=\"space-y-3\">\r\n                  <Label className=\"text-base font-medium\">Days of Week</Label>\r\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\r\n                    {DAYS_OF_WEEK.map(day => (\r\n                      <div key={day.value} className=\"flex items-center space-x-2\">\r\n                        <Checkbox\r\n                          id={`day-${day.value}`}\r\n                          checked={settings.days_of_week.includes(day.value)}\r\n                          onCheckedChange={() => handleDayToggle(day.value)}\r\n                        />\r\n                        <Label \r\n                          htmlFor={`day-${day.value}`} \r\n                          className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n                        >\r\n                          {day.short}\r\n                        </Label>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Preview */}\r\n                <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\r\n                  <h4 className=\"font-medium text-blue-900 mb-2\">Preview</h4>\r\n                  <p className=\"text-sm text-blue-800\">\r\n                    Quiet hours will be active from <strong>{formatTime(settings.start_time)}</strong> to{' '}\r\n                    <strong>{formatTime(settings.end_time)}</strong> on{' '}\r\n                    <strong>\r\n                      {settings.days_of_week.length === 7 \r\n                        ? 'all days' \r\n                        : settings.days_of_week.map(d => DAYS_OF_WEEK[d].short).join(', ')\r\n                      }\r\n                    </strong>\r\n                  </p>\r\n                </div>\r\n              </> : null"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":4,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useUserData } from '@/hooks/useUserData';\r\nimport { canAccessFeature } from '@/lib/entitlements';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { \r\n  Bell, \r\n  BellOff, \r\n  Clock, \r\n  CheckCircle, \r\n  AlertCircle, \r\n  Settings,\r\n  Moon,\r\n  Sun\r\n} from 'lucide-react';\r\nimport { ErrorDisplay } from '@/components/ui/ErrorDisplay';\r\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner';\r\nimport { toast } from 'sonner';\r\n\r\ninterface QuietHoursProps {\r\n  householdId: string;\r\n  entitlements: any;\r\n}\r\n\r\ninterface QuietHoursSettings {\r\n  enabled: boolean;\r\n  start_time: string;\r\n  end_time: string;\r\n  days_of_week: number[];\r\n}\r\n\r\ninterface QuietHoursStatus {\r\n  is_quiet_hours: boolean;\r\n  settings: any;\r\n  next_change: string | null;\r\n  formatted: {\r\n    next_change: string | null;\r\n    days_of_week: string | null;\r\n    time_range: string | null;\r\n  };\r\n}\r\n\r\nconst DAYS_OF_WEEK = [\r\n  { value: 0, label: 'Sunday', short: 'Sun' },\r\n  { value: 1, label: 'Monday', short: 'Mon' },\r\n  { value: 2, label: 'Tuesday', short: 'Tue' },\r\n  { value: 3, label: 'Wednesday', short: 'Wed' },\r\n  { value: 4, label: 'Thursday', short: 'Thu' },\r\n  { value: 5, label: 'Friday', short: 'Fri' },\r\n  { value: 6, label: 'Saturday', short: 'Sat' },\r\n];\r\n\r\nexport default function QuietHours({ householdId, entitlements }: QuietHoursProps) {\r\n  const { userData } = useUserData();\r\n  const [settings, setSettings] = useState<QuietHoursSettings>({\r\n    enabled: false,\r\n    start_time: '22:00',\r\n    end_time: '07:00',\r\n    days_of_week: [0, 1, 2, 3, 4, 5, 6]\r\n  });\r\n  const [status, setStatus] = useState<QuietHoursStatus | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Check if user can access quiet hours (Pro feature)\r\n  const canAccessQuietHours = canAccessFeature(entitlements, 'quiet_hours');\r\n\r\n  useEffect(() => {\r\n    if (canAccessQuietHours) {\r\n      loadQuietHours();\r\n    } else {\r\n      setIsLoading(false);\r\n    }\r\n  }, [canAccessQuietHours, householdId]);\r\n\r\n  const loadQuietHours = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await fetch(`/api/quiet-hours?household_id=${householdId}`);\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        if (data.data.settings) {\r\n          setSettings({\r\n            enabled: data.data.settings.enabled,\r\n            start_time: data.data.settings.start_time,\r\n            end_time: data.data.settings.end_time,\r\n            days_of_week: data.data.settings.days_of_week\r\n          });\r\n        }\r\n        setStatus(data.data.status);\r\n      } else {\r\n        throw new Error(data.error || 'Failed to load quiet hours');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error loading quiet hours:', err);\r\n      setError(err instanceof Error ? err.message : 'Failed to load quiet hours');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    try {\r\n      setIsSaving(true);\r\n      setError(null);\r\n\r\n      // Retry mechanism for authentication issues\r\n      let response;\r\n      let data;\r\n      let retryCount = 0;\r\n      const maxRetries = 2;\r\n\r\n      while (retryCount <= maxRetries) {\r\n        response = await fetch('/api/quiet-hours', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            household_id: householdId,\r\n            ...settings\r\n          }),\r\n        });\r\n\r\n        data = await response.json();\r\n        \r\n        if (response.ok && data.success) {\r\n          toast.success('Quiet hours settings saved successfully!');\r\n          setStatus(data.status);\r\n          return; // Success, exit the retry loop\r\n        } else if (response.status === 401 && retryCount < maxRetries) {\r\n          // Authentication failed, wait a bit and retry\r\n          console.log(`Authentication failed, retrying... (${retryCount + 1}/${maxRetries})`);\r\n          await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second\r\n          retryCount++;\r\n        } else {\r\n          // Other error or max retries reached\r\n          break;\r\n        }\r\n      }\r\n      \r\n      // Handle final result\r\n      if (response.status === 401) {\r\n        toast.error('Authentication failed. Please refresh the page and try again.');\r\n        console.error('Authentication error after retries:', data);\r\n      } else {\r\n        toast.error(data.error || 'Failed to save quiet hours settings');\r\n        console.error('Save error:', data);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error saving quiet hours:', err);\r\n      toast.error('Failed to save quiet hours settings');\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n  const handleDayToggle = (dayValue: number) => {\r\n    setSettings(prev => ({\r\n      ...prev,\r\n      days_of_week: prev.days_of_week.includes(dayValue)\r\n        ? prev.days_of_week.filter(d => d !== dayValue)\r\n        : [...prev.days_of_week, dayValue]\r\n    }));\r\n  };\r\n\r\n  const formatTime = (time: string) => {\r\n    try {\r\n      const [hours, minutes] = time.split(':');\r\n      const hour = parseInt(hours);\r\n      const ampm = hour >= 12 ? 'PM' : 'AM';\r\n      const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;\r\n      return `${displayHour}:${minutes} ${ampm}`;\r\n    } catch {\r\n      return time;\r\n    }\r\n  };\r\n\r\n  if (!canAccessQuietHours) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <BellOff className=\"h-5 w-5\" />\r\n            Quiet Hours\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Manage notification quiet hours for your household\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"text-center py-8\">\r\n            <BellOff className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\r\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\r\n              Upgrade to Pro to unlock Quiet Hours\r\n            </h3>\r\n            <p className=\"text-gray-600 mb-4\">\r\n              Set quiet hours to automatically silence notifications during specific times.\r\n            </p>\r\n            <Button className=\"bg-green-600 hover:bg-green-700\">\r\n              Upgrade to Pro\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <BellOff className=\"h-5 w-5\" />\r\n            Quiet Hours\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <LoadingSpinner />\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <BellOff className=\"h-5 w-5\" />\r\n            Quiet Hours\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <ErrorDisplay error={error} />\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <BellOff className=\"h-5 w-5\" />\r\n            Quiet Hours\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Automatically silence notifications during specific times\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-6\">\r\n          {/* Current Status */}\r\n          {status && (\r\n            <div className=\"p-4 border rounded-lg bg-gray-50\">\r\n              <div className=\"flex items-center justify-between mb-2\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  {status.is_quiet_hours ? (\r\n                    <Moon className=\"h-5 w-5 text-blue-600\" />\r\n                  ) : (\r\n                    <Sun className=\"h-5 w-5 text-yellow-600\" />\r\n                  )}\r\n                  <span className=\"font-medium\">\r\n                    {status.is_quiet_hours ? 'Quiet Hours Active' : 'Quiet Hours Inactive'}\r\n                  </span>\r\n                </div>\r\n                <Badge variant={status.is_quiet_hours ? \"default\" : \"secondary\"}>\r\n                  {status.is_quiet_hours ? 'Silent' : 'Active'}\r\n                </Badge>\r\n              </div>\r\n              {status.formatted.time_range && (\r\n                <p className=\"text-sm text-gray-600\">\r\n                  {status.formatted.time_range} • {status.formatted.days_of_week}\r\n                </p>\r\n              )}\r\n              {status.next_change && (\r\n                <p className=\"text-sm text-gray-500 mt-1\">\r\n                  Next change: {status.formatted.next_change}\r\n                </p>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {/* Settings */}\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <Label htmlFor=\"quiet-hours-enabled\" className=\"text-base font-medium\">\r\n                  Enable Quiet Hours\r\n                </Label>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  Automatically silence notifications during specified times\r\n                </p>\r\n              </div>\r\n              <Switch\r\n                id=\"quiet-hours-enabled\"\r\n                checked={settings.enabled}\r\n                onCheckedChange={(checked) => setSettings(prev => ({ ...prev, enabled: checked }))}\r\n              />\r\n            </div>\r\n\r\n            {settings.enabled && (\r\n              <>\r\n                {/* Time Settings */}\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"start-time\">Start Time</Label>\r\n                    <Input\r\n                      id=\"start-time\"\r\n                      type=\"time\"\r\n                      value={settings.start_time}\r\n                      onChange={(e) => setSettings(prev => ({ ...prev, start_time: e.target.value }))}\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"end-time\">End Time</Label>\r\n                    <Input\r\n                      id=\"end-time\"\r\n                      type=\"time\"\r\n                      value={settings.end_time}\r\n                      onChange={(e) => setSettings(prev => ({ ...prev, end_time: e.target.value }))}\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Days of Week */}\r\n                <div className=\"space-y-3\">\r\n                  <Label className=\"text-base font-medium\">Days of Week</Label>\r\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\r\n                    {DAYS_OF_WEEK.map(day => (\r\n                      <div key={day.value} className=\"flex items-center space-x-2\">\r\n                        <Checkbox\r\n                          id={`day-${day.value}`}\r\n                          checked={settings.days_of_week.includes(day.value)}\r\n                          onCheckedChange={() => handleDayToggle(day.value)}\r\n                        />\r\n                        <Label \r\n                          htmlFor={`day-${day.value}`} \r\n                          className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n                        >\r\n                          {day.short}\r\n                        </Label>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Preview */}\r\n                <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\r\n                  <h4 className=\"font-medium text-blue-900 mb-2\">Preview</h4>\r\n                  <p className=\"text-sm text-blue-800\">\r\n                    Quiet hours will be active from <strong>{formatTime(settings.start_time)}</strong> to{' '}\r\n                    <strong>{formatTime(settings.end_time)}</strong> on{' '}\r\n                    <strong>\r\n                      {settings.days_of_week.length === 7 \r\n                        ? 'all days' \r\n                        : settings.days_of_week.map(d => DAYS_OF_WEEK[d].short).join(', ')\r\n                      }\r\n                    </strong>\r\n                  </p>\r\n                </div>\r\n              </>\r\n            )}\r\n\r\n            {/* Save Button */}\r\n            <div className=\"flex justify-end\">\r\n              <Button \r\n                onClick={handleSave}\r\n                disabled={isSaving || !settings.enabled || settings.days_of_week.length === 0}\r\n                className=\"bg-blue-600 hover:bg-blue-700\"\r\n              >\r\n                {isSaving ? (\r\n                  <LoadingSpinner />\r\n                ) : (\r\n                  <Settings className=\"h-4 w-4 mr-2\" />\r\n                )}\r\n                Save Settings\r\n              </Button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Info Notice */}\r\n          <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\r\n            <div className=\"flex items-start gap-2\">\r\n              <AlertCircle className=\"h-5 w-5 text-yellow-600 mt-0.5\" />\r\n              <div className=\"text-sm text-yellow-800\">\r\n                <p className=\"font-medium mb-1\">How Quiet Hours Work</p>\r\n                <p>\r\n                  When quiet hours are active, notifications will be automatically silenced. \r\n                  This applies to push notifications, email alerts, and other household notifications.\r\n                  You can still access the app normally during quiet hours.\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\SyncUserClient.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":11,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":11,"endColumn":18,"suggestions":[{"fix":{"range":[222,276],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":17,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":17,"endColumn":22,"suggestions":[{"fix":{"range":[417,457],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { useAuth } from \"@clerk/nextjs\";\r\n\r\nexport function SyncUserClient() {\r\n  const { isSignedIn } = useAuth();\r\n\r\n  useEffect(() => {\r\n    if (isSignedIn) {\r\n      console.log('User signed in, syncing to database...');\r\n      fetch(\"/api/sync-user\", {\r\n        method: \"POST\",\r\n      })\r\n      .then(async response => {\r\n        if (response.ok) {\r\n          console.log('User synced successfully');\r\n        } else {\r\n          console.error('Failed to sync user:', response.status, response.statusText);\r\n          // Try to get error details\r\n          try {\r\n            const errorText = await response.text();\r\n            console.error('Response body:', errorText);\r\n          } catch {\r\n            console.error('Could not read response body');\r\n          }\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error syncing user:', error);\r\n      });\r\n    }\r\n  }, [isSignedIn]);\r\n\r\n  return null;\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\TestSyncButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\TodayView.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSameDay' is defined but never used.","line":24,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":98,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":98,"endColumn":15},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchTodayData'. Either include it or remove the dependency array.","line":106,"column":6,"nodeType":"ArrayExpression","endLine":106,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [currentDate, fetchTodayData]","fix":{"range":[2623,2636],"text":"[currentDate, fetchTodayData]"}}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":171,"column":63,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4664,4691],"text":"Loading today&apos;s overview..."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4664,4691],"text":"Loading today&lsquo;s overview..."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4664,4691],"text":"Loading today&#39;s overview..."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4664,4691],"text":"Loading today&rsquo;s overview..."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":206,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5735,5751],"text":"Today&apos;s Overview"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5735,5751],"text":"Today&lsquo;s Overview"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5735,5751],"text":"Today&#39;s Overview"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5735,5751],"text":"Today&rsquo;s Overview"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":269,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8645,8689],"text":"\r\n              Today&apos;s Chores\r\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8645,8689],"text":"\r\n              Today&lsquo;s Chores\r\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8645,8689],"text":"\r\n              Today&#39;s Chores\r\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8645,8689],"text":"\r\n              Today&rsquo;s Chores\r\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":299,"column":24,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":304,"endColumn":24,"fix":{"range":[10032,10314],"text":"chore.estimated_duration ? <p className=\"text-xs text-muted-foreground\">\r\n                          <Clock className=\"h-3 w-3 inline mr-1\" />\r\n                          {chore.estimated_duration} min\r\n                        </p> : null"}},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":331,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[11317,11361],"text":"\r\n              Today&apos;s Events\r\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[11317,11361],"text":"\r\n              Today&lsquo;s Events\r\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[11317,11361],"text":"\r\n              Today&#39;s Events\r\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[11317,11361],"text":"\r\n              Today&rsquo;s Events\r\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":355,"column":24,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":357,"endColumn":24,"fix":{"range":[12394,12526],"text":"event.isAllDay ? <Badge variant=\"secondary\" className=\"text-xs\">All day</Badge> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":363,"column":26,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":365,"endColumn":26,"fix":{"range":[12836,12975],"text":"!event.isAllDay && event.endAt ? <> - {format(new Date(event.endAt), 'h:mm a')}</> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":367,"column":24,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":372,"endColumn":24,"fix":{"range":[13029,13288],"text":"event.location ? <p className=\"text-xs text-muted-foreground\">\r\n                          <MapPin className=\"h-3 w-3 inline mr-1\" />\r\n                          {event.location}\r\n                        </p> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":373,"column":24,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":378,"endColumn":24,"fix":{"range":[13314,13661],"text":"event.attendees && event.attendees.length > 0 ? <p className=\"text-xs text-muted-foreground\">\r\n                          <Users className=\"h-3 w-3 inline mr-1\" />\r\n                          {event.attendees.length} attendee{event.attendees.length !== 1 ? 's' : ''}\r\n                        </p> : null"}},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":401,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[14419,14462],"text":"\r\n              Today&apos;s Meals\r\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[14419,14462],"text":"\r\n              Today&lsquo;s Meals\r\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[14419,14462],"text":"\r\n              Today&#39;s Meals\r\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[14419,14462],"text":"\r\n              Today&rsquo;s Meals\r\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":427,"column":26,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":431,"endColumn":26,"fix":{"range":[15650,15857],"text":"meal.recipe_name ? <Badge variant=\"secondary\" className=\"text-xs\">\r\n                            {meal.recipe_name}\r\n                          </Badge> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":433,"column":24,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":437,"endColumn":24,"fix":{"range":[15913,16218],"text":"meal.ingredients_needed && meal.ingredients_needed.length > 0 ? <p className=\"text-xs text-muted-foreground\">\r\n                          {meal.ingredients_needed.filter(ing => !ing.is_available).length} missing ingredients\r\n                        </p> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":477,"column":22,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":481,"endColumn":22,"fix":{"range":[17872,18055],"text":"item.quantity ? <Badge variant=\"outline\" className=\"text-xs\">\r\n                        {item.quantity}\r\n                      </Badge> : null"}},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":486,"column":26,"nodeType":"TemplateLiteral","messageId":"noArrayIndex","endLine":486,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":8,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useUser } from '@clerk/nextjs';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { \r\n  Calendar, \r\n  CheckCircle2, \r\n  Clock, \r\n  MapPin, \r\n  Users, \r\n  ShoppingCart, \r\n  ChefHat, \r\n  Star,\r\n  TrendingUp,\r\n  AlertCircle,\r\n  Plus,\r\n  ChevronLeft,\r\n  ChevronRight\r\n} from 'lucide-react';\r\nimport { format, addDays, subDays, isToday, isSameDay } from 'date-fns';\r\nimport Link from 'next/link';\r\n\r\ninterface TodayViewData {\r\n  date: string;\r\n  chores: Array<{\r\n    id: string;\r\n    title: string;\r\n    description?: string;\r\n    assigned_to?: string;\r\n    due_date?: string;\r\n    priority: 'low' | 'medium' | 'high';\r\n    status: 'pending' | 'in_progress' | 'completed';\r\n    xp_reward: number;\r\n    estimated_duration?: number;\r\n  }>;\r\n  events: Array<{\r\n    id: string;\r\n    title: string;\r\n    description?: string;\r\n    startAt: string;\r\n    endAt: string;\r\n    isAllDay: boolean;\r\n    location?: string;\r\n    attendees?: Array<{\r\n      email?: string;\r\n      status: string;\r\n    }>;\r\n    reminders?: Array<{\r\n      minutesBefore: number;\r\n      method: string;\r\n    }>;\r\n  }>;\r\n  meals: Array<{\r\n    id: string;\r\n    meal_type: 'breakfast' | 'lunch' | 'dinner' | 'snack';\r\n    recipe_name?: string;\r\n    planned_for: string;\r\n    assigned_to?: string;\r\n    ingredients_needed: Array<{\r\n      name: string;\r\n      quantity: string;\r\n      unit: string;\r\n      is_available: boolean;\r\n    }>;\r\n  }>;\r\n  shopping: {\r\n    urgent_items: Array<{\r\n      id: string;\r\n      name: string;\r\n      quantity?: string;\r\n      notes?: string;\r\n      is_complete: boolean;\r\n      list_name: string;\r\n    }>;\r\n    missing_ingredients: Array<{\r\n      ingredient_name: string;\r\n      meal_name: string;\r\n      meal_type: string;\r\n      quantity_needed: string;\r\n    }>;\r\n  };\r\n  digest: {\r\n    total_chores: number;\r\n    completed_chores: number;\r\n    upcoming_events: number;\r\n    meals_planned: number;\r\n    shopping_items_needed: number;\r\n    xp_earned_today: number;\r\n    xp_available_today: number;\r\n  };\r\n}\r\n\r\nexport default function TodayView() {\r\n  const { user } = useUser();\r\n  const [data, setData] = useState<TodayViewData | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    fetchTodayData();\r\n  }, [currentDate]);\r\n\r\n  const fetchTodayData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(`/api/today-view?date=${currentDate.toISOString()}`);\r\n      if (response.ok) {\r\n        const todayData = await response.json();\r\n        setData(todayData);\r\n      } else {\r\n        setError('Failed to fetch today\\'s data');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching today data:', error);\r\n      setError('Failed to fetch today\\'s data');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handlePreviousDay = () => {\r\n    setCurrentDate(subDays(currentDate, 1));\r\n  };\r\n\r\n  const handleNextDay = () => {\r\n    setCurrentDate(addDays(currentDate, 1));\r\n  };\r\n\r\n  const handleGoToToday = () => {\r\n    setCurrentDate(new Date());\r\n  };\r\n\r\n  const getPriorityColor = (priority: string) => {\r\n    switch (priority) {\r\n      case 'high': return 'bg-red-100 text-red-800';\r\n      case 'medium': return 'bg-yellow-100 text-yellow-800';\r\n      case 'low': return 'bg-green-100 text-green-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'completed': return <CheckCircle2 className=\"h-4 w-4 text-green-500\" />;\r\n      case 'in_progress': return <Clock className=\"h-4 w-4 text-blue-500\" />;\r\n      default: return <AlertCircle className=\"h-4 w-4 text-gray-500\" />;\r\n    }\r\n  };\r\n\r\n  const getMealTypeIcon = (mealType: string) => {\r\n    switch (mealType) {\r\n      case 'breakfast': return '🌅';\r\n      case 'lunch': return '🌞';\r\n      case 'dinner': return '🌙';\r\n      case 'snack': return '🍎';\r\n      default: return '🍽️';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container mx-auto p-6\">\r\n        <div className=\"flex items-center justify-center h-64\">\r\n          <div className=\"text-center\">\r\n            <Calendar className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground animate-spin\" />\r\n            <p className=\"text-muted-foreground\">Loading today's overview...</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error || !data) {\r\n    return (\r\n      <div className=\"container mx-auto p-6\">\r\n        <Card>\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"text-center\">\r\n              <AlertCircle className=\"h-12 w-12 mx-auto mb-4 text-destructive\" />\r\n              <h3 className=\"text-lg font-semibold mb-2\">Error Loading Today View</h3>\r\n              <p className=\"text-muted-foreground mb-4\">{error}</p>\r\n              <Button onClick={fetchTodayData}>\r\n                Try Again\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const completionPercentage = data.digest.total_chores > 0 \r\n    ? (data.digest.completed_chores / data.digest.total_chores) * 100 \r\n    : 100;\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-6 space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold\">Today's Overview</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            {isToday(currentDate) ? 'Here\\'s what\\'s happening today' : `Overview for ${format(currentDate, 'MMMM d, yyyy')}`}\r\n          </p>\r\n        </div>\r\n        <div className=\"flex items-center gap-2\">\r\n          <Button variant=\"outline\" size=\"sm\" onClick={handlePreviousDay}>\r\n            <ChevronLeft className=\"h-4 w-4\" />\r\n          </Button>\r\n          <Button variant=\"outline\" size=\"sm\" onClick={handleGoToToday}>\r\n            Today\r\n          </Button>\r\n          <Button variant=\"outline\" size=\"sm\" onClick={handleNextDay}>\r\n            <ChevronRight className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Digest Stats */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <TrendingUp className=\"h-5 w-5\" />\r\n            Daily Progress\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-blue-600\">{data.digest.completed_chores}</div>\r\n              <div className=\"text-sm text-muted-foreground\">Chores Done</div>\r\n              <div className=\"text-xs text-muted-foreground\">of {data.digest.total_chores}</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-green-600\">{data.digest.upcoming_events}</div>\r\n              <div className=\"text-sm text-muted-foreground\">Events Today</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-orange-600\">{data.digest.meals_planned}</div>\r\n              <div className=\"text-sm text-muted-foreground\">Meals Planned</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-purple-600\">{data.digest.xp_earned_today}</div>\r\n              <div className=\"text-sm text-muted-foreground\">XP Earned</div>\r\n              <div className=\"text-xs text-muted-foreground\">of {data.digest.xp_available_today}</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex justify-between text-sm\">\r\n              <span>Task Completion</span>\r\n              <span>{Math.round(completionPercentage)}%</span>\r\n            </div>\r\n            <Progress value={completionPercentage} className=\"h-2\" />\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        {/* Chores */}\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between\">\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <CheckCircle2 className=\"h-5 w-5\" />\r\n              Today's Chores\r\n            </CardTitle>\r\n            <Link href=\"/chores\">\r\n              <Button variant=\"outline\" size=\"sm\">\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                Add\r\n              </Button>\r\n            </Link>\r\n          </CardHeader>\r\n          <CardContent>\r\n            {data.chores.length === 0 ? (\r\n              <div className=\"text-center py-8\">\r\n                <CheckCircle2 className=\"h-12 w-12 mx-auto mb-4 text-green-500\" />\r\n                <p className=\"text-muted-foreground\">No chores scheduled for today!</p>\r\n              </div>\r\n            ) : (\r\n              <div className=\"space-y-3\">\r\n                {data.chores.slice(0, 5).map((chore) => (\r\n                  <div\r\n                    key={chore.id}\r\n                    className=\"flex items-center gap-3 p-3 border rounded-lg hover:bg-muted/50 transition-colors\"\r\n                  >\r\n                    {getStatusIcon(chore.status)}\r\n                    <div className=\"flex-1\">\r\n                      <div className=\"flex items-center gap-2 mb-1\">\r\n                        <h4 className=\"font-medium text-sm\">{chore.title}</h4>\r\n                        <Badge className={`text-xs ${getPriorityColor(chore.priority)}`}>\r\n                          {chore.priority}\r\n                        </Badge>\r\n                      </div>\r\n                      {chore.estimated_duration && (\r\n                        <p className=\"text-xs text-muted-foreground\">\r\n                          <Clock className=\"h-3 w-3 inline mr-1\" />\r\n                          {chore.estimated_duration} min\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                    <div className=\"flex items-center gap-1\">\r\n                      <Star className=\"h-4 w-4 text-yellow-500\" />\r\n                      <span className=\"text-sm font-medium\">{chore.xp_reward}</span>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n                {data.chores.length > 5 && (\r\n                  <div className=\"text-center pt-2\">\r\n                    <Link href=\"/chores\">\r\n                      <Button variant=\"ghost\" size=\"sm\">\r\n                        View all {data.chores.length} chores\r\n                      </Button>\r\n                    </Link>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Events */}\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between\">\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Calendar className=\"h-5 w-5\" />\r\n              Today's Events\r\n            </CardTitle>\r\n            <Link href=\"/calendar\">\r\n              <Button variant=\"outline\" size=\"sm\">\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                Add\r\n              </Button>\r\n            </Link>\r\n          </CardHeader>\r\n          <CardContent>\r\n            {data.events.length === 0 ? (\r\n              <div className=\"text-center py-8\">\r\n                <Calendar className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\r\n                <p className=\"text-muted-foreground\">No events scheduled for today!</p>\r\n              </div>\r\n            ) : (\r\n              <div className=\"space-y-3\">\r\n                {data.events.slice(0, 5).map((event) => (\r\n                  <div\r\n                    key={event.id}\r\n                    className=\"p-3 border rounded-lg hover:bg-muted/50 transition-colors\"\r\n                  >\r\n                    <div className=\"flex items-start justify-between mb-2\">\r\n                      <h4 className=\"font-medium text-sm\">{event.title}</h4>\r\n                      {event.isAllDay && (\r\n                        <Badge variant=\"secondary\" className=\"text-xs\">All day</Badge>\r\n                      )}\r\n                    </div>\r\n                    <div className=\"space-y-1\">\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        <Clock className=\"h-3 w-3 inline mr-1\" />\r\n                        {format(new Date(event.startAt), 'h:mm a')}\r\n                        {!event.isAllDay && event.endAt && (\r\n                          <> - {format(new Date(event.endAt), 'h:mm a')}</>\r\n                        )}\r\n                      </p>\r\n                      {event.location && (\r\n                        <p className=\"text-xs text-muted-foreground\">\r\n                          <MapPin className=\"h-3 w-3 inline mr-1\" />\r\n                          {event.location}\r\n                        </p>\r\n                      )}\r\n                      {event.attendees && event.attendees.length > 0 && (\r\n                        <p className=\"text-xs text-muted-foreground\">\r\n                          <Users className=\"h-3 w-3 inline mr-1\" />\r\n                          {event.attendees.length} attendee{event.attendees.length !== 1 ? 's' : ''}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n                {data.events.length > 5 && (\r\n                  <div className=\"text-center pt-2\">\r\n                    <Link href=\"/calendar\">\r\n                      <Button variant=\"ghost\" size=\"sm\">\r\n                        View all {data.events.length} events\r\n                      </Button>\r\n                    </Link>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Meals */}\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between\">\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <ChefHat className=\"h-5 w-5\" />\r\n              Today's Meals\r\n            </CardTitle>\r\n            <Link href=\"/meal-planner\">\r\n              <Button variant=\"outline\" size=\"sm\">\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                Plan\r\n              </Button>\r\n            </Link>\r\n          </CardHeader>\r\n          <CardContent>\r\n            {data.meals.length === 0 ? (\r\n              <div className=\"text-center py-8\">\r\n                <ChefHat className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\r\n                <p className=\"text-muted-foreground\">No meals planned for today!</p>\r\n              </div>\r\n            ) : (\r\n              <div className=\"space-y-3\">\r\n                {data.meals.map((meal) => (\r\n                  <div\r\n                    key={meal.id}\r\n                    className=\"flex items-center gap-3 p-3 border rounded-lg hover:bg-muted/50 transition-colors\"\r\n                  >\r\n                    <span className=\"text-2xl\">{getMealTypeIcon(meal.meal_type)}</span>\r\n                    <div className=\"flex-1\">\r\n                      <div className=\"flex items-center gap-2 mb-1\">\r\n                        <h4 className=\"font-medium text-sm capitalize\">{meal.meal_type}</h4>\r\n                        {meal.recipe_name && (\r\n                          <Badge variant=\"secondary\" className=\"text-xs\">\r\n                            {meal.recipe_name}\r\n                          </Badge>\r\n                        )}\r\n                      </div>\r\n                      {meal.ingredients_needed && meal.ingredients_needed.length > 0 && (\r\n                        <p className=\"text-xs text-muted-foreground\">\r\n                          {meal.ingredients_needed.filter(ing => !ing.is_available).length} missing ingredients\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Shopping */}\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between\">\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <ShoppingCart className=\"h-5 w-5\" />\r\n              Shopping Needs\r\n            </CardTitle>\r\n            <Link href=\"/shopping-lists\">\r\n              <Button variant=\"outline\" size=\"sm\">\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                Add\r\n              </Button>\r\n            </Link>\r\n          </CardHeader>\r\n          <CardContent>\r\n            {data.shopping.urgent_items.length === 0 && data.shopping.missing_ingredients.length === 0 ? (\r\n              <div className=\"text-center py-8\">\r\n                <ShoppingCart className=\"h-12 w-12 mx-auto mb-4 text-green-500\" />\r\n                <p className=\"text-muted-foreground\">All shopping needs covered!</p>\r\n              </div>\r\n            ) : (\r\n              <div className=\"space-y-3\">\r\n                {data.shopping.urgent_items.slice(0, 3).map((item) => (\r\n                  <div\r\n                    key={item.id}\r\n                    className=\"flex items-center gap-3 p-3 border rounded-lg hover:bg-muted/50 transition-colors\"\r\n                  >\r\n                    <div className=\"flex-1\">\r\n                      <h4 className=\"font-medium text-sm\">{item.name}</h4>\r\n                      <p className=\"text-xs text-muted-foreground\">{item.list_name}</p>\r\n                    </div>\r\n                    {item.quantity && (\r\n                      <Badge variant=\"outline\" className=\"text-xs\">\r\n                        {item.quantity}\r\n                      </Badge>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n                {data.shopping.missing_ingredients.slice(0, 3).map((ingredient, index) => (\r\n                  <div\r\n                    key={`missing-${index}`}\r\n                    className=\"flex items-center gap-3 p-3 border rounded-lg bg-orange-50 hover:bg-orange-100 transition-colors\"\r\n                  >\r\n                    <AlertCircle className=\"h-4 w-4 text-orange-500\" />\r\n                    <div className=\"flex-1\">\r\n                      <h4 className=\"font-medium text-sm\">{ingredient.ingredient_name}</h4>\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        For {ingredient.meal_name} ({ingredient.meal_type})\r\n                      </p>\r\n                    </div>\r\n                    <Badge variant=\"outline\" className=\"text-xs text-orange-600\">\r\n                      {ingredient.quantity_needed}\r\n                    </Badge>\r\n                  </div>\r\n                ))}\r\n                {(data.shopping.urgent_items.length > 3 || data.shopping.missing_ingredients.length > 3) && (\r\n                  <div className=\"text-center pt-2\">\r\n                    <Link href=\"/shopping-lists\">\r\n                      <Button variant=\"ghost\" size=\"sm\">\r\n                        View all shopping needs\r\n                      </Button>\r\n                    </Link>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\UpgradeModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ai\\BatchProcessingDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ai\\CorrectionModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[655,658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[655,658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1215,1218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1215,1218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":47,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":47,"endColumn":14,"suggestions":[{"fix":{"range":[1633,1715],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":53,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":53,"endColumn":57},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":74,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":74,"endColumn":60},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":120,"column":18,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":129,"endColumn":18,"fix":{"range":[4298,4780],"text":"suggestion.parsed_item ? <>\r\n                    <Badge variant={suggestion.parsed_item.review_status === 'auto_approved' ? 'default' : 'destructive'}>\r\n                      {suggestion.parsed_item.review_status}\r\n                    </Badge>\r\n                    <Badge variant=\"secondary\">\r\n                      {(suggestion.parsed_item.confidence_score * 100).toFixed(0)}% confidence\r\n                    </Badge>\r\n                  </> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":137,"column":16,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":144,"endColumn":16,"fix":{"range":[5030,5385],"text":"suggestion.suggestion_data ? <div className=\"text-sm\">\r\n                  <strong>Extracted Data:</strong>\r\n                  <pre className=\"text-xs bg-white p-2 rounded mt-1 overflow-x-auto\">\r\n                    {JSON.stringify(suggestion.suggestion_data, null, 2)}\r\n                  </pre>\r\n                </div> : null"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5648,5651],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5648,5651],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":2,"source":"'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from '@/components/ui/dialog';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { CheckCircle, XCircle, Edit3, MessageSquare } from 'lucide-react';\r\n\r\nexport interface AISuggestion {\r\n  id: string;\r\n  suggestion_type: string;\r\n  suggestion_data: any;\r\n  ai_reasoning: string;\r\n  user_feedback: string;\r\n  created_at: string;\r\n  parsed_item?: {\r\n    item_type: string;\r\n    confidence_score: number;\r\n    review_status: string;\r\n    review_reason: string;\r\n  };\r\n}\r\n\r\nexport interface CorrectionModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  suggestion: AISuggestion | null;\r\n  onSaveCorrection: (correction: CorrectionData) => Promise<void>;\r\n}\r\n\r\nexport interface CorrectionData {\r\n  suggestionId: string;\r\n  correctionType: 'correct' | 'mark_done' | 'ignore' | 'custom';\r\n  correctionData?: any;\r\n  userNotes: string;\r\n}\r\n\r\nexport function CorrectionModal({ isOpen, onClose, suggestion, onSaveCorrection }: CorrectionModalProps) {\r\n  const [correctionType, setCorrectionType] = useState<'correct' | 'mark_done' | 'ignore' | 'custom'>('correct');\r\n  const [userNotes, setUserNotes] = useState('');\r\n  const [customData, setCustomData] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  console.log('🔍 CorrectionModal render:', { isOpen, suggestion: suggestion?.id });\r\n\r\n  if (!suggestion) return null;\r\n\r\n  const handleSave = async () => {\r\n    if (!userNotes.trim()) {\r\n      alert('Please provide notes about the correction');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      const correctionData: CorrectionData = {\r\n        suggestionId: suggestion.id,\r\n        correctionType,\r\n        userNotes: userNotes.trim(),\r\n        ...(correctionType === 'custom' && customData && { correctionData: JSON.parse(customData) })\r\n      };\r\n\r\n      await onSaveCorrection(correctionData);\r\n      onClose();\r\n      // Reset form\r\n      setCorrectionType('correct');\r\n      setUserNotes('');\r\n      setCustomData('');\r\n    } catch (error) {\r\n      console.error('Failed to save correction:', error);\r\n      alert('Failed to save correction. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const getCorrectionTypeDescription = (type: string) => {\r\n    switch (type) {\r\n      case 'correct': return 'Fix incorrect information';\r\n      case 'mark_done': return 'Mark as completed';\r\n      case 'ignore': return 'Ignore this suggestion';\r\n      case 'custom': return 'Provide custom correction';\r\n      default: return '';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onClose}>\r\n      <DialogContent \r\n        className=\"max-w-2xl max-h-[90vh] overflow-y-auto z-50 relative bg-white\"\r\n        style={{ \r\n          position: 'fixed', \r\n          top: '50%', \r\n          left: '50%', \r\n          transform: 'translate(-50%, -50%)',\r\n          backgroundColor: 'white',\r\n          boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)'\r\n        }}\r\n      >\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center gap-2\">\r\n            <MessageSquare className=\"w-5 h-5\" />\r\n            AI Suggestion Correction\r\n          </DialogTitle>\r\n          <DialogDescription className=\"text-sm text-gray-800 font-medium\">\r\n            Modal for correcting AI suggestions with options to fix information, mark as done, ignore, or provide custom corrections.\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n\r\n        <div className=\"space-y-6\">\r\n          {/* Original Suggestion Display */}\r\n          <div className=\"bg-gray-50 p-4 rounded-lg\">\r\n            <h3 className=\"font-semibold text-sm text-gray-700 mb-2\">Original Suggestion</h3>\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <Badge variant=\"outline\">{suggestion.suggestion_type}</Badge>\r\n                {suggestion.parsed_item && (\r\n                  <>\r\n                    <Badge variant={suggestion.parsed_item.review_status === 'auto_approved' ? 'default' : 'destructive'}>\r\n                      {suggestion.parsed_item.review_status}\r\n                    </Badge>\r\n                    <Badge variant=\"secondary\">\r\n                      {(suggestion.parsed_item.confidence_score * 100).toFixed(0)}% confidence\r\n                    </Badge>\r\n                  </>\r\n                )}\r\n              </div>\r\n              \r\n              <div className=\"text-sm\">\r\n                <strong>AI Reasoning:</strong>\r\n                <p className=\"text-gray-600 mt-1\">{suggestion.ai_reasoning}</p>\r\n              </div>\r\n\r\n              {suggestion.suggestion_data && (\r\n                <div className=\"text-sm\">\r\n                  <strong>Extracted Data:</strong>\r\n                  <pre className=\"text-xs bg-white p-2 rounded mt-1 overflow-x-auto\">\r\n                    {JSON.stringify(suggestion.suggestion_data, null, 2)}\r\n                  </pre>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Correction Type Selection */}\r\n          <div className=\"space-y-3\">\r\n            <Label htmlFor=\"correction-type\">Correction Type</Label>\r\n            <Select value={correctionType} onValueChange={(value: any) => setCorrectionType(value)}>\r\n              <SelectTrigger>\r\n                <SelectValue />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"correct\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Edit3 className=\"w-4 h-4\" />\r\n                    <span>Correct Information</span>\r\n                  </div>\r\n                </SelectItem>\r\n                <SelectItem value=\"mark_done\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <CheckCircle className=\"w-4 h-4\" />\r\n                    <span>Mark as Done</span>\r\n                  </div>\r\n                </SelectItem>\r\n                <SelectItem value=\"ignore\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <XCircle className=\"w-4 h-4\" />\r\n                    <span>Ignore Suggestion</span>\r\n                  </div>\r\n                </SelectItem>\r\n                <SelectItem value=\"custom\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <MessageSquare className=\"w-4 h-4\" />\r\n                    <span>Custom Correction</span>\r\n                  </div>\r\n                </SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n            \r\n            <p className=\"text-sm text-gray-800 font-medium\">\r\n              {getCorrectionTypeDescription(correctionType)}\r\n            </p>\r\n          </div>\r\n\r\n          {/* Custom Data Input (for custom corrections) */}\r\n          {correctionType === 'custom' && (\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"custom-data\">Custom Correction Data (JSON)</Label>\r\n                             <Textarea\r\n                 id=\"custom-data\"\r\n                 placeholder='{\"corrected_field\": \"new_value\"}'\r\n                 value={customData}\r\n                 onChange={(e) => setCustomData(e.target.value)}\r\n                 className=\"font-mono text-sm text-gray-900 border-gray-300 focus:border-blue-500 focus:ring-blue-500\"\r\n                 rows={3}\r\n               />\r\n                             <p className=\"text-xs text-gray-700 font-medium\">\r\n                 Enter valid JSON with the corrected information\r\n               </p>\r\n            </div>\r\n          )}\r\n\r\n          {/* User Notes */}\r\n          <div className=\"space-y-2\">\r\n            <Label htmlFor=\"user-notes\">\r\n              Notes about the correction *\r\n            </Label>\r\n                         <Textarea\r\n               id=\"user-notes\"\r\n               placeholder=\"Explain what was wrong and how it should be corrected...\"\r\n               value={userNotes}\r\n               onChange={(e) => setUserNotes(e.target.value)}\r\n               className=\"text-gray-900 border-gray-300 focus:border-blue-500 focus:ring-blue-500\"\r\n               rows={4}\r\n               required\r\n             />\r\n                         <p className=\"text-xs text-gray-700 font-medium\">\r\n               Your feedback helps improve the AI system for future suggestions\r\n             </p>\r\n          </div>\r\n        </div>\r\n\r\n        <DialogFooter className=\"gap-2\">\r\n          <Button variant=\"outline\" onClick={onClose} disabled={isLoading}>\r\n            Cancel\r\n          </Button>\r\n          <Button \r\n            onClick={handleSave} \r\n            disabled={isLoading || !userNotes.trim()}\r\n            className=\"min-w-[100px]\"\r\n          >\r\n            {isLoading ? 'Saving...' : 'Save Correction'}\r\n          </Button>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ai\\RealTimeAIDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ai\\RealTimeAITest.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[959,962],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[959,962],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":36,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":36,"endColumn":18,"suggestions":[{"fix":{"range":[1231,1292],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1314,1317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1314,1317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":51,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":51,"endColumn":18,"suggestions":[{"fix":{"range":[1697,1751],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1773,1776],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1773,1776],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":64,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":64,"endColumn":18,"suggestions":[{"fix":{"range":[2134,2191],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2213,2216],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2213,2216],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":76,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":76,"endColumn":18,"suggestions":[{"fix":{"range":[2517,2574],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2596,2599],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2596,2599],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":119,"column":14,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":123,"endColumn":14,"fix":{"range":[4284,4427],"text":"error ? <Badge variant=\"destructive\" className=\"ml-2\">\r\n                Error: {error}\r\n              </Badge> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":198,"column":20,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":202,"endColumn":20,"fix":{"range":[7358,7587],"text":"progress.estimatedTimeRemaining ? <p className=\"text-xs text-muted-foreground\">\r\n                      Est. time remaining: {progress.estimatedTimeRemaining}s\r\n                    </p> : null"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":221,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":221,"endColumn":46},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":234,"column":24,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":236,"endColumn":24,"fix":{"range":[8861,8979],"text":"result.fallbackUsed ? <Badge variant=\"secondary\">Fallback</Badge> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":255,"column":20,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":259,"endColumn":20,"fix":{"range":[9716,9905],"text":"result.error ? <Alert className=\"mt-2\">\r\n                      <AlertDescription>{result.error}</AlertDescription>\r\n                    </Alert> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":261,"column":20,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":270,"endColumn":20,"fix":{"range":[9947,10428],"text":"result.data ? <div className=\"mt-2\">\r\n                      <details className=\"text-sm\">\r\n                        <summary className=\"cursor-pointer font-medium\">View Results</summary>\r\n                        <pre className=\"mt-2 p-2 bg-muted rounded text-xs overflow-auto\">\r\n                          {JSON.stringify(result.data, null, 2)}\r\n                        </pre>\r\n                      </details>\r\n                    </div> : null"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":5,"source":"// Real-time AI Test Component\r\n// This can be easily removed if the real-time processing doesn't work\r\n\r\n'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useWebSocket } from '@/hooks/useWebSocket';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Loader2, CheckCircle, XCircle, Clock, Zap, Brain, ShoppingCart, Utensils } from 'lucide-react';\r\n\r\nexport function RealTimeAITest() {\r\n  const {\r\n    isConnected,\r\n    isConnecting,\r\n    error,\r\n    processingRequests,\r\n    completedRequests,\r\n    requestAIProcessing,\r\n    clearCompletedRequest,\r\n    clearAllCompletedRequests\r\n  } = useWebSocket();\r\n\r\n  const [testResults, setTestResults] = useState<any[]>([]);\r\n\r\n  const handleTestShoppingSuggestions = () => {\r\n    try {\r\n      const requestId = requestAIProcessing('shopping_suggestions', {\r\n        dietaryRestrictions: ['vegetarian'],\r\n        budget: 100,\r\n        specialOccasions: ['weeknight']\r\n      });\r\n      console.log('Started shopping suggestions test:', requestId);\r\n    } catch (error: any) {\r\n      console.error('Failed to start shopping suggestions test:', error);\r\n    }\r\n  };\r\n\r\n  const handleTestMealPlanning = () => {\r\n    try {\r\n      const requestId = requestAIProcessing('meal_planning', {\r\n        mealType: 'dinner',\r\n        dietaryRestrictions: ['vegetarian'],\r\n        maxPrepTime: 30,\r\n        servings: 4,\r\n        cuisine: 'Italian'\r\n      });\r\n      console.log('Started meal planning test:', requestId);\r\n    } catch (error: any) {\r\n      console.error('Failed to start meal planning test:', error);\r\n    }\r\n  };\r\n\r\n  const handleTestChoreAssignment = () => {\r\n    try {\r\n      const requestId = requestAIProcessing('chore_assignment', {\r\n        householdId: 'test-household',\r\n        availableUsers: ['user1', 'user2'],\r\n        choreTypes: ['cleaning', 'cooking']\r\n      });\r\n      console.log('Started chore assignment test:', requestId);\r\n    } catch (error: any) {\r\n      console.error('Failed to start chore assignment test:', error);\r\n    }\r\n  };\r\n\r\n  const handleTestEmailProcessing = () => {\r\n    try {\r\n      const requestId = requestAIProcessing('email_processing', {\r\n        emailCount: 5,\r\n        processingType: 'bills_and_receipts'\r\n      });\r\n      console.log('Started email processing test:', requestId);\r\n    } catch (error: any) {\r\n      console.error('Failed to start email processing test:', error);\r\n    }\r\n  };\r\n\r\n  // Update test results when completed requests change\r\n  useEffect(() => {\r\n    const newResults = Array.from(completedRequests.entries()).map(([requestId, result]) => ({\r\n      requestId,\r\n      ...result,\r\n      timestamp: new Date().toISOString()\r\n    }));\r\n    setTestResults(newResults);\r\n  }, [completedRequests]);\r\n\r\n  const getRequestTypeIcon = (requestId: string) => {\r\n    if (requestId.includes('shopping')) return <ShoppingCart className=\"h-4 w-4\" />;\r\n    if (requestId.includes('meal')) return <Utensils className=\"h-4 w-4\" />;\r\n    if (requestId.includes('chore')) return <Clock className=\"h-4 w-4\" />;\r\n    if (requestId.includes('email')) return <Brain className=\"h-4 w-4\" />;\r\n    return <Zap className=\"h-4 w-4\" />;\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Zap className=\"h-5 w-5\" />\r\n            Real-time AI Processing Test\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Test real-time AI processing with WebSocket connections\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          {/* Connection Status */}\r\n          <div className=\"flex items-center gap-2\">\r\n            <div className={`h-2 w-2 rounded-full ${isConnected ? 'bg-green-500' : isConnecting ? 'bg-yellow-500' : 'bg-red-500'}`} />\r\n            <span className=\"text-sm font-medium\">\r\n              {isConnecting ? 'Connecting...' : isConnected ? 'Connected' : 'Disconnected'}\r\n            </span>\r\n            {error && (\r\n              <Badge variant=\"destructive\" className=\"ml-2\">\r\n                Error: {error}\r\n              </Badge>\r\n            )}\r\n          </div>\r\n\r\n          {/* Test Buttons */}\r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            <Button\r\n              onClick={handleTestShoppingSuggestions}\r\n              disabled={!isConnected || processingRequests.size > 0}\r\n              className=\"flex items-center gap-2\"\r\n            >\r\n              <ShoppingCart className=\"h-4 w-4\" />\r\n              Test Shopping AI\r\n            </Button>\r\n            <Button\r\n              onClick={handleTestMealPlanning}\r\n              disabled={!isConnected || processingRequests.size > 0}\r\n              className=\"flex items-center gap-2\"\r\n            >\r\n              <Utensils className=\"h-4 w-4\" />\r\n              Test Meal Planning AI\r\n            </Button>\r\n            <Button\r\n              onClick={handleTestChoreAssignment}\r\n              disabled={!isConnected || processingRequests.size > 0}\r\n              className=\"flex items-center gap-2\"\r\n            >\r\n              <Clock className=\"h-4 w-4\" />\r\n              Test Chore Assignment\r\n            </Button>\r\n            <Button\r\n              onClick={handleTestEmailProcessing}\r\n              disabled={!isConnected || processingRequests.size > 0}\r\n              className=\"flex items-center gap-2\"\r\n            >\r\n              <Brain className=\"h-4 w-4\" />\r\n              Test Email Processing\r\n            </Button>\r\n          </div>\r\n\r\n          {/* Clear Results Button */}\r\n          {completedRequests.size > 0 && (\r\n            <Button\r\n              onClick={clearAllCompletedRequests}\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              className=\"w-full\"\r\n            >\r\n              Clear All Results\r\n            </Button>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Processing Requests */}\r\n      {processingRequests.size > 0 && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Loader2 className=\"h-5 w-5 animate-spin\" />\r\n              Processing Requests ({processingRequests.size})\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-4\">\r\n              {Array.from(processingRequests.entries()).map(([requestId, progress]) => (\r\n                <div key={requestId} className=\"space-y-2\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                      {getRequestTypeIcon(requestId)}\r\n                      <span className=\"text-sm font-medium\">{progress.step}</span>\r\n                    </div>\r\n                    <span className=\"text-sm text-muted-foreground\">{progress.progress}%</span>\r\n                  </div>\r\n                  <Progress value={progress.progress} className=\"h-2\" />\r\n                  <p className=\"text-sm text-muted-foreground\">{progress.message}</p>\r\n                  {progress.estimatedTimeRemaining && (\r\n                    <p className=\"text-xs text-muted-foreground\">\r\n                      Est. time remaining: {progress.estimatedTimeRemaining}s\r\n                    </p>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Completed Requests */}\r\n      {testResults.length > 0 && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <CheckCircle className=\"h-5 w-5\" />\r\n              Test Results ({testResults.length})\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-4\">\r\n              {testResults.map((result, index) => (\r\n                <div key={result.requestId} className=\"border rounded-lg p-4\">\r\n                  <div className=\"flex items-center justify-between mb-2\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                      {result.success ? (\r\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\r\n                      ) : (\r\n                        <XCircle className=\"h-4 w-4 text-red-500\" />\r\n                      )}\r\n                      <span className=\"font-medium\">\r\n                        {result.success ? 'Success' : 'Failed'}\r\n                      </span>\r\n                      <Badge variant=\"outline\">{result.provider}</Badge>\r\n                      {result.fallbackUsed && (\r\n                        <Badge variant=\"secondary\">Fallback</Badge>\r\n                      )}\r\n                    </div>\r\n                    <Button\r\n                      onClick={() => clearCompletedRequest(result.requestId)}\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                    >\r\n                      <XCircle className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  </div>\r\n                  \r\n                  <div className=\"text-sm text-muted-foreground mb-2\">\r\n                    Request ID: {result.requestId}\r\n                  </div>\r\n                  \r\n                  <div className=\"text-sm text-muted-foreground mb-2\">\r\n                    Processing Time: {result.processingTime}ms\r\n                  </div>\r\n                  \r\n                  {result.error && (\r\n                    <Alert className=\"mt-2\">\r\n                      <AlertDescription>{result.error}</AlertDescription>\r\n                    </Alert>\r\n                  )}\r\n                  \r\n                  {result.data && (\r\n                    <div className=\"mt-2\">\r\n                      <details className=\"text-sm\">\r\n                        <summary className=\"cursor-pointer font-medium\">View Results</summary>\r\n                        <pre className=\"mt-2 p-2 bg-muted rounded text-xs overflow-auto\">\r\n                          {JSON.stringify(result.data, null, 2)}\r\n                        </pre>\r\n                      </details>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ai\\SuggestionCard.tsx","messages":[{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":100,"column":16,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":107,"endColumn":16,"fix":{"range":[3212,3592],"text":"suggestion.parsed_item ? <Badge \r\n                  variant={suggestion.parsed_item.review_status === 'auto_approved' ? 'default' : 'destructive'}\r\n                  className=\"text-xs\"\r\n                >\r\n                  {suggestion.parsed_item.review_status === 'auto_approved' ? 'Auto-approved' : 'Needs Review'}\r\n                </Badge> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":108,"column":16,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":112,"endColumn":16,"fix":{"range":[3610,3837],"text":"suggestion.parsed_item ? <Badge variant=\"secondary\" className=\"text-xs\">\r\n                  {(suggestion.parsed_item.confidence_score * 100).toFixed(0)}% confidence\r\n                </Badge> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":129,"column":12,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":138,"endColumn":12,"fix":{"range":[4406,4835],"text":"suggestion.suggestion_data ? <div>\r\n              <h4 className=\"font-medium text-sm text-gray-700 mb-1\">Extracted Data:</h4>\r\n              <div className=\"bg-gray-50 p-3 rounded-md\">\r\n                <pre className=\"text-xs text-gray-700 whitespace-pre-wrap\">\r\n                  {JSON.stringify(suggestion.suggestion_data, null, 2)}\r\n                </pre>\r\n              </div>\r\n            </div> : null"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":147,"column":19,"nodeType":"MemberExpression","messageId":"limited","endLine":147,"endColumn":30,"suggestions":[{"fix":{"range":[5133,5205],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":149,"column":19,"nodeType":"MemberExpression","messageId":"limited","endLine":149,"endColumn":30,"suggestions":[{"fix":{"range":[5276,5318],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":3,"source":"'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { \r\n  CheckCircle, \r\n  XCircle, \r\n  Edit3, \r\n  MessageSquare, \r\n  Clock,\r\n  AlertTriangle\r\n} from 'lucide-react';\r\nimport { CorrectionModal, CorrectionData, AISuggestion } from './CorrectionModal';\r\n\r\ninterface SuggestionCardProps {\r\n  suggestion: AISuggestion;\r\n  onCorrectionSaved?: () => void;\r\n}\r\n\r\nexport function SuggestionCard({ suggestion, onCorrectionSaved }: SuggestionCardProps) {\r\n  const [isCorrectionModalOpen, setIsCorrectionModalOpen] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleSaveCorrection = async (correction: CorrectionData): Promise<void> => {\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch('/api/ai/corrections', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(correction),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.error || 'Failed to save correction');\r\n      }\r\n\r\n      // Call the callback to refresh data\r\n      if (onCorrectionSaved) {\r\n        onCorrectionSaved();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving correction:', error);\r\n      throw error;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const getSuggestionIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'bill_action': return <AlertTriangle className=\"w-4 h-4\" />;\r\n      case 'shopping_list_update': return <CheckCircle className=\"w-4 h-4\" />;\r\n      case 'calendar_event': return <Clock className=\"w-4 h-4\" />;\r\n      case 'chore_creation': return <Edit3 className=\"w-4 h-4\" />;\r\n      default: return <MessageSquare className=\"w-4 h-4\" />;\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const getStatusBadge = (feedback: string) => {\r\n    switch (feedback) {\r\n      case 'completed':\r\n        return <Badge variant=\"default\" className=\"bg-green-600\">Completed</Badge>;\r\n      case 'corrected':\r\n        return <Badge variant=\"secondary\">Corrected</Badge>;\r\n      case 'ignored':\r\n        return <Badge variant=\"outline\">Ignored</Badge>;\r\n      default:\r\n        return <Badge variant=\"outline\">Pending</Badge>;\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('en-US', {\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className=\"hover:shadow-md transition-shadow\">\r\n        <CardHeader className=\"pb-3\">\r\n          <div className=\"flex items-start justify-between\">\r\n            <div className=\"flex items-center gap-2\">\r\n              {getSuggestionIcon(suggestion.suggestion_type)}\r\n              <CardTitle className=\"text-lg\">\r\n                {suggestion.suggestion_type.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\r\n              </CardTitle>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              {suggestion.parsed_item && (\r\n                <Badge \r\n                  variant={suggestion.parsed_item.review_status === 'auto_approved' ? 'default' : 'destructive'}\r\n                  className=\"text-xs\"\r\n                >\r\n                  {suggestion.parsed_item.review_status === 'auto_approved' ? 'Auto-approved' : 'Needs Review'}\r\n                </Badge>\r\n              )}\r\n              {suggestion.parsed_item && (\r\n                <Badge variant=\"secondary\" className=\"text-xs\">\r\n                  {(suggestion.parsed_item.confidence_score * 100).toFixed(0)}% confidence\r\n                </Badge>\r\n              )}\r\n              {getStatusBadge(suggestion.user_feedback)}\r\n            </div>\r\n          </div>\r\n          <div className=\"text-sm text-gray-500\">\r\n            {formatDate(suggestion.created_at)}\r\n          </div>\r\n        </CardHeader>\r\n\r\n        <CardContent className=\"space-y-4\">\r\n          {/* AI Reasoning */}\r\n          <div>\r\n            <h4 className=\"font-medium text-sm text-gray-700 mb-1\">AI Reasoning:</h4>\r\n            <p className=\"text-sm text-gray-600\">{suggestion.ai_reasoning}</p>\r\n          </div>\r\n\r\n          {/* Suggestion Data */}\r\n          {suggestion.suggestion_data && (\r\n            <div>\r\n              <h4 className=\"font-medium text-sm text-gray-700 mb-1\">Extracted Data:</h4>\r\n              <div className=\"bg-gray-50 p-3 rounded-md\">\r\n                <pre className=\"text-xs text-gray-700 whitespace-pre-wrap\">\r\n                  {JSON.stringify(suggestion.suggestion_data, null, 2)}\r\n                </pre>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Action Buttons */}\r\n          {suggestion.user_feedback === 'pending' && (\r\n            <div className=\"flex flex-wrap gap-2 pt-2 border-t\">\r\n              <Button\r\n                size=\"sm\"\r\n                variant=\"outline\"\r\n                onClick={() => {\r\n                  console.log('🔍 Correct button clicked for suggestion:', suggestion.id);\r\n                  setIsCorrectionModalOpen(true);\r\n                  console.log('🔍 Modal state set to true');\r\n                }}\r\n                className=\"flex items-center gap-2\"\r\n              >\r\n                <Edit3 className=\"w-4 h-4\" />\r\n                Correct\r\n              </Button>\r\n              \r\n              <Button\r\n                size=\"sm\"\r\n                variant=\"outline\"\r\n                onClick={() => {\r\n                  const correction: CorrectionData = {\r\n                    suggestionId: suggestion.id,\r\n                    correctionType: 'mark_done',\r\n                    userNotes: 'Marked as completed by user'\r\n                  };\r\n                  handleSaveCorrection(correction);\r\n                }}\r\n                className=\"flex items-center gap-2\"\r\n                disabled={isLoading}\r\n              >\r\n                <CheckCircle className=\"w-4 h-4\" />\r\n                Mark as Done\r\n              </Button>\r\n\r\n              <Button\r\n                size=\"sm\"\r\n                variant=\"outline\"\r\n                onClick={() => {\r\n                  const correction: CorrectionData = {\r\n                    suggestionId: suggestion.id,\r\n                    correctionType: 'ignore',\r\n                    userNotes: 'Ignored by user'\r\n                  };\r\n                  handleSaveCorrection(correction);\r\n                }}\r\n                className=\"flex items-center gap-2\"\r\n                disabled={isLoading}\r\n              >\r\n                <XCircle className=\"w-4 h-4\" />\r\n                Ignore\r\n              </Button>\r\n            </div>\r\n          )}\r\n\r\n          {/* Feedback Status */}\r\n          {suggestion.user_feedback !== 'pending' && (\r\n            <div className=\"pt-2 border-t\">\r\n              <p className=\"text-sm text-gray-600\">\r\n                <strong>Status:</strong> {suggestion.user_feedback}\r\n              </p>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Correction Modal */}\r\n      <CorrectionModal\r\n        isOpen={isCorrectionModalOpen}\r\n        onClose={() => setIsCorrectionModalOpen(false)}\r\n        suggestion={suggestion}\r\n        onSaveCorrection={handleSaveCorrection}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ai\\hooks\\useRealtimeDashboard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ai\\types\\dashboard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\attachments\\FileUpload.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[527,530],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[527,530],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[841,844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[841,844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":41,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":41,"endColumn":14,"suggestions":[{"fix":{"range":[1359,1437],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":45,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":45,"endColumn":16,"suggestions":[{"fix":{"range":[1515,1601],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":52,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":52,"endColumn":20,"suggestions":[{"fix":{"range":[1776,1845],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":101,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":101,"endColumn":20,"suggestions":[{"fix":{"range":[3116,3175],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":106,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":106,"endColumn":20,"suggestions":[{"fix":{"range":[3277,3333],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":110,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":110,"endColumn":18,"suggestions":[{"fix":{"range":[3404,3491],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":125,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":125,"endColumn":18,"suggestions":[{"fix":{"range":[3951,4012],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"jsx-a11y/alt-text","severity":1,"message":"Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","line":233,"column":14,"nodeType":"JSXOpeningElement","endLine":233,"endColumn":43},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":316,"column":24,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":316,"endColumn":29},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":331,"column":24,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":333,"endColumn":24,"fix":{"range":[11164,11291],"text":"upload.error ? <p className=\"text-xs text-red-600 mt-1\">{upload.error}</p> : null"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\r\n\r\nimport React, { useState, useRef } from 'react';\r\nimport { useAuth } from '@clerk/nextjs';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Upload, X, FileText, Image, CheckCircle, AlertCircle } from 'lucide-react';\r\nimport { toast } from 'sonner';\r\n\r\ninterface FileUploadProps {\r\n  onUploadComplete?: (attachment: any) => void;\r\n  onUploadError?: (error: string) => void;\r\n  className?: string;\r\n  maxFileSize?: number; // in bytes\r\n  acceptedTypes?: string[];\r\n}\r\n\r\ninterface UploadProgress {\r\n  file: File;\r\n  progress: number;\r\n  status: 'uploading' | 'processing' | 'completed' | 'error';\r\n  error?: string;\r\n  attachment?: any;\r\n}\r\n\r\nexport function FileUpload({ \r\n  onUploadComplete, \r\n  onUploadError,\r\n  className = '',\r\n  maxFileSize = 10 * 1024 * 1024, // 10MB default\r\n  acceptedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf']\r\n}: FileUploadProps) {\r\n  const { user, isLoaded, isSignedIn, getToken } = useAuth();\r\n  const [uploads, setUploads] = useState<UploadProgress[]>([]);\r\n  const [isDragOver, setIsDragOver] = useState(false);\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  // Debug logging\r\n  console.log('FileUpload auth state:', { user: !!user, isLoaded, isSignedIn });\r\n\r\n  // Monitor authentication state changes\r\n  React.useEffect(() => {\r\n    console.log('FileUpload auth state changed:', { user: !!user, isLoaded, isSignedIn });\r\n  }, [user, isLoaded, isSignedIn]);\r\n\r\n  // Test token availability\r\n  React.useEffect(() => {\r\n    if (isLoaded && isSignedIn) {\r\n      getToken().then(token => {\r\n        console.log('🔑 Token test:', token ? 'Available' : 'Not available');\r\n      });\r\n    }\r\n  }, [isLoaded, isSignedIn, getToken]);\r\n\r\n  const handleFileSelect = (files: FileList | null) => {\r\n    if (!files) return;\r\n\r\n    // Check if authentication is loaded and user is authenticated\r\n    if (!isLoaded) {\r\n      toast.error('Please wait for authentication to load');\r\n      return;\r\n    }\r\n\r\n    if (!isSignedIn) {\r\n      toast.error('Please sign in to upload files');\r\n      return;\r\n    }\r\n\r\n    Array.from(files).forEach(file => {\r\n      // Validate file\r\n      if (!acceptedTypes.includes(file.type)) {\r\n        toast.error(`File type ${file.type} is not supported`);\r\n        return;\r\n      }\r\n\r\n      if (file.size > maxFileSize) {\r\n        toast.error(`File size ${(file.size / 1024 / 1024).toFixed(1)}MB exceeds maximum ${(maxFileSize / 1024 / 1024).toFixed(1)}MB`);\r\n        return;\r\n      }\r\n\r\n      // Add to uploads\r\n      const upload: UploadProgress = {\r\n        file,\r\n        progress: 0,\r\n        status: 'uploading'\r\n      };\r\n\r\n      setUploads(prev => [...prev, upload]);\r\n\r\n      // Start upload\r\n      uploadFile(upload);\r\n    });\r\n  };\r\n\r\n  const uploadFile = async (upload: UploadProgress) => {\r\n    try {\r\n      // Check if authentication is loaded and user is still authenticated\r\n      if (!isLoaded) {\r\n        console.log('❌ Upload failed - Authentication not loaded');\r\n        throw new Error('Authentication not loaded');\r\n      }\r\n\r\n      if (!isSignedIn) {\r\n        console.log('❌ Upload failed - User not authenticated');\r\n        throw new Error('User not authenticated');\r\n      }\r\n\r\n      console.log('✅ Upload starting - Auth state:', { isLoaded, isSignedIn, user: !!user });\r\n\r\n      // Upload file using FormData to the API route\r\n      const formData = new FormData();\r\n      formData.append('file', upload.file);\r\n\r\n      // Update progress\r\n      setUploads(prev => prev.map(u => \r\n        u.file === upload.file \r\n          ? { ...u, progress: 25, status: 'uploading' }\r\n          : u\r\n      ));\r\n\r\n      // Upload file to API route (which handles Supabase storage with proper auth)\r\n      const token = await getToken();\r\n      console.log('🔑 Auth token:', token ? 'Present' : 'Missing');\r\n      \r\n      const response = await fetch('/api/attachments/upload', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: formData\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Upload failed');\r\n      }\r\n\r\n      const { attachment } = await response.json();\r\n\r\n      // Update progress\r\n      setUploads(prev => prev.map(u => \r\n        u.file === upload.file \r\n          ? { ...u, progress: 75, status: 'processing', attachment }\r\n          : u\r\n      ));\r\n\r\n      // Trigger OCR processing if it's an image\r\n      if (upload.file.type.startsWith('image/')) {\r\n        const processToken = await getToken();\r\n        const processResponse = await fetch('/api/attachments/upload', {\r\n          method: 'PUT',\r\n          headers: { \r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${processToken}`\r\n          },\r\n          body: JSON.stringify({ attachment_id: attachment.id })\r\n        });\r\n\r\n        if (!processResponse.ok) {\r\n          throw new Error('Failed to start OCR processing');\r\n        }\r\n\r\n        const { attachment: processedAttachment } = await processResponse.json();\r\n        \r\n        // Update to completed\r\n        setUploads(prev => prev.map(u => \r\n          u.file === upload.file \r\n            ? { \r\n                ...u, \r\n                progress: 100, \r\n                status: 'completed', \r\n                attachment: processedAttachment \r\n              }\r\n            : u\r\n        ));\r\n\r\n        toast.success(`Receipt processed successfully! ${processedAttachment.receipt_items?.length || 0} items extracted.`);\r\n        onUploadComplete?.(processedAttachment);\r\n      } else {\r\n        // Non-image file, mark as completed\r\n        setUploads(prev => prev.map(u => \r\n          u.file === upload.file \r\n            ? { ...u, progress: 100, status: 'completed' }\r\n            : u\r\n        ));\r\n\r\n        toast.success('File uploaded successfully!');\r\n        onUploadComplete?.(attachment);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('❌ Upload error:', error);\r\n      \r\n      setUploads(prev => prev.map(u => \r\n        u.file === upload.file \r\n          ? { \r\n              ...u, \r\n              status: 'error', \r\n              error: error instanceof Error ? error.message : 'Upload failed'\r\n            }\r\n          : u\r\n      ));\r\n\r\n      toast.error(`Upload failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n      onUploadError?.(error instanceof Error ? error.message : 'Upload failed');\r\n    }\r\n  };\r\n\r\n  const removeUpload = (file: File) => {\r\n    setUploads(prev => prev.filter(u => u.file !== file));\r\n  };\r\n\r\n  const handleDragOver = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragOver(true);\r\n  };\r\n\r\n  const handleDragLeave = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragOver(false);\r\n  };\r\n\r\n  const handleDrop = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragOver(false);\r\n    handleFileSelect(e.dataTransfer.files);\r\n  };\r\n\r\n  const getFileIcon = (fileType: string) => {\r\n    if (fileType.startsWith('image/')) {\r\n      return <Image className=\"h-4 w-4\" />;\r\n    }\r\n    return <FileText className=\"h-4 w-4\" />;\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'completed':\r\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\r\n      case 'error':\r\n        return <AlertCircle className=\"h-4 w-4 text-red-600\" />;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'completed':\r\n        return 'bg-green-100 text-green-800';\r\n      case 'error':\r\n        return 'bg-red-100 text-red-800';\r\n      case 'processing':\r\n        return 'bg-blue-100 text-blue-800';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Upload className=\"h-5 w-5\" />\r\n            Upload Receipts & Documents\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          {/* Upload Area */}\r\n          <div\r\n            className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\r\n              !isLoaded || !isSignedIn\r\n                ? 'border-gray-200 bg-gray-50 cursor-not-allowed opacity-50'\r\n                : isDragOver \r\n                  ? 'border-blue-400 bg-blue-50' \r\n                  : 'border-gray-300 hover:border-gray-400'\r\n            }`}\r\n            onDragOver={isLoaded && isSignedIn ? handleDragOver : undefined}\r\n            onDragLeave={isLoaded && isSignedIn ? handleDragLeave : undefined}\r\n            onDrop={isLoaded && isSignedIn ? handleDrop : undefined}\r\n          >\r\n            <Upload className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\r\n            <p className=\"text-lg font-medium text-gray-900 mb-2\">\r\n              {!isLoaded ? 'Loading authentication...' : 'Drop files here or click to browse'}\r\n            </p>\r\n            <p className=\"text-sm text-gray-500 mb-4\">\r\n              Supported formats: JPEG, PNG, GIF, PDF (max {(maxFileSize / 1024 / 1024).toFixed(1)}MB)\r\n            </p>\r\n            <Button\r\n              onClick={() => isLoaded && isSignedIn && fileInputRef.current?.click()}\r\n              variant=\"outline\"\r\n              className=\"mb-2\"\r\n              disabled={!isLoaded || !isSignedIn}\r\n            >\r\n              {!isLoaded ? 'Loading...' : isSignedIn ? 'Choose Files' : 'Please Sign In'}\r\n            </Button>\r\n            <input\r\n              ref={fileInputRef}\r\n              type=\"file\"\r\n              multiple\r\n              accept={acceptedTypes.join(',')}\r\n              onChange={(e) => handleFileSelect(e.target.files)}\r\n              className=\"hidden\"\r\n            />\r\n          </div>\r\n\r\n          {/* Upload Progress */}\r\n          {uploads.length > 0 && (\r\n            <div className=\"space-y-3\">\r\n              <h4 className=\"font-medium text-gray-900\">Upload Progress</h4>\r\n              {uploads.map((upload, index) => (\r\n                <div\r\n                  key={index}\r\n                  className=\"flex items-center justify-between p-3 border rounded-lg\"\r\n                >\r\n                  <div className=\"flex items-center gap-3 flex-1\">\r\n                    {getFileIcon(upload.file.type)}\r\n                    <div className=\"flex-1 min-w-0\">\r\n                      <p className=\"text-sm font-medium text-gray-900 truncate\">\r\n                        {upload.file.name}\r\n                      </p>\r\n                      <div className=\"flex items-center gap-2 mt-1\">\r\n                        <Progress value={upload.progress} className=\"flex-1 h-2\" />\r\n                        <Badge className={getStatusColor(upload.status)}>\r\n                          {upload.status}\r\n                        </Badge>\r\n                      </div>\r\n                      {upload.error && (\r\n                        <p className=\"text-xs text-red-600 mt-1\">{upload.error}</p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    {getStatusIcon(upload.status)}\r\n                    <Button\r\n                      size=\"sm\"\r\n                      variant=\"ghost\"\r\n                      onClick={() => removeUpload(upload.file)}\r\n                      className=\"h-8 w-8 p-0\"\r\n                    >\r\n                      <X className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\attachments\\ReceiptItemsDisplay.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Input' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Plus' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Minus' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleUpdateItem' is assigned a value but never used.","line":202,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":202,"endColumn":25},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":260,"column":13,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":260,"endColumn":91,"fix":{"range":[7931,7938],"text":" />"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":303,"column":18,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":304,"endColumn":85,"fix":{"range":[9380,9502],"text":"items[0].attachment.receipt_date ? format(new Date(items[0].attachment.receipt_date), 'MMM dd, yyyy') : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":307,"column":16,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":312,"endColumn":16,"fix":{"range":[9562,9827],"text":"items[0].attachment.receipt_store ? <Badge variant=\"outline\" className=\"flex items-center gap-1\">\r\n                  <MapPin className=\"h-3 w-3\" />\r\n                  {items[0].attachment.receipt_store}\r\n                </Badge> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":359,"column":10,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":421,"endColumn":10,"fix":{"range":[11597,14289],"text":"showSpendingOptions && selectedItems.size > 0 ? <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg space-y-4\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Wallet className=\"h-5 w-5 text-blue-600\" />\r\n              <h3 className=\"font-medium text-blue-900\">Spending Options</h3>\r\n            </div>\r\n            \r\n            <div className=\"space-y-3\">\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Checkbox\r\n                  id=\"single-entry\"\r\n                  checked={spendingOptions.create_single_entry}\r\n                  onCheckedChange={(checked) => \r\n                    setSpendingOptions(prev => ({ ...prev, create_single_entry: checked as boolean }))\r\n                  }\r\n                />\r\n                <Label htmlFor=\"single-entry\" className=\"text-sm\">\r\n                  Create single spend entry for all items (recommended for receipt totals)\r\n                </Label>\r\n              </div>\r\n              \r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"payment-method\" className=\"text-sm font-medium\">\r\n                  Payment Method\r\n                </Label>\r\n                <select\r\n                  id=\"payment-method\"\r\n                  value={spendingOptions.payment_method}\r\n                  onChange={(e) => \r\n                    setSpendingOptions(prev => ({ \r\n                      ...prev, \r\n                      payment_method: e.target.value as 'cash' | 'card' | 'bank_transfer' | 'other'\r\n                    }))\r\n                  }\r\n                  className=\"w-full p-2 border border-gray-300 rounded-md text-sm\"\r\n                >\r\n                  <option value=\"card\">Card</option>\r\n                  <option value=\"cash\">Cash</option>\r\n                  <option value=\"bank_transfer\">Bank Transfer</option>\r\n                  <option value=\"other\">Other</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-end gap-2\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={() => setShowSpendingOptions(false)}\r\n                className=\"text-sm\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                onClick={handleAddToSpending}\r\n                disabled={addingToSpending}\r\n                className=\"bg-blue-600 hover:bg-blue-700 text-sm\"\r\n              >\r\n                <DollarSign className=\"h-4 w-4 mr-2\" />\r\n                {addingToSpending ? 'Adding...' : 'Add to Spending'}\r\n              </Button>\r\n            </div>\r\n          </div> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":444,"column":22,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":448,"endColumn":22,"fix":{"range":[15275,15462],"text":"item.item_brand ? <Badge variant=\"outline\" className=\"text-xs\">\r\n                        {item.item_brand}\r\n                      </Badge> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":449,"column":22,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":453,"endColumn":22,"fix":{"range":[15486,15703],"text":"item.item_category ? <Badge className={`text-xs ${getCategoryColor(item.item_category)}`}>\r\n                        {item.item_category}\r\n                      </Badge> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":461,"column":22,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":463,"endColumn":22,"fix":{"range":[16077,16176],"text":"item.item_unit ? <span>per {item.item_unit}</span> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":472,"column":18,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":474,"endColumn":18,"fix":{"range":[16545,16697],"text":"item.added_to_shopping_list ? <CheckCircle className=\"h-5 w-5 text-green-600\" title=\"Added to shopping list\" /> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":475,"column":18,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":477,"endColumn":18,"fix":{"range":[16717,16858],"text":"item.added_to_spending ? <CheckCircle className=\"h-5 w-5 text-blue-600\" title=\"Added to spending\" /> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":478,"column":18,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":482,"endColumn":18,"fix":{"range":[16878,17043],"text":"item.user_modified ? <Badge variant=\"outline\" className=\"text-xs\">\r\n                    Modified\r\n                  </Badge> : null"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":10,"source":"'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { \r\n  ShoppingCart, \r\n  Plus, \r\n  Minus, \r\n  CheckCircle, \r\n  AlertCircle,\r\n  Receipt,\r\n  Calendar,\r\n  MapPin,\r\n  DollarSign,\r\n  Wallet\r\n} from 'lucide-react';\r\nimport { format } from 'date-fns';\r\nimport { toast } from 'sonner';\r\nimport { useAuth } from '@clerk/nextjs';\r\n\r\ninterface ReceiptItem {\r\n  id: string;\r\n  item_name: string;\r\n  item_price: number;\r\n  item_quantity: number;\r\n  item_category?: string;\r\n  item_brand?: string;\r\n  item_unit?: string;\r\n  confidence_score: number;\r\n  added_to_shopping_list: boolean;\r\n  added_to_spending: boolean;\r\n  spend_entry_id?: string;\r\n  user_confirmed: boolean;\r\n  user_modified: boolean;\r\n  attachment: {\r\n    id: string;\r\n    file_name: string;\r\n    receipt_store?: string;\r\n    receipt_date?: string;\r\n  };\r\n}\r\n\r\ninterface ReceiptItemsDisplayProps {\r\n  attachmentId: string;\r\n  className?: string;\r\n}\r\n\r\nexport function ReceiptItemsDisplay({ attachmentId, className }: ReceiptItemsDisplayProps) {\r\n  const { getToken } = useAuth();\r\n  const [items, setItems] = useState<ReceiptItem[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedItems, setSelectedItems] = useState<Set<string>>(new Set());\r\n  const [addingToShoppingList, setAddingToShoppingList] = useState(false);\r\n  const [addingToSpending, setAddingToSpending] = useState(false);\r\n  const [showSpendingOptions, setShowSpendingOptions] = useState(false);\r\n  const [spendingOptions, setSpendingOptions] = useState({\r\n    create_single_entry: false,\r\n    payment_method: 'card' as 'cash' | 'card' | 'bank_transfer' | 'other'\r\n  });\r\n\r\n  // Fetch receipt items\r\n  React.useEffect(() => {\r\n    const fetchItems = async () => {\r\n      try {\r\n        const token = await getToken();\r\n        const response = await fetch(`/api/receipt-items?attachment_id=${attachmentId}`, {\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`\r\n          }\r\n        });\r\n        const data = await response.json();\r\n        \r\n        if (data.success) {\r\n          setItems(data.receipt_items || []);\r\n        } else {\r\n          toast.error('Failed to load receipt items');\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Error fetching receipt items:', error);\r\n        toast.error('Failed to load receipt items');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchItems();\r\n  }, [attachmentId, getToken]);\r\n\r\n  const handleSelectItem = (itemId: string, checked: boolean) => {\r\n    const newSelected = new Set(selectedItems);\r\n    if (checked) {\r\n      newSelected.add(itemId);\r\n    } else {\r\n      newSelected.delete(itemId);\r\n    }\r\n    setSelectedItems(newSelected);\r\n  };\r\n\r\n  const handleSelectAll = (checked: boolean) => {\r\n    if (checked) {\r\n      setSelectedItems(new Set(items.map(item => item.id)));\r\n    } else {\r\n      setSelectedItems(new Set());\r\n    }\r\n  };\r\n\r\n  const handleAddToShoppingList = async () => {\r\n    if (selectedItems.size === 0) {\r\n      toast.error('Please select items to add to shopping list');\r\n      return;\r\n    }\r\n\r\n    setAddingToShoppingList(true);\r\n    try {\r\n      const token = await getToken();\r\n      const response = await fetch('/api/receipt-items', {\r\n        method: 'POST',\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({\r\n          item_ids: Array.from(selectedItems)\r\n        })\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        toast.success(data.message);\r\n        \r\n        // Update items to mark as added\r\n        setItems(prev => prev.map(item => \r\n          selectedItems.has(item.id)\r\n            ? { ...item, added_to_shopping_list: true }\r\n            : item\r\n        ));\r\n        \r\n        setSelectedItems(new Set());\r\n      } else {\r\n        toast.error(data.error || 'Failed to add items to shopping list');\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error adding to shopping list:', error);\r\n      toast.error('Failed to add items to shopping list');\r\n    } finally {\r\n      setAddingToShoppingList(false);\r\n    }\r\n  };\r\n\r\n  const handleAddToSpending = async () => {\r\n    if (selectedItems.size === 0) {\r\n      toast.error('Please select items to add to spending');\r\n      return;\r\n    }\r\n\r\n    setAddingToSpending(true);\r\n    try {\r\n      const token = await getToken();\r\n      const response = await fetch('/api/finance/receipt-to-spending', {\r\n        method: 'POST',\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({\r\n          receipt_item_ids: Array.from(selectedItems),\r\n          ...spendingOptions\r\n        })\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        toast.success(data.message);\r\n        \r\n        // Update items to mark as added to spending\r\n        setItems(prev => prev.map(item => \r\n          selectedItems.has(item.id)\r\n            ? { ...item, added_to_spending: true }\r\n            : item\r\n        ));\r\n        \r\n        setSelectedItems(new Set());\r\n        setShowSpendingOptions(false);\r\n      } else {\r\n        toast.error(data.error || 'Failed to add items to spending');\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error adding to spending:', error);\r\n      toast.error('Failed to add items to spending');\r\n    } finally {\r\n      setAddingToSpending(false);\r\n    }\r\n  };\r\n\r\n  const handleUpdateItem = async (itemId: string, updates: Partial<ReceiptItem>) => {\r\n    try {\r\n      const token = await getToken();\r\n      const response = await fetch('/api/receipt-items', {\r\n        method: 'PUT',\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({\r\n          item_id: itemId,\r\n          updates\r\n        })\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        setItems(prev => prev.map(item => \r\n          item.id === itemId ? { ...item, ...updates, user_modified: true } : item\r\n        ));\r\n        toast.success('Item updated successfully');\r\n      } else {\r\n        toast.error(data.error || 'Failed to update item');\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error updating item:', error);\r\n      toast.error('Failed to update item');\r\n    }\r\n  };\r\n\r\n  const getConfidenceColor = (score: number) => {\r\n    if (score >= 0.8) return 'bg-green-100 text-green-800';\r\n    if (score >= 0.6) return 'bg-yellow-100 text-yellow-800';\r\n    return 'bg-red-100 text-red-800';\r\n  };\r\n\r\n  const getCategoryColor = (category?: string) => {\r\n    const colors: Record<string, string> = {\r\n      'dairy': 'bg-blue-100 text-blue-800',\r\n      'produce': 'bg-green-100 text-green-800',\r\n      'meat': 'bg-red-100 text-red-800',\r\n      'bakery': 'bg-yellow-100 text-yellow-800',\r\n      'pantry': 'bg-orange-100 text-orange-800',\r\n      'beverages': 'bg-cyan-100 text-cyan-800',\r\n      'snacks': 'bg-purple-100 text-purple-800',\r\n      'household': 'bg-gray-100 text-gray-800',\r\n      'health': 'bg-pink-100 text-pink-800'\r\n    };\r\n    \r\n    return colors[category || 'other'] || 'bg-gray-100 text-gray-800';\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardContent className=\"p-6\">\r\n          <div className=\"flex items-center justify-center\">\r\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n            <span className=\"ml-2 text-gray-600\">Loading receipt items...</span>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (items.length === 0) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Receipt className=\"h-5 w-5\" />\r\n            Receipt Items\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"text-center py-8\">\r\n            <AlertCircle className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\r\n            <p className=\"text-gray-600\">No items found in this receipt</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  const allSelected = items.length > 0 && selectedItems.size === items.length;\r\n  const someSelected = selectedItems.size > 0 && selectedItems.size < items.length;\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <div className=\"flex items-center justify-between\">\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Receipt className=\"h-5 w-5\" />\r\n            Receipt Items ({items.length})\r\n          </CardTitle>\r\n          \r\n          {items.length > 0 && (\r\n            <div className=\"flex items-center gap-2\">\r\n              <Badge variant=\"outline\" className=\"flex items-center gap-1\">\r\n                <Calendar className=\"h-3 w-3\" />\r\n                {items[0].attachment.receipt_date && \r\n                  format(new Date(items[0].attachment.receipt_date), 'MMM dd, yyyy')\r\n                }\r\n              </Badge>\r\n              {items[0].attachment.receipt_store && (\r\n                <Badge variant=\"outline\" className=\"flex items-center gap-1\">\r\n                  <MapPin className=\"h-3 w-3\" />\r\n                  {items[0].attachment.receipt_store}\r\n                </Badge>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </CardHeader>\r\n      \r\n      <CardContent className=\"space-y-4\">\r\n        {/* Select All Controls */}\r\n        <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <Checkbox\r\n              checked={allSelected}\r\n              onCheckedChange={handleSelectAll}\r\n              ref={(el) => {\r\n                if (el) el.indeterminate = someSelected;\r\n              }}\r\n            />\r\n            <span className=\"text-sm font-medium text-gray-900\">\r\n              Select All ({selectedItems.size}/{items.length})\r\n            </span>\r\n          </div>\r\n          \r\n          {selectedItems.size > 0 && (\r\n            <div className=\"flex items-center gap-2\">\r\n              <Button\r\n                onClick={handleAddToShoppingList}\r\n                disabled={addingToShoppingList}\r\n                className=\"bg-green-600 hover:bg-green-700\"\r\n              >\r\n                <ShoppingCart className=\"h-4 w-4 mr-2\" />\r\n                {addingToShoppingList ? 'Adding...' : `Add ${selectedItems.size} to Shopping List`}\r\n              </Button>\r\n              \r\n              <Button\r\n                onClick={() => setShowSpendingOptions(!showSpendingOptions)}\r\n                disabled={addingToSpending}\r\n                variant=\"outline\"\r\n                className=\"bg-blue-50 border-blue-200 text-blue-700 hover:bg-blue-100\"\r\n              >\r\n                <DollarSign className=\"h-4 w-4 mr-2\" />\r\n                {addingToSpending ? 'Adding...' : `Add ${selectedItems.size} to Spending`}\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Spending Options */}\r\n        {showSpendingOptions && selectedItems.size > 0 && (\r\n          <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg space-y-4\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Wallet className=\"h-5 w-5 text-blue-600\" />\r\n              <h3 className=\"font-medium text-blue-900\">Spending Options</h3>\r\n            </div>\r\n            \r\n            <div className=\"space-y-3\">\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Checkbox\r\n                  id=\"single-entry\"\r\n                  checked={spendingOptions.create_single_entry}\r\n                  onCheckedChange={(checked) => \r\n                    setSpendingOptions(prev => ({ ...prev, create_single_entry: checked as boolean }))\r\n                  }\r\n                />\r\n                <Label htmlFor=\"single-entry\" className=\"text-sm\">\r\n                  Create single spend entry for all items (recommended for receipt totals)\r\n                </Label>\r\n              </div>\r\n              \r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"payment-method\" className=\"text-sm font-medium\">\r\n                  Payment Method\r\n                </Label>\r\n                <select\r\n                  id=\"payment-method\"\r\n                  value={spendingOptions.payment_method}\r\n                  onChange={(e) => \r\n                    setSpendingOptions(prev => ({ \r\n                      ...prev, \r\n                      payment_method: e.target.value as 'cash' | 'card' | 'bank_transfer' | 'other'\r\n                    }))\r\n                  }\r\n                  className=\"w-full p-2 border border-gray-300 rounded-md text-sm\"\r\n                >\r\n                  <option value=\"card\">Card</option>\r\n                  <option value=\"cash\">Cash</option>\r\n                  <option value=\"bank_transfer\">Bank Transfer</option>\r\n                  <option value=\"other\">Other</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-end gap-2\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={() => setShowSpendingOptions(false)}\r\n                className=\"text-sm\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                onClick={handleAddToSpending}\r\n                disabled={addingToSpending}\r\n                className=\"bg-blue-600 hover:bg-blue-700 text-sm\"\r\n              >\r\n                <DollarSign className=\"h-4 w-4 mr-2\" />\r\n                {addingToSpending ? 'Adding...' : 'Add to Spending'}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Items List */}\r\n        <div className=\"space-y-2\">\r\n          {items.map((item) => (\r\n            <div\r\n              key={item.id}\r\n              className={`flex items-center justify-between p-3 border rounded-lg ${\r\n                item.added_to_shopping_list ? 'bg-green-50 border-green-200' : 'bg-white'\r\n              }`}\r\n            >\r\n              <div className=\"flex items-center space-x-3 flex-1\">\r\n                <Checkbox\r\n                  checked={selectedItems.has(item.id)}\r\n                  onCheckedChange={(checked) => handleSelectItem(item.id, checked as boolean)}\r\n                  disabled={item.added_to_shopping_list}\r\n                />\r\n                \r\n                <div className=\"flex-1 min-w-0\">\r\n                  <div className=\"flex items-center gap-2 mb-1\">\r\n                    <span className=\"font-medium text-gray-900 truncate\">\r\n                      {item.item_name}\r\n                    </span>\r\n                    {item.item_brand && (\r\n                      <Badge variant=\"outline\" className=\"text-xs\">\r\n                        {item.item_brand}\r\n                      </Badge>\r\n                    )}\r\n                    {item.item_category && (\r\n                      <Badge className={`text-xs ${getCategoryColor(item.item_category)}`}>\r\n                        {item.item_category}\r\n                      </Badge>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"flex items-center gap-2 text-sm text-gray-600\">\r\n                    <span className=\"font-medium\">${item.item_price.toFixed(2)}</span>\r\n                    {item.item_quantity > 1 && (\r\n                      <span>× {item.item_quantity}</span>\r\n                    )}\r\n                    {item.item_unit && (\r\n                      <span>per {item.item_unit}</span>\r\n                    )}\r\n                    <Badge className={`text-xs ${getConfidenceColor(item.confidence_score)}`}>\r\n                      {(item.confidence_score * 100).toFixed(0)}% confidence\r\n                    </Badge>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"flex items-center gap-2\">\r\n                {item.added_to_shopping_list && (\r\n                  <CheckCircle className=\"h-5 w-5 text-green-600\" title=\"Added to shopping list\" />\r\n                )}\r\n                {item.added_to_spending && (\r\n                  <CheckCircle className=\"h-5 w-5 text-blue-600\" title=\"Added to spending\" />\r\n                )}\r\n                {item.user_modified && (\r\n                  <Badge variant=\"outline\" className=\"text-xs\">\r\n                    Modified\r\n                  </Badge>\r\n                )}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Summary */}\r\n        <div className=\"flex justify-between items-center pt-4 border-t\">\r\n          <div className=\"text-sm text-gray-600\">\r\n            Total: ${items.reduce((sum, item) => sum + (item.item_price * item.item_quantity), 0).toFixed(2)}\r\n          </div>\r\n          <div className=\"flex items-center gap-4 text-sm text-gray-600\">\r\n            <span className=\"flex items-center gap-1\">\r\n              <ShoppingCart className=\"h-4 w-4 text-green-600\" />\r\n              {items.filter(item => item.added_to_shopping_list).length} shopping\r\n            </span>\r\n            <span className=\"flex items-center gap-1\">\r\n              <DollarSign className=\"h-4 w-4 text-blue-600\" />\r\n              {items.filter(item => item.added_to_spending).length} spending\r\n            </span>\r\n            <span>of {items.length} items</span>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\calendar\\CalendarSyncManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Textarea' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExternalLink' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":15},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchSyncSettings'. Either include it or remove the dependency array.","line":61,"column":6,"nodeType":"ArrayExpression","endLine":61,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [fetchSyncSettings, householdId]","fix":{"range":[1672,1685],"text":"[fetchSyncSettings, householdId]"}}]},{"ruleId":"no-alert","severity":1,"message":"Unexpected confirm.","line":117,"column":10,"nodeType":"CallExpression","messageId":"unexpected","endLine":117,"endColumn":126},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":153,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":153,"endColumn":19},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":167,"column":13,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":167,"endColumn":91,"fix":{"range":[5025,5032],"text":" />"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":219,"column":12,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":398,"endColumn":12,"fix":{"range":[6747,15041],"text":"syncSettings.public_sync_enabled ? <>\r\n              {/* Sync URL */}\r\n              <div className=\"space-y-3\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Link className=\"h-4 w-4\" />\r\n                  <Label className=\"text-sm font-medium\">Public Calendar URL</Label>\r\n                  <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\r\n                    <CheckCircle className=\"h-3 w-3 mr-1\" />\r\n                    Active\r\n                  </Badge>\r\n                </div>\r\n                \r\n                <div className=\"flex gap-2\">\r\n                  <Input\r\n                    value={syncSettings.sync_urls.public}\r\n                    readOnly\r\n                    className=\"flex-1 font-mono text-sm\"\r\n                  />\r\n                  <Button\r\n                    size=\"sm\"\r\n                    variant=\"outline\"\r\n                    onClick={() => copyToClipboard(syncSettings.sync_urls.public, 'Sync URL')}\r\n                    className=\"shrink-0\"\r\n                  >\r\n                    {copiedUrl === 'Sync URL' ? (\r\n                      <CheckCircle className=\"h-4 w-4 text-green-600\" />\r\n                    ) : (\r\n                      <Copy className=\"h-4 w-4\" />\r\n                    )}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Token Status */}\r\n              <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Shield className=\"h-4 w-4 text-gray-600\" />\r\n                  <span className=\"text-sm font-medium\">Sync Token</span>\r\n                  {isTokenExpired(syncSettings.token_expires_at) ? (\r\n                    <Badge variant=\"destructive\">\r\n                      <AlertCircle className=\"h-3 w-3 mr-1\" />\r\n                      Expired\r\n                    </Badge>\r\n                  ) : (\r\n                    <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\r\n                      <CheckCircle className=\"h-3 w-3 mr-1\" />\r\n                      Valid\r\n                    </Badge>\r\n                  )}\r\n                </div>\r\n                \r\n                <div className=\"flex items-center gap-2\">\r\n                  <div className=\"text-sm text-gray-600\">\r\n                    <Clock className=\"h-3 w-3 inline mr-1\" />\r\n                    Expires: {format(new Date(syncSettings.token_expires_at), 'MMM dd, yyyy')}\r\n                  </div>\r\n                  <Button\r\n                    size=\"sm\"\r\n                    variant=\"outline\"\r\n                    onClick={handleRegenerateToken}\r\n                    disabled={regenerating}\r\n                  >\r\n                    {regenerating ? (\r\n                      <RefreshCw className=\"h-4 w-4 animate-spin\" />\r\n                    ) : (\r\n                      <RefreshCw className=\"h-4 w-4\" />\r\n                    )}\r\n                    Regenerate\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Setup Instructions */}\r\n              <div className=\"space-y-4\">\r\n                <h4 className=\"font-medium text-gray-900\">How to Subscribe</h4>\r\n                \r\n                <div className=\"grid gap-4\">\r\n                  {/* Google Calendar */}\r\n                  <div className=\"p-4 border rounded-lg\">\r\n                    <div className=\"flex items-center gap-2 mb-2\">\r\n                      <div className=\"w-6 h-6 bg-blue-600 rounded flex items-center justify-center\">\r\n                        <span className=\"text-white text-xs font-bold\">G</span>\r\n                      </div>\r\n                      <span className=\"font-medium\">Google Calendar</span>\r\n                    </div>\r\n                    <p className=\"text-sm text-gray-600 mb-2\">\r\n                      1. Open Google Calendar<br/>\r\n                      2. Click the \"+\" next to \"Other calendars\"<br/>\r\n                      3. Choose \"From URL\"<br/>\r\n                      4. Paste the sync URL above\r\n                    </p>\r\n                    <Button\r\n                      size=\"sm\"\r\n                      variant=\"outline\"\r\n                      onClick={() => copyToClipboard(syncSettings.sync_urls.public, 'Google Calendar URL')}\r\n                    >\r\n                      {copiedUrl === 'Google Calendar URL' ? (\r\n                        <CheckCircle className=\"h-4 w-4 mr-2 text-green-600\" />\r\n                      ) : (\r\n                        <Copy className=\"h-4 w-4 mr-2\" />\r\n                      )}\r\n                      Copy URL\r\n                    </Button>\r\n                  </div>\r\n\r\n                  {/* Apple Calendar */}\r\n                  <div className=\"p-4 border rounded-lg\">\r\n                    <div className=\"flex items-center gap-2 mb-2\">\r\n                      <div className=\"w-6 h-6 bg-gray-900 rounded flex items-center justify-center\">\r\n                        <span className=\"text-white text-xs\">🍎</span>\r\n                      </div>\r\n                      <span className=\"font-medium\">Apple Calendar</span>\r\n                    </div>\r\n                    <p className=\"text-sm text-gray-600 mb-2\">\r\n                      1. Open Calendar app<br/>\r\n                      2. Go to File → New Calendar Subscription<br/>\r\n                      3. Paste the sync URL above<br/>\r\n                      4. Click Subscribe\r\n                    </p>\r\n                    <Button\r\n                      size=\"sm\"\r\n                      variant=\"outline\"\r\n                      onClick={() => copyToClipboard(syncSettings.sync_urls.public, 'Apple Calendar URL')}\r\n                    >\r\n                      {copiedUrl === 'Apple Calendar URL' ? (\r\n                        <CheckCircle className=\"h-4 w-4 mr-2 text-green-600\" />\r\n                      ) : (\r\n                        <Copy className=\"h-4 w-4 mr-2\" />\r\n                      )}\r\n                      Copy URL\r\n                    </Button>\r\n                  </div>\r\n\r\n                  {/* Outlook */}\r\n                  <div className=\"p-4 border rounded-lg\">\r\n                    <div className=\"flex items-center gap-2 mb-2\">\r\n                      <div className=\"w-6 h-6 bg-blue-500 rounded flex items-center justify-center\">\r\n                        <span className=\"text-white text-xs font-bold\">O</span>\r\n                      </div>\r\n                      <span className=\"font-medium\">Microsoft Outlook</span>\r\n                    </div>\r\n                    <p className=\"text-sm text-gray-600 mb-2\">\r\n                      1. Open Outlook<br/>\r\n                      2. Go to File → Account Settings → Account Settings<br/>\r\n                      3. Click \"Internet Calendars\" tab<br/>\r\n                      4. Click \"New\" and paste the sync URL\r\n                    </p>\r\n                    <Button\r\n                      size=\"sm\"\r\n                      variant=\"outline\"\r\n                      onClick={() => copyToClipboard(syncSettings.sync_urls.public, 'Outlook URL')}\r\n                    >\r\n                      {copiedUrl === 'Outlook URL' ? (\r\n                        <CheckCircle className=\"h-4 w-4 mr-2 text-green-600\" />\r\n                      ) : (\r\n                        <Copy className=\"h-4 w-4 mr-2\" />\r\n                      )}\r\n                      Copy URL\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Security Notice */}\r\n              <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\r\n                <div className=\"flex items-start gap-2\">\r\n                  <Info className=\"h-5 w-5 text-blue-600 mt-0.5\" />\r\n                  <div className=\"text-sm text-blue-800\">\r\n                    <p className=\"font-medium mb-1\">Security Notice</p>\r\n                    <p>\r\n                      Only events marked as \"Public\" will be included in the sync. \r\n                      Private events remain private and are not shared through this URL.\r\n                      Keep your sync URL secure and regenerate it if compromised.\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </> : null"}},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":307,"column":36,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10669,10735],"text":"\r\n                      2. Click the &quot;+\" next to \"Other calendars\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10669,10735],"text":"\r\n                      2. Click the &ldquo;+\" next to \"Other calendars\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10669,10735],"text":"\r\n                      2. Click the &#34;+\" next to \"Other calendars\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10669,10735],"text":"\r\n                      2. Click the &rdquo;+\" next to \"Other calendars\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":307,"column":38,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10669,10735],"text":"\r\n                      2. Click the \"+&quot; next to \"Other calendars\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10669,10735],"text":"\r\n                      2. Click the \"+&ldquo; next to \"Other calendars\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10669,10735],"text":"\r\n                      2. Click the \"+&#34; next to \"Other calendars\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10669,10735],"text":"\r\n                      2. Click the \"+&rdquo; next to \"Other calendars\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":307,"column":48,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10669,10735],"text":"\r\n                      2. Click the \"+\" next to &quot;Other calendars\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10669,10735],"text":"\r\n                      2. Click the \"+\" next to &ldquo;Other calendars\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10669,10735],"text":"\r\n                      2. Click the \"+\" next to &#34;Other calendars\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10669,10735],"text":"\r\n                      2. Click the \"+\" next to &rdquo;Other calendars\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":307,"column":64,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10669,10735],"text":"\r\n                      2. Click the \"+\" next to \"Other calendars&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10669,10735],"text":"\r\n                      2. Click the \"+\" next to \"Other calendars&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10669,10735],"text":"\r\n                      2. Click the \"+\" next to \"Other calendars&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10669,10735],"text":"\r\n                      2. Click the \"+\" next to \"Other calendars&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":308,"column":33,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10740,10784],"text":"\r\n                      3. Choose &quot;From URL\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10740,10784],"text":"\r\n                      3. Choose &ldquo;From URL\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10740,10784],"text":"\r\n                      3. Choose &#34;From URL\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10740,10784],"text":"\r\n                      3. Choose &rdquo;From URL\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":308,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10740,10784],"text":"\r\n                      3. Choose \"From URL&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10740,10784],"text":"\r\n                      3. Choose \"From URL&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10740,10784],"text":"\r\n                      3. Choose \"From URL&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10740,10784],"text":"\r\n                      3. Choose \"From URL&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":364,"column":32,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13486,13543],"text":"\r\n                      3. Click &quot;Internet Calendars\" tab"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13486,13543],"text":"\r\n                      3. Click &ldquo;Internet Calendars\" tab"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13486,13543],"text":"\r\n                      3. Click &#34;Internet Calendars\" tab"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13486,13543],"text":"\r\n                      3. Click &rdquo;Internet Calendars\" tab"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":364,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13486,13543],"text":"\r\n                      3. Click \"Internet Calendars&quot; tab"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13486,13543],"text":"\r\n                      3. Click \"Internet Calendars&ldquo; tab"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13486,13543],"text":"\r\n                      3. Click \"Internet Calendars&#34; tab"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13486,13543],"text":"\r\n                      3. Click \"Internet Calendars&rdquo; tab"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":365,"column":32,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13548,13631],"text":"\r\n                      4. Click &quot;New\" and paste the sync URL\r\n                    "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13548,13631],"text":"\r\n                      4. Click &ldquo;New\" and paste the sync URL\r\n                    "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13548,13631],"text":"\r\n                      4. Click &#34;New\" and paste the sync URL\r\n                    "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13548,13631],"text":"\r\n                      4. Click &rdquo;New\" and paste the sync URL\r\n                    "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":365,"column":36,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13548,13631],"text":"\r\n                      4. Click \"New&quot; and paste the sync URL\r\n                    "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13548,13631],"text":"\r\n                      4. Click \"New&ldquo; and paste the sync URL\r\n                    "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13548,13631],"text":"\r\n                      4. Click \"New&#34; and paste the sync URL\r\n                    "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13548,13631],"text":"\r\n                      4. Click \"New&rdquo; and paste the sync URL\r\n                    "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":390,"column":45,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[14655,14935],"text":"\r\n                      Only events marked as &quot;Public\" will be included in the sync. \r\n                      Private events remain private and are not shared through this URL.\r\n                      Keep your sync URL secure and regenerate it if compromised.\r\n                    "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[14655,14935],"text":"\r\n                      Only events marked as &ldquo;Public\" will be included in the sync. \r\n                      Private events remain private and are not shared through this URL.\r\n                      Keep your sync URL secure and regenerate it if compromised.\r\n                    "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[14655,14935],"text":"\r\n                      Only events marked as &#34;Public\" will be included in the sync. \r\n                      Private events remain private and are not shared through this URL.\r\n                      Keep your sync URL secure and regenerate it if compromised.\r\n                    "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[14655,14935],"text":"\r\n                      Only events marked as &rdquo;Public\" will be included in the sync. \r\n                      Private events remain private and are not shared through this URL.\r\n                      Keep your sync URL secure and regenerate it if compromised.\r\n                    "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":390,"column":52,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[14655,14935],"text":"\r\n                      Only events marked as \"Public&quot; will be included in the sync. \r\n                      Private events remain private and are not shared through this URL.\r\n                      Keep your sync URL secure and regenerate it if compromised.\r\n                    "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[14655,14935],"text":"\r\n                      Only events marked as \"Public&ldquo; will be included in the sync. \r\n                      Private events remain private and are not shared through this URL.\r\n                      Keep your sync URL secure and regenerate it if compromised.\r\n                    "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[14655,14935],"text":"\r\n                      Only events marked as \"Public&#34; will be included in the sync. \r\n                      Private events remain private and are not shared through this URL.\r\n                      Keep your sync URL secure and regenerate it if compromised.\r\n                    "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[14655,14935],"text":"\r\n                      Only events marked as \"Public&rdquo; will be included in the sync. \r\n                      Private events remain private and are not shared through this URL.\r\n                      Keep your sync URL secure and regenerate it if compromised.\r\n                    "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":2,"source":"'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { \r\n  Calendar,\r\n  Link,\r\n  Copy,\r\n  RefreshCw,\r\n  Shield,\r\n  Globe,\r\n  Clock,\r\n  ExternalLink,\r\n  CheckCircle,\r\n  AlertCircle,\r\n  Info\r\n} from 'lucide-react';\r\nimport { toast } from 'sonner';\r\nimport { format } from 'date-fns';\r\nimport { useAuth } from '@clerk/nextjs';\r\n\r\ninterface SyncSettings {\r\n  household_id: string;\r\n  household_name: string;\r\n  public_sync_enabled: boolean;\r\n  ics_token: string;\r\n  token_expires_at: string;\r\n  sync_urls: {\r\n    public: string;\r\n    private: string;\r\n  };\r\n  instructions: {\r\n    google_calendar: string;\r\n    apple_calendar: string;\r\n    outlook: string;\r\n    general: string;\r\n  };\r\n}\r\n\r\ninterface CalendarSyncManagerProps {\r\n  householdId: string;\r\n  className?: string;\r\n}\r\n\r\nexport function CalendarSyncManager({ householdId, className }: CalendarSyncManagerProps) {\r\n  const { getToken } = useAuth();\r\n  const [syncSettings, setSyncSettings] = useState<SyncSettings | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [updating, setUpdating] = useState(false);\r\n  const [regenerating, setRegenerating] = useState(false);\r\n  const [copiedUrl, setCopiedUrl] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchSyncSettings();\r\n  }, [householdId]);\r\n\r\n  const fetchSyncSettings = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const token = await getToken();\r\n      const response = await fetch(`/api/calendars/${householdId}/sync`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        setSyncSettings(data.sync_settings);\r\n      } else {\r\n        toast.error('Failed to load sync settings');\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error fetching sync settings:', error);\r\n      toast.error('Failed to load sync settings');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleTogglePublicSync = async (enabled: boolean) => {\r\n    try {\r\n      setUpdating(true);\r\n      const token = await getToken();\r\n      const response = await fetch(`/api/calendars/${householdId}/sync`, {\r\n        method: 'PUT',\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({ enable_public_sync: enabled })\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        setSyncSettings(prev => prev ? { ...prev, public_sync_enabled: enabled } : null);\r\n        toast.success(enabled ? 'Public sync enabled' : 'Public sync disabled');\r\n      } else {\r\n        toast.error(data.error || 'Failed to update sync settings');\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error updating sync settings:', error);\r\n      toast.error('Failed to update sync settings');\r\n    } finally {\r\n      setUpdating(false);\r\n    }\r\n  };\r\n\r\n  const handleRegenerateToken = async () => {\r\n    if (!confirm('Are you sure you want to regenerate the sync token? This will invalidate existing calendar subscriptions.')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setRegenerating(true);\r\n      const token = await getToken();\r\n      const response = await fetch(`/api/calendars/${householdId}/sync`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        toast.success('Sync token regenerated successfully');\r\n        fetchSyncSettings(); // Refresh settings\r\n      } else {\r\n        toast.error(data.error || 'Failed to regenerate token');\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error regenerating token:', error);\r\n      toast.error('Failed to regenerate token');\r\n    } finally {\r\n      setRegenerating(false);\r\n    }\r\n  };\r\n\r\n  const copyToClipboard = async (text: string, label: string) => {\r\n    try {\r\n      await navigator.clipboard.writeText(text);\r\n      setCopiedUrl(label);\r\n      toast.success(`${label} copied to clipboard`);\r\n      setTimeout(() => setCopiedUrl(null), 2000);\r\n    } catch (error) {\r\n      toast.error('Failed to copy to clipboard');\r\n    }\r\n  };\r\n\r\n  const isTokenExpired = (expiresAt: string) => {\r\n    return new Date(expiresAt) < new Date();\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardContent className=\"p-6\">\r\n          <div className=\"flex items-center justify-center\">\r\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n            <span className=\"ml-2 text-gray-600\">Loading sync settings...</span>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (!syncSettings) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardContent className=\"p-6\">\r\n          <div className=\"text-center\">\r\n            <AlertCircle className=\"h-12 w-12 mx-auto mb-4 text-red-500\" />\r\n            <p className=\"text-red-600\">Failed to load sync settings</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={className}>\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Calendar className=\"h-5 w-5\" />\r\n            Calendar Sync Settings\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-6\">\r\n          {/* Public Sync Toggle */}\r\n          <div className=\"flex items-center justify-between p-4 border rounded-lg\">\r\n            <div className=\"flex items-center gap-3\">\r\n              <Globe className=\"h-5 w-5 text-blue-600\" />\r\n              <div>\r\n                <Label htmlFor=\"public-sync\" className=\"text-base font-medium\">\r\n                  Enable Public Calendar Sync\r\n                </Label>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  Allow external calendar apps to subscribe to your household calendar\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <Switch\r\n              id=\"public-sync\"\r\n              checked={syncSettings.public_sync_enabled}\r\n              onCheckedChange={handleTogglePublicSync}\r\n              disabled={updating}\r\n            />\r\n          </div>\r\n\r\n          {syncSettings.public_sync_enabled && (\r\n            <>\r\n              {/* Sync URL */}\r\n              <div className=\"space-y-3\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Link className=\"h-4 w-4\" />\r\n                  <Label className=\"text-sm font-medium\">Public Calendar URL</Label>\r\n                  <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\r\n                    <CheckCircle className=\"h-3 w-3 mr-1\" />\r\n                    Active\r\n                  </Badge>\r\n                </div>\r\n                \r\n                <div className=\"flex gap-2\">\r\n                  <Input\r\n                    value={syncSettings.sync_urls.public}\r\n                    readOnly\r\n                    className=\"flex-1 font-mono text-sm\"\r\n                  />\r\n                  <Button\r\n                    size=\"sm\"\r\n                    variant=\"outline\"\r\n                    onClick={() => copyToClipboard(syncSettings.sync_urls.public, 'Sync URL')}\r\n                    className=\"shrink-0\"\r\n                  >\r\n                    {copiedUrl === 'Sync URL' ? (\r\n                      <CheckCircle className=\"h-4 w-4 text-green-600\" />\r\n                    ) : (\r\n                      <Copy className=\"h-4 w-4\" />\r\n                    )}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Token Status */}\r\n              <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Shield className=\"h-4 w-4 text-gray-600\" />\r\n                  <span className=\"text-sm font-medium\">Sync Token</span>\r\n                  {isTokenExpired(syncSettings.token_expires_at) ? (\r\n                    <Badge variant=\"destructive\">\r\n                      <AlertCircle className=\"h-3 w-3 mr-1\" />\r\n                      Expired\r\n                    </Badge>\r\n                  ) : (\r\n                    <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\r\n                      <CheckCircle className=\"h-3 w-3 mr-1\" />\r\n                      Valid\r\n                    </Badge>\r\n                  )}\r\n                </div>\r\n                \r\n                <div className=\"flex items-center gap-2\">\r\n                  <div className=\"text-sm text-gray-600\">\r\n                    <Clock className=\"h-3 w-3 inline mr-1\" />\r\n                    Expires: {format(new Date(syncSettings.token_expires_at), 'MMM dd, yyyy')}\r\n                  </div>\r\n                  <Button\r\n                    size=\"sm\"\r\n                    variant=\"outline\"\r\n                    onClick={handleRegenerateToken}\r\n                    disabled={regenerating}\r\n                  >\r\n                    {regenerating ? (\r\n                      <RefreshCw className=\"h-4 w-4 animate-spin\" />\r\n                    ) : (\r\n                      <RefreshCw className=\"h-4 w-4\" />\r\n                    )}\r\n                    Regenerate\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Setup Instructions */}\r\n              <div className=\"space-y-4\">\r\n                <h4 className=\"font-medium text-gray-900\">How to Subscribe</h4>\r\n                \r\n                <div className=\"grid gap-4\">\r\n                  {/* Google Calendar */}\r\n                  <div className=\"p-4 border rounded-lg\">\r\n                    <div className=\"flex items-center gap-2 mb-2\">\r\n                      <div className=\"w-6 h-6 bg-blue-600 rounded flex items-center justify-center\">\r\n                        <span className=\"text-white text-xs font-bold\">G</span>\r\n                      </div>\r\n                      <span className=\"font-medium\">Google Calendar</span>\r\n                    </div>\r\n                    <p className=\"text-sm text-gray-600 mb-2\">\r\n                      1. Open Google Calendar<br/>\r\n                      2. Click the \"+\" next to \"Other calendars\"<br/>\r\n                      3. Choose \"From URL\"<br/>\r\n                      4. Paste the sync URL above\r\n                    </p>\r\n                    <Button\r\n                      size=\"sm\"\r\n                      variant=\"outline\"\r\n                      onClick={() => copyToClipboard(syncSettings.sync_urls.public, 'Google Calendar URL')}\r\n                    >\r\n                      {copiedUrl === 'Google Calendar URL' ? (\r\n                        <CheckCircle className=\"h-4 w-4 mr-2 text-green-600\" />\r\n                      ) : (\r\n                        <Copy className=\"h-4 w-4 mr-2\" />\r\n                      )}\r\n                      Copy URL\r\n                    </Button>\r\n                  </div>\r\n\r\n                  {/* Apple Calendar */}\r\n                  <div className=\"p-4 border rounded-lg\">\r\n                    <div className=\"flex items-center gap-2 mb-2\">\r\n                      <div className=\"w-6 h-6 bg-gray-900 rounded flex items-center justify-center\">\r\n                        <span className=\"text-white text-xs\">🍎</span>\r\n                      </div>\r\n                      <span className=\"font-medium\">Apple Calendar</span>\r\n                    </div>\r\n                    <p className=\"text-sm text-gray-600 mb-2\">\r\n                      1. Open Calendar app<br/>\r\n                      2. Go to File → New Calendar Subscription<br/>\r\n                      3. Paste the sync URL above<br/>\r\n                      4. Click Subscribe\r\n                    </p>\r\n                    <Button\r\n                      size=\"sm\"\r\n                      variant=\"outline\"\r\n                      onClick={() => copyToClipboard(syncSettings.sync_urls.public, 'Apple Calendar URL')}\r\n                    >\r\n                      {copiedUrl === 'Apple Calendar URL' ? (\r\n                        <CheckCircle className=\"h-4 w-4 mr-2 text-green-600\" />\r\n                      ) : (\r\n                        <Copy className=\"h-4 w-4 mr-2\" />\r\n                      )}\r\n                      Copy URL\r\n                    </Button>\r\n                  </div>\r\n\r\n                  {/* Outlook */}\r\n                  <div className=\"p-4 border rounded-lg\">\r\n                    <div className=\"flex items-center gap-2 mb-2\">\r\n                      <div className=\"w-6 h-6 bg-blue-500 rounded flex items-center justify-center\">\r\n                        <span className=\"text-white text-xs font-bold\">O</span>\r\n                      </div>\r\n                      <span className=\"font-medium\">Microsoft Outlook</span>\r\n                    </div>\r\n                    <p className=\"text-sm text-gray-600 mb-2\">\r\n                      1. Open Outlook<br/>\r\n                      2. Go to File → Account Settings → Account Settings<br/>\r\n                      3. Click \"Internet Calendars\" tab<br/>\r\n                      4. Click \"New\" and paste the sync URL\r\n                    </p>\r\n                    <Button\r\n                      size=\"sm\"\r\n                      variant=\"outline\"\r\n                      onClick={() => copyToClipboard(syncSettings.sync_urls.public, 'Outlook URL')}\r\n                    >\r\n                      {copiedUrl === 'Outlook URL' ? (\r\n                        <CheckCircle className=\"h-4 w-4 mr-2 text-green-600\" />\r\n                      ) : (\r\n                        <Copy className=\"h-4 w-4 mr-2\" />\r\n                      )}\r\n                      Copy URL\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Security Notice */}\r\n              <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\r\n                <div className=\"flex items-start gap-2\">\r\n                  <Info className=\"h-5 w-5 text-blue-600 mt-0.5\" />\r\n                  <div className=\"text-sm text-blue-800\">\r\n                    <p className=\"font-medium mb-1\">Security Notice</p>\r\n                    <p>\r\n                      Only events marked as \"Public\" will be included in the sync. \r\n                      Private events remain private and are not shared through this URL.\r\n                      Keep your sync URL secure and regenerate it if compromised.\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n\r\n          {!syncSettings.public_sync_enabled && (\r\n            <div className=\"text-center py-8\">\r\n              <Calendar className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\r\n              <p className=\"text-gray-600 mb-2\">Public calendar sync is disabled</p>\r\n              <p className=\"text-sm text-gray-500\">\r\n                Enable public sync to generate a URL for subscribing to your calendar in external apps.\r\n              </p>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\calendar\\CreateEventModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'errors' is assigned a value but never used.","line":24,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React from 'react';\r\nimport { toast } from 'sonner';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { X, Calendar, Clock, Tag, AlertCircle } from 'lucide-react';\r\nimport { useFormState } from '@/hooks/useFormValidation';\r\nimport { createCalendarEventInputSchema } from '@/lib/validation/schemas';\r\n\r\ninterface CreateEventModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onEventCreated: () => void;\r\n}\r\n\r\nfunction CreateEventModal({ isOpen, onClose, onEventCreated }: CreateEventModalProps) {\r\n  const {\r\n    values: formData,\r\n    setValue,\r\n    reset,\r\n    validate,\r\n    errors,\r\n  } = useFormState({\r\n    title: '',\r\n    description: '',\r\n    start_time: '',\r\n    end_time: '',\r\n    event_type: 'general',\r\n    priority: 'medium',\r\n  }, createCalendarEventInputSchema);\r\n\r\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\r\n\r\n  const eventTypes = [\r\n    { value: 'general', label: 'General', color: 'bg-gray-100 text-gray-800' },\r\n    { value: 'work', label: 'Work', color: 'bg-blue-100 text-blue-800' },\r\n    { value: 'personal', label: 'Personal', color: 'bg-green-100 text-green-800' },\r\n    { value: 'family', label: 'Family', color: 'bg-purple-100 text-purple-800' },\r\n    { value: 'health', label: 'Health', color: 'bg-red-100 text-red-800' },\r\n    { value: 'social', label: 'Social', color: 'bg-yellow-100 text-yellow-800' }\r\n  ];\r\n\r\n  const priorities = [\r\n    { value: 'low', label: 'Low', color: 'bg-green-100 text-green-800' },\r\n    { value: 'medium', label: 'Medium', color: 'bg-yellow-100 text-yellow-800' },\r\n    { value: 'high', label: 'High', color: 'bg-red-100 text-red-800' }\r\n  ];\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      const isValid = validate();\r\n      if (!isValid) {\r\n        setIsSubmitting(false);\r\n        toast.error('Please fix the highlighted fields');\r\n        return;\r\n      }\r\n\r\n      const response = await fetch('/api/calendar', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        if (result.success) {\r\n          toast.success('Event created successfully!');\r\n          onEventCreated();\r\n          onClose();\r\n          reset();\r\n        } else {\r\n          toast.error(`Failed to create event: ${result.error || 'Unknown error'}`);\r\n        }\r\n      } else {\r\n        const error = await response.json();\r\n        toast.error(`Failed to create event: ${error.error || error.message || 'Unknown error'}`);\r\n      }\r\n    } catch (error) {\r\n      toast.error('Failed to create event. Please try again.');\r\n      console.error('Error creating event:', error);\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\r\n    const { name, value } = e.target;\r\n    setValue(name as keyof typeof formData, value);\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n      <Card className=\"w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\r\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Calendar className=\"h-5 w-5 text-blue-500\" />\r\n            Create New Event\r\n          </CardTitle>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={onClose}\r\n            className=\"h-8 w-8 p-0\"\r\n          >\r\n            <X className=\"h-4 w-4\" />\r\n          </Button>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n            {/* Event Title */}\r\n            <div>\r\n              <label htmlFor=\"title\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                Event Title *\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"title\"\r\n                name=\"title\"\r\n                required\r\n                value={formData.title}\r\n                onChange={handleChange}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                placeholder=\"Enter event title\"\r\n              />\r\n            </div>\r\n\r\n            {/* Description */}\r\n            <div>\r\n              <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                Description\r\n              </label>\r\n              <textarea\r\n                id=\"description\"\r\n                name=\"description\"\r\n                rows={3}\r\n                value={formData.description}\r\n                onChange={handleChange}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                placeholder=\"Event description (optional)\"\r\n              />\r\n            </div>\r\n\r\n            {/* Date and Time */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <label htmlFor=\"start_time\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Start Time *\r\n                </label>\r\n                <input\r\n                  type=\"datetime-local\"\r\n                  id=\"start_time\"\r\n                  name=\"start_time\"\r\n                  required\r\n                  value={formData.start_time}\r\n                  onChange={handleChange}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                />\r\n              </div>\r\n              <div>\r\n                <label htmlFor=\"end_time\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  End Time *\r\n                </label>\r\n                <input\r\n                  type=\"datetime-local\"\r\n                  id=\"end_time\"\r\n                  name=\"end_time\"\r\n                  required\r\n                  value={formData.end_time}\r\n                  onChange={handleChange}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Event Type and Priority */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <label htmlFor=\"event_type\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Event Type\r\n                </label>\r\n                <select\r\n                  id=\"event_type\"\r\n                  name=\"event_type\"\r\n                  value={formData.event_type}\r\n                  onChange={handleChange}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                >\r\n                  {eventTypes.map((type) => (\r\n                    <option key={type.value} value={type.value}>\r\n                      {type.label}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label htmlFor=\"priority\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Priority\r\n                </label>\r\n                <select\r\n                  id=\"priority\"\r\n                  name=\"priority\"\r\n                  value={formData.priority}\r\n                  onChange={handleChange}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                >\r\n                  {priorities.map((priority) => (\r\n                    <option key={priority.value} value={priority.value}>\r\n                      {priority.label}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Selected Type and Priority Display */}\r\n            <div className=\"flex items-center gap-4\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <Tag className=\"h-4 w-4 text-gray-500\" />\r\n                <span className=\"text-sm text-gray-600\">Type:</span>\r\n                <Badge className={eventTypes.find(t => t.value === formData.event_type)?.color}>\r\n                  {eventTypes.find(t => t.value === formData.event_type)?.label}\r\n                </Badge>\r\n              </div>\r\n              <div className=\"flex items-center gap-2\">\r\n                <AlertCircle className=\"h-4 w-4 text-gray-500\" />\r\n                <span className=\"text-sm text-gray-600\">Priority:</span>\r\n                <Badge className={priorities.find(p => p.value === formData.priority)?.color}>\r\n                  {priorities.find(p => p.value === formData.priority)?.label}\r\n                </Badge>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Submit Buttons */}\r\n            <div className=\"flex justify-end space-x-3 pt-4\">\r\n              <Button\r\n                type=\"button\"\r\n                variant=\"outline\"\r\n                onClick={onClose}\r\n                disabled={isSubmitting}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                type=\"submit\"\r\n                disabled={isSubmitting}\r\n                className=\"bg-blue-600 hover:bg-blue-700\"\r\n              >\r\n                {isSubmitting ? (\r\n                  <>\r\n                    <Clock className=\"h-4 w-4 mr-2 animate-spin\" />\r\n                    Creating...\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Calendar className=\"h-4 w-4 mr-2\" />\r\n                    Create Event\r\n                  </>\r\n                )}\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateEventModal;","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\monitoring\\PerformanceDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":6,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingDown' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fetchAIMetrics' is assigned a value but never used.","line":43,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fetchWebSocketMetrics' is assigned a value but never used.","line":44,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fetchSystemMetrics' is assigned a value but never used.","line":45,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fetchRawMetrics' is assigned a value but never used.","line":46,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'recordCustomMetric' is assigned a value but never used.","line":50,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":23},{"ruleId":"prefer-template","severity":1,"message":"Unexpected string concatenation.","line":94,"column":12,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":94,"endColumn":78,"fix":{"range":[2561,2627],"text":"`${Math.round(bytes / Math.pow(1024, i) * 100) / 100  } ${  sizes[i]}`"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":185,"column":12,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":190,"endColumn":12,"fix":{"range":[6068,6264],"text":"error ? <Alert className=\"mb-4\">\r\n              <AlertTriangle className=\"h-4 w-4\" />\r\n              <AlertDescription>{error}</AlertDescription>\r\n            </Alert> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":195,"column":8,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":249,"endColumn":8,"fix":{"range":[6345,8784],"text":"overview ? <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-2 mb-2\">\r\n                <Zap className=\"h-4 w-4 text-blue-500\" />\r\n                <span className=\"text-sm font-medium\">AI Requests</span>\r\n              </div>\r\n              <p className=\"text-2xl font-bold\">{formatNumber(overview.aiMetrics.totalRequests)}</p>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                {formatNumber(overview.aiMetrics.successfulRequests)} successful\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-2 mb-2\">\r\n                <Users className=\"h-4 w-4 text-green-500\" />\r\n                <span className=\"text-sm font-medium\">WebSocket Connections</span>\r\n              </div>\r\n              <p className=\"text-2xl font-bold\">{overview.websocketMetrics.activeConnections}</p>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                {overview.websocketMetrics.totalConnections} total\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-2 mb-2\">\r\n                <Server className=\"h-4 w-4 text-orange-500\" />\r\n                <span className=\"text-sm font-medium\">Memory Usage</span>\r\n              </div>\r\n              <p className=\"text-2xl font-bold\">{formatBytes(overview.systemMetrics.memoryUsage * 1024 * 1024)}</p>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                {formatNumber(overview.systemMetrics.cpuUsage)}% CPU\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p4\">\r\n              <div className=\"flex items-center gap-2 mb-2\">\r\n                <Activity className=\"h-4 w-4 text-purple-500\" />\r\n                <span className=\"text-sm font-medium\">Total Metrics</span>\r\n              </div>\r\n              <p className=\"text-2xl font-bold\">{formatNumber(overview.totalMetrics)}</p>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                Collected metrics\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n        </div> : null"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":3,"source":"// Performance Monitoring Dashboard Component\r\n// This can be easily removed if the performance monitoring doesn't work\r\n\r\n'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { usePerformanceMonitoring } from '@/hooks/usePerformanceMonitoring';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { \r\n  BarChart3, \r\n  Activity, \r\n  Zap, \r\n  Server, \r\n  Users, \r\n  Clock, \r\n  CheckCircle, \r\n  XCircle,\r\n  RefreshCw,\r\n  Play,\r\n  Pause,\r\n  Trash2,\r\n  TrendingUp,\r\n  TrendingDown,\r\n  AlertTriangle\r\n} from 'lucide-react';\r\n\r\nexport function PerformanceDashboard() {\r\n  const {\r\n    overview,\r\n    aiMetrics,\r\n    websocketMetrics,\r\n    systemMetrics,\r\n    rawMetrics,\r\n    isLoading,\r\n    error,\r\n    isEnabled,\r\n    fetchOverview,\r\n    fetchAIMetrics,\r\n    fetchWebSocketMetrics,\r\n    fetchSystemMetrics,\r\n    fetchRawMetrics,\r\n    clearMetrics,\r\n    enableMonitoring,\r\n    disableMonitoring,\r\n    recordCustomMetric,\r\n    startAutoRefresh,\r\n    stopAutoRefresh\r\n  } = usePerformanceMonitoring();\r\n\r\n  const [timeWindow, setTimeWindow] = useState(3600000); // 1 hour\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n  const [autoRefreshEnabled, setAutoRefreshEnabled] = useState(false);\r\n\r\n  const handleRefresh = async () => {\r\n    setIsRefreshing(true);\r\n    try {\r\n      await fetchOverview(timeWindow);\r\n    } finally {\r\n      setIsRefreshing(false);\r\n    }\r\n  };\r\n\r\n  const handleTimeWindowChange = (newTimeWindow: number) => {\r\n    setTimeWindow(newTimeWindow);\r\n    fetchOverview(newTimeWindow);\r\n  };\r\n\r\n  const handleAutoRefreshToggle = () => {\r\n    if (autoRefreshEnabled) {\r\n      stopAutoRefresh();\r\n      setAutoRefreshEnabled(false);\r\n    } else {\r\n      startAutoRefresh(30000); // 30 seconds\r\n      setAutoRefreshEnabled(true);\r\n    }\r\n  };\r\n\r\n  const formatNumber = (num: number, decimals: number = 2) => {\r\n    return num.toLocaleString(undefined, { \r\n      minimumFractionDigits: decimals, \r\n      maximumFractionDigits: decimals \r\n    });\r\n  };\r\n\r\n  const formatBytes = (bytes: number) => {\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    if (bytes === 0) return '0 Bytes';\r\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\r\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\r\n  };\r\n\r\n  const formatDuration = (ms: number) => {\r\n    if (ms < 1000) return `${Math.round(ms)}ms`;\r\n    if (ms < 60000) return `${Math.round(ms / 1000)}s`;\r\n    return `${Math.round(ms / 60000)}m`;\r\n  };\r\n\r\n  const getStatusColor = (value: number, threshold: number) => {\r\n    if (value <= threshold * 0.5) return 'text-green-500';\r\n    if (value <= threshold) return 'text-yellow-500';\r\n    return 'text-red-500';\r\n  };\r\n\r\n  const getStatusIcon = (value: number, threshold: number) => {\r\n    if (value <= threshold * 0.5) return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n    if (value <= threshold) return <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />;\r\n    return <XCircle className=\"h-4 w-4 text-red-500\" />;\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <BarChart3 className=\"h-5 w-5\" />\r\n                Performance Monitoring Dashboard\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Monitor AI system performance, WebSocket connections, and system metrics\r\n              </CardDescription>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <Badge variant={isEnabled ? 'default' : 'secondary'}>\r\n                {isEnabled ? 'Enabled' : 'Disabled'}\r\n              </Badge>\r\n              <Button\r\n                onClick={handleRefresh}\r\n                disabled={isRefreshing || isLoading}\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n              >\r\n                <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />\r\n                Refresh\r\n              </Button>\r\n              <Button\r\n                onClick={handleAutoRefreshToggle}\r\n                variant={autoRefreshEnabled ? 'default' : 'outline'}\r\n                size=\"sm\"\r\n              >\r\n                {autoRefreshEnabled ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\r\n                Auto Refresh\r\n              </Button>\r\n              <Button\r\n                onClick={isEnabled ? disableMonitoring : enableMonitoring}\r\n                variant={isEnabled ? 'destructive' : 'default'}\r\n                size=\"sm\"\r\n              >\r\n                {isEnabled ? 'Disable' : 'Enable'} Monitoring\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {/* Time Window Selector */}\r\n          <div className=\"flex items-center gap-4 mb-4\">\r\n            <span className=\"text-sm font-medium\">Time Window:</span>\r\n            <div className=\"flex gap-2\">\r\n              {[\r\n                { label: '1H', value: 3600000 },\r\n                { label: '6H', value: 21600000 },\r\n                { label: '24H', value: 86400000 },\r\n                { label: '7D', value: 604800000 }\r\n              ].map(({ label, value }) => (\r\n                <Button\r\n                  key={value}\r\n                  onClick={() => handleTimeWindowChange(value)}\r\n                  variant={timeWindow === value ? 'default' : 'outline'}\r\n                  size=\"sm\"\r\n                >\r\n                  {label}\r\n                </Button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Error Display */}\r\n          {error && (\r\n            <Alert className=\"mb-4\">\r\n              <AlertTriangle className=\"h-4 w-4\" />\r\n              <AlertDescription>{error}</AlertDescription>\r\n            </Alert>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Overview Cards */}\r\n      {overview && (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-2 mb-2\">\r\n                <Zap className=\"h-4 w-4 text-blue-500\" />\r\n                <span className=\"text-sm font-medium\">AI Requests</span>\r\n              </div>\r\n              <p className=\"text-2xl font-bold\">{formatNumber(overview.aiMetrics.totalRequests)}</p>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                {formatNumber(overview.aiMetrics.successfulRequests)} successful\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-2 mb-2\">\r\n                <Users className=\"h-4 w-4 text-green-500\" />\r\n                <span className=\"text-sm font-medium\">WebSocket Connections</span>\r\n              </div>\r\n              <p className=\"text-2xl font-bold\">{overview.websocketMetrics.activeConnections}</p>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                {overview.websocketMetrics.totalConnections} total\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-2 mb-2\">\r\n                <Server className=\"h-4 w-4 text-orange-500\" />\r\n                <span className=\"text-sm font-medium\">Memory Usage</span>\r\n              </div>\r\n              <p className=\"text-2xl font-bold\">{formatBytes(overview.systemMetrics.memoryUsage * 1024 * 1024)}</p>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                {formatNumber(overview.systemMetrics.cpuUsage)}% CPU\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p4\">\r\n              <div className=\"flex items-center gap-2 mb-2\">\r\n                <Activity className=\"h-4 w-4 text-purple-500\" />\r\n                <span className=\"text-sm font-medium\">Total Metrics</span>\r\n              </div>\r\n              <p className=\"text-2xl font-bold\">{formatNumber(overview.totalMetrics)}</p>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                Collected metrics\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      )}\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs defaultValue=\"ai\" className=\"space-y-4\">\r\n        <TabsList>\r\n          <TabsTrigger value=\"ai\">AI Performance</TabsTrigger>\r\n          <TabsTrigger value=\"websocket\">WebSocket</TabsTrigger>\r\n          <TabsTrigger value=\"system\">System</TabsTrigger>\r\n          <TabsTrigger value=\"raw\">Raw Data</TabsTrigger>\r\n        </TabsList>\r\n\r\n        {/* AI Performance Tab */}\r\n        <TabsContent value=\"ai\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>AI Performance Metrics</CardTitle>\r\n              <CardDescription>\r\n                AI processing performance and success rates\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {aiMetrics ? (\r\n                <div className=\"space-y-6\">\r\n                  {/* Success Rate */}\r\n                  <div className=\"space-y-2\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-sm font-medium\">Success Rate</span>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        {getStatusIcon(aiMetrics.errorRate, 0.1)}\r\n                        <span className={`text-sm font-bold ${getStatusColor(aiMetrics.errorRate, 0.1)}`}>\r\n                          {formatNumber((1 - aiMetrics.errorRate) * 100, 1)}%\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <Progress value={(1 - aiMetrics.errorRate) * 100} className=\"h-2\" />\r\n                  </div>\r\n\r\n                  {/* Processing Times */}\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                    <div className=\"text-center\">\r\n                      <p className=\"text-2xl font-bold\">{formatNumber(aiMetrics.averageProcessingTime)}ms</p>\r\n                      <p className=\"text-sm text-muted-foreground\">Average</p>\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                      <p className=\"text-2xl font-bold\">{formatNumber(aiMetrics.p95ProcessingTime)}ms</p>\r\n                      <p className=\"text-sm text-muted-foreground\">P95</p>\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                      <p className=\"text-2xl font-bold\">{formatNumber(aiMetrics.p99ProcessingTime)}ms</p>\r\n                      <p className=\"text-sm text-muted-foreground\">P99</p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Provider Distribution */}\r\n                  <div className=\"space-y-2\">\r\n                    <span className=\"text-sm font-medium\">Provider Distribution</span>\r\n                    <div className=\"space-y-1\">\r\n                      {Object.entries(aiMetrics.providerDistribution).map(([provider, count]) => (\r\n                        <div key={provider} className=\"flex items-center justify-between\">\r\n                          <span className=\"text-sm\">{provider}</span>\r\n                          <span className=\"text-sm font-medium\">{count}</span>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Fallback Usage */}\r\n                  <div className=\"space-y-2\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-sm font-medium\">Fallback Usage Rate</span>\r\n                      <span className=\"text-sm font-bold\">{formatNumber(aiMetrics.fallbackUsageRate * 100, 1)}%</span>\r\n                    </div>\r\n                    <Progress value={aiMetrics.fallbackUsageRate * 100} className=\"h-2\" />\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div className=\"text-center py-8 text-muted-foreground\">\r\n                  <BarChart3 className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\r\n                  <p>No AI metrics available</p>\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        {/* WebSocket Tab */}\r\n        <TabsContent value=\"websocket\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>WebSocket Metrics</CardTitle>\r\n              <CardDescription>\r\n                Real-time connection performance and stability\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {websocketMetrics ? (\r\n                <div className=\"space-y-6\">\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    <div className=\"text-center\">\r\n                      <p className=\"text-2xl font-bold\">{websocketMetrics.activeConnections}</p>\r\n                      <p className=\"text-sm text-muted-foreground\">Active Connections</p>\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                      <p className=\"text-2xl font-bold\">{formatNumber(websocketMetrics.messagesPerSecond, 1)}</p>\r\n                      <p className=\"text-sm text-muted-foreground\">Messages/sec</p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-sm font-medium\">Average Connection Duration</span>\r\n                      <span className=\"text-sm font-bold\">{formatDuration(websocketMetrics.averageConnectionDuration)}</span>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-sm font-medium\">Reconnection Rate</span>\r\n                      <span className=\"text-sm font-bold\">{formatNumber(websocketMetrics.reconnectionRate * 100, 1)}%</span>\r\n                    </div>\r\n                    <Progress value={websocketMetrics.reconnectionRate * 100} className=\"h-2\" />\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div className=\"text-center py-8 text-muted-foreground\">\r\n                  <Users className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\r\n                  <p>No WebSocket metrics available</p>\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        {/* System Tab */}\r\n        <TabsContent value=\"system\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>System Metrics</CardTitle>\r\n              <CardDescription>\r\n                Server performance and resource usage\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {systemMetrics ? (\r\n                <div className=\"space-y-6\">\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    <div className=\"text-center\">\r\n                      <p className=\"text-2xl font-bold\">{formatBytes(systemMetrics.memoryUsage * 1024 * 1024)}</p>\r\n                      <p className=\"text-sm text-muted-foreground\">Memory Usage</p>\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                      <p className=\"text-2xl font-bold\">{formatNumber(systemMetrics.cpuUsage, 1)}%</p>\r\n                      <p className=\"text-sm text-muted-foreground\">CPU Usage</p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-sm font-medium\">Average Response Time</span>\r\n                      <span className=\"text-sm font-bold\">{formatNumber(systemMetrics.responseTime)}ms</span>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-sm font-medium\">Error Rate</span>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        {getStatusIcon(systemMetrics.errorRate, 0.05)}\r\n                        <span className={`text-sm font-bold ${getStatusColor(systemMetrics.errorRate, 0.05)}`}>\r\n                          {formatNumber(systemMetrics.errorRate * 100, 2)}%\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <Progress value={systemMetrics.errorRate * 100} className=\"h-2\" />\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-sm font-medium\">Uptime</span>\r\n                      <span className=\"text-sm font-bold\">{formatDuration(systemMetrics.uptime)}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div className=\"text-center py-8 text-muted-foreground\">\r\n                  <Server className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\r\n                  <p>No system metrics available</p>\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        {/* Raw Data Tab */}\r\n        <TabsContent value=\"raw\">\r\n          <Card>\r\n            <CardHeader>\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <CardTitle>Raw Metrics Data</CardTitle>\r\n                  <CardDescription>\r\n                    Detailed performance metrics and logs\r\n                  </CardDescription>\r\n                </div>\r\n                <Button\r\n                  onClick={clearMetrics}\r\n                  variant=\"destructive\"\r\n                  size=\"sm\"\r\n                  disabled={rawMetrics.length === 0}\r\n                >\r\n                  <Trash2 className=\"h-4 w-4\" />\r\n                  Clear Metrics\r\n                </Button>\r\n              </div>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {rawMetrics.length > 0 ? (\r\n                <div className=\"space-y-2 max-h-96 overflow-y-auto\">\r\n                  {rawMetrics.slice(-100).map((metric) => (\r\n                    <div key={metric.id} className=\"border rounded p-2 text-sm\">\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <span className=\"font-medium\">{metric.name}</span>\r\n                        <span className=\"text-muted-foreground\">\r\n                          {metric.value}{metric.unit}\r\n                        </span>\r\n                      </div>\r\n                      <div className=\"text-xs text-muted-foreground\">\r\n                        {metric.timestamp.toLocaleString()} • {metric.type}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                <div className=\"text-center py-8 text-muted-foreground\">\r\n                  <Activity className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\r\n                  <p>No raw metrics available</p>\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\navigation\\NavBarHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\navigation\\NavBarMobileMenu.tsx","messages":[{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":60,"column":8,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":91,"endColumn":8,"fix":{"range":[2490,3905],"text":"isMobileMenuOpen ? <div className=\"lg:hidden\" id=\"mobile-menu\" role=\"menu\" aria-label=\"Main navigation\">\r\n          <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-white border-t border-gray-200\">\r\n            {navLinks.map((link) => (\r\n              <Link\r\n                key={link.href}\r\n                href={link.href}\r\n                className=\"text-gray-600 hover:text-blue-600 block px-3 py-2 rounded-md text-base font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-inset\"\r\n                onClick={() => setIsMobileMenuOpen(false)}\r\n                role=\"menuitem\"\r\n                tabIndex={0}\r\n              >\r\n                {link.label}\r\n              </Link>\r\n            ))}\r\n            \r\n            {/* Mobile XP/Coins */}\r\n            {userData && (\r\n              <div className=\"px-3 py-2 border-t border-gray-200 mt-2 pt-4\">\r\n                <div className=\"flex items-center gap-2 text-sm\">\r\n                  <span className=\"bg-green-100 text-green-800 px-2 py-1 rounded-full font-medium\">\r\n                    XP: {userData.xp}\r\n                  </span>\r\n                  <span className=\"bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full font-medium\">\r\n                    🪙 {userData.coins}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":77,"column":14,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":88,"endColumn":14,"fix":{"range":[3304,3861],"text":"userData ? <div className=\"px-3 py-2 border-t border-gray-200 mt-2 pt-4\">\r\n                <div className=\"flex items-center gap-2 text-sm\">\r\n                  <span className=\"bg-green-100 text-green-800 px-2 py-1 rounded-full font-medium\">\r\n                    XP: {userData.xp}\r\n                  </span>\r\n                  <span className=\"bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full font-medium\">\r\n                    🪙 {userData.coins}\r\n                  </span>\r\n                </div>\r\n              </div> : null"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"'use client'\r\n\r\nimport Link from 'next/link'\r\nimport { useAuth } from '@clerk/nextjs'\r\nimport { useUserData } from '@/hooks/useUserData'\r\n\r\ninterface NavBarMobileMenuProps {\r\n  isMobileMenuOpen: boolean;\r\n  setIsMobileMenuOpen: (open: boolean) => void;\r\n}\r\n\r\nexport default function NavBarMobileMenu({ isMobileMenuOpen, setIsMobileMenuOpen }: NavBarMobileMenuProps) {\r\n  const { isLoaded, isSignedIn } = useAuth()\r\n  const { userData } = useUserData()\r\n\r\n  const navLinks = [\r\n    { href: \"/dashboard\", label: \"Dashboard\" },\r\n    { href: \"/meal-planner\", label: \"Meal Planner\" },\r\n    { href: \"/planner\", label: \"Planner\" },\r\n    { href: \"/shopping-lists\", label: \"Shopping Lists\" },\r\n    { href: \"/chores\", label: \"Chores\" },\r\n    { href: \"/rewards\", label: \"Rewards\" },\r\n    { href: \"/leaderboard\", label: \"Leaderboard\" },\r\n    { href: \"/calendar\", label: \"Calendar\" },\r\n    { href: \"/notifications\", label: \"Notifications\" },\r\n    { href: \"/reminders\", label: \"Reminders\" },\r\n    { href: \"/digest-preferences\", label: \"Digest Settings\" },\r\n  ];\r\n\r\n  if (!isLoaded || !isSignedIn) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* Mobile menu button */}\r\n      <div className=\"lg:hidden\">\r\n        <button\r\n          onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\r\n          className=\"inline-flex items-center justify-center p-2 rounded-md text-gray-600 hover:text-blue-600 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500\"\r\n          aria-expanded={isMobileMenuOpen}\r\n          aria-label={isMobileMenuOpen ? \"Close mobile menu\" : \"Open mobile menu\"}\r\n          aria-controls=\"mobile-menu\"\r\n          type=\"button\"\r\n        >\r\n          <span className=\"sr-only\">{isMobileMenuOpen ? \"Close main menu\" : \"Open main menu\"}</span>\r\n          {!isMobileMenuOpen ? (\r\n            <svg className=\"block h-6 w-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\r\n            </svg>\r\n          ) : (\r\n            <svg className=\"block h-6 w-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n            </svg>\r\n          )}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Mobile menu */}\r\n      {isMobileMenuOpen && (\r\n        <div className=\"lg:hidden\" id=\"mobile-menu\" role=\"menu\" aria-label=\"Main navigation\">\r\n          <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-white border-t border-gray-200\">\r\n            {navLinks.map((link) => (\r\n              <Link\r\n                key={link.href}\r\n                href={link.href}\r\n                className=\"text-gray-600 hover:text-blue-600 block px-3 py-2 rounded-md text-base font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-inset\"\r\n                onClick={() => setIsMobileMenuOpen(false)}\r\n                role=\"menuitem\"\r\n                tabIndex={0}\r\n              >\r\n                {link.label}\r\n              </Link>\r\n            ))}\r\n            \r\n            {/* Mobile XP/Coins */}\r\n            {userData && (\r\n              <div className=\"px-3 py-2 border-t border-gray-200 mt-2 pt-4\">\r\n                <div className=\"flex items-center gap-2 text-sm\">\r\n                  <span className=\"bg-green-100 text-green-800 px-2 py-1 rounded-full font-medium\">\r\n                    XP: {userData.xp}\r\n                  </span>\r\n                  <span className=\"bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full font-medium\">\r\n                    🪙 {userData.coins}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\navigation\\NavBarNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\navigation\\NavBarUserSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\onboarding\\GameModeSelector.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":83,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":83,"endColumn":18,"suggestions":[{"fix":{"range":[2112,2180],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { useAuth, useUser } from '@clerk/nextjs';\r\n\r\ntype GameMode = 'single' | 'couple' | 'family' | 'roommates' | 'custom';\r\n\r\ninterface GameModeOption {\r\n  value: GameMode;\r\n  label: string;\r\n  description: string;\r\n}\r\n\r\nconst gameModeOptions: GameModeOption[] = [\r\n  {\r\n    value: 'single',\r\n    label: 'Single',\r\n    description: 'Living alone and managing your own space'\r\n  },\r\n  {\r\n    value: 'couple',\r\n    label: 'Couple',\r\n    description: 'Living with a partner or significant other'\r\n  },\r\n  {\r\n    value: 'family',\r\n    label: 'Family',\r\n    description: 'Living with children and/or extended family'\r\n  },\r\n  {\r\n    value: 'roommates',\r\n    label: 'Roommates',\r\n    description: 'Sharing space with friends or acquaintances'\r\n  },\r\n  {\r\n    value: 'custom',\r\n    label: 'Custom',\r\n    description: 'Other household arrangement'\r\n  }\r\n];\r\n\r\nexport function GameModeSelector() {\r\n  const { isSignedIn, isLoaded } = useAuth();\r\n  const { user } = useUser();\r\n  const [selectedGameMode, setSelectedGameMode] = useState<GameMode | null>(null);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!selectedGameMode) {\r\n      setError('Please select a household type');\r\n      return;\r\n    }\r\n\r\n    if (!isSignedIn || !user?.id) {\r\n      setError('You must be signed in to update household settings');\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch('/api/update-game-mode', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ game_mode: selectedGameMode }),\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (!response.ok) {\r\n        setError(result.error || 'Failed to update household type');\r\n        return;\r\n      }\r\n\r\n      setSuccess(true);\r\n      console.log('Successfully updated game mode to:', selectedGameMode);\r\n    } catch (err) {\r\n      console.error('Error updating game mode:', err);\r\n      setError('An unexpected error occurred');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  if (!isLoaded) {\r\n    return (\r\n      <div className=\"flex items-center justify-center p-8\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!isSignedIn) {\r\n    return (\r\n      <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\r\n        <p className=\"text-yellow-800\">Please sign in to configure your household settings.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (success) {\r\n    return (\r\n      <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\r\n        <p className=\"text-green-800 font-medium\">✅ Household type updated successfully!</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"max-w-2xl mx-auto p-6\">\r\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\r\n            What type of household is this?\r\n          </h2>\r\n          <p className=\"text-gray-600 mb-6\">\r\n            This helps us customize your experience and provide relevant features.\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"space-y-3\">\r\n          {gameModeOptions.map((option) => (\r\n            <label\r\n              key={option.value}\r\n              className={`flex items-start p-4 border rounded-lg cursor-pointer transition-colors ${\r\n                selectedGameMode === option.value\r\n                  ? 'border-blue-500 bg-blue-50'\r\n                  : 'border-gray-200 hover:border-gray-300'\r\n              }`}\r\n            >\r\n              <input\r\n                type=\"radio\"\r\n                name=\"gameMode\"\r\n                value={option.value}\r\n                checked={selectedGameMode === option.value}\r\n                onChange={(e) => setSelectedGameMode(e.target.value as GameMode)}\r\n                className=\"mt-1 h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500\"\r\n              />\r\n              <div className=\"ml-3 flex-1\">\r\n                <div className=\"font-medium text-gray-900\">{option.label}</div>\r\n                <div className=\"text-sm text-gray-500\">{option.description}</div>\r\n              </div>\r\n            </label>\r\n          ))}\r\n        </div>\r\n\r\n        {error ? <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n            <p className=\"text-red-800\">{error}</p>\r\n          </div> : null}\r\n\r\n        <div className=\"flex justify-end\">\r\n          <button\r\n            type=\"submit\"\r\n            disabled={!selectedGameMode || isSubmitting}\r\n            className={`px-6 py-2 rounded-lg font-medium transition-colors ${\r\n              selectedGameMode && !isSubmitting\r\n                ? 'bg-blue-600 text-white hover:bg-blue-700'\r\n                : 'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n            }`}\r\n          >\r\n            {isSubmitting ? 'Updating...' : 'Save Household Type'}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\pages\\ShoppingListsPageOptimized.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":14},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":368,"column":8,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":377,"endColumn":8,"fix":{"range":[11790,12171],"text":"error ? <div className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <p className=\"text-red-800\">{error}</p>\r\n            <Button variant=\"ghost\" size=\"sm\" onClick={clearError}>\r\n              <X className=\"h-4 w-4\" />\r\n            </Button>\r\n          </div>\r\n        </div> : null"}},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":564,"column":35,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":564,"endColumn":40},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":634,"column":31,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":634,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\r\n\r\nimport React, { useState, useCallback, useMemo } from 'react';\r\nimport { useAuth } from '@clerk/nextjs';\r\nimport { useRouter } from 'next/navigation';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { FormInput } from '@/components/ui/FormInput';\r\nimport { useFocusManagement } from '@/hooks/useFocusManagement';\r\nimport { useErrorHandler } from '@/hooks/useErrorHandler';\r\nimport { useFormState } from '@/hooks/useFormValidation';\r\nimport { createShoppingListSchema } from '@/lib/validation/schemas';\r\nimport { \r\n  Plus, \r\n  ShoppingCart, \r\n  Brain, \r\n  Lightbulb, \r\n  TrendingUp, \r\n  Target,\r\n  Clock,\r\n  CheckCircle,\r\n  Sparkles,\r\n  BarChart3,\r\n  Zap,\r\n  X\r\n} from 'lucide-react';\r\nimport { \r\n  useShoppingLists, \r\n  useCreateShoppingList, \r\n  useOptimisticShoppingLists \r\n} from '@/hooks/useShoppingLists';\r\n\r\ninterface ShoppingList {\r\n  id: string;\r\n  name: string;\r\n  household_id: string;\r\n  created_by: string;\r\n  created_at: string;\r\n  is_completed: boolean;\r\n  total_items: number;\r\n  completed_items: number;\r\n  ai_suggestions_count: number;\r\n  ai_confidence: number;\r\n}\r\n\r\ninterface AIShoppingInsights {\r\n  total_lists: number;\r\n  completed_lists: number;\r\n  average_items_per_list: number;\r\n  most_common_categories: string[];\r\n  shopping_frequency: 'daily' | 'weekly' | 'biweekly' | 'monthly';\r\n  suggested_improvements: string[];\r\n  ai_learning_progress: number;\r\n  next_shopping_prediction: string;\r\n}\r\n\r\n// Memoized components for better performance\r\nconst ShoppingListCard = React.memo(({ \r\n  list, \r\n  onView, \r\n  onAddItems \r\n}: { \r\n  list: ShoppingList; \r\n  onView: (id: string) => void;\r\n  onAddItems: (id: string) => void;\r\n}) => {\r\n  const getCompletionPercentage = useCallback((list: ShoppingList) => {\r\n    if (list.total_items === 0) return 0;\r\n    return Math.round((list.completed_items / list.total_items) * 100);\r\n  }, []);\r\n\r\n  const getAIConfidenceBadge = useCallback((confidence: number) => {\r\n    if (confidence >= 80) return 'bg-green-100 text-green-800';\r\n    if (confidence >= 60) return 'bg-yellow-100 text-yellow-800';\r\n    return 'bg-red-100 text-red-800';\r\n  }, []);\r\n\r\n  const completionPercentage = useMemo(() => getCompletionPercentage(list), [list, getCompletionPercentage]);\r\n  const confidenceBadge = useMemo(() => getAIConfidenceBadge(list.ai_confidence), [list.ai_confidence, getAIConfidenceBadge]);\r\n\r\n  return (\r\n    <Card \r\n      className=\"hover:shadow-lg transition-shadow cursor-pointer\"\r\n      onClick={() => onView(list.id)}\r\n    >\r\n      <CardHeader>\r\n        <div className=\"flex items-start justify-between\">\r\n          <div className=\"flex-1\">\r\n            <CardTitle className=\"text-lg mb-2\">{list.name}</CardTitle>\r\n          </div>\r\n          <div className=\"flex flex-col items-end gap-2\">\r\n            {list.ai_suggestions_count > 0 && (\r\n              <Badge variant=\"secondary\" className={confidenceBadge}>\r\n                <Brain className=\"h-3 w-3 mr-1\" />\r\n                AI {list.ai_confidence}%\r\n              </Badge>\r\n            )}\r\n            <Badge variant={list.is_completed ? \"default\" : \"secondary\"}>\r\n              {list.is_completed ? \"Completed\" : \"Active\"}\r\n            </Badge>\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"space-y-3\">\r\n          <div className=\"flex justify-between text-sm\">\r\n            <span>Progress</span>\r\n            <span>{completionPercentage}%</span>\r\n          </div>\r\n          <Progress value={completionPercentage} />\r\n          \r\n          <div className=\"flex justify-between text-sm text-gray-600\">\r\n            <span>{list.completed_items} of {list.total_items} items</span>\r\n            <span>{new Date(list.created_at).toLocaleDateString()}</span>\r\n          </div>\r\n          \r\n          <div className=\"flex gap-2 pt-2\">\r\n            <Button \r\n              size=\"sm\" \r\n              variant=\"outline\" \r\n              className=\"flex-1 text-xs\"\r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n                onAddItems(list.id);\r\n              }}\r\n            >\r\n              <Plus className=\"h-3 w-3 mr-1\" />\r\n              Add Items\r\n            </Button>\r\n            <Button \r\n              size=\"sm\" \r\n              variant=\"ghost\" \r\n              className=\"text-xs\"\r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n                onView(list.id);\r\n              }}\r\n            >\r\n              View\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n});\r\n\r\nShoppingListCard.displayName = 'ShoppingListCard';\r\n\r\nconst CreateListModal = React.memo(({ \r\n  isOpen, \r\n  onClose, \r\n  onCreate \r\n}: { \r\n  isOpen: boolean; \r\n  onClose: () => void; \r\n  onCreate: (data: { name: string; description: string }) => void;\r\n}) => {\r\n  const { modalRef } = useFocusManagement({ isOpen, onClose });\r\n  const {\r\n    values: formData,\r\n    setValue,\r\n    reset,\r\n    validate,\r\n    errors,\r\n    clearErrors,\r\n  } = useFormState({ name: '', description: '' }, createShoppingListSchema.omit({ household_id: true }));\r\n\r\n  const handleSubmit = useCallback((e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    const isValid = validate();\r\n    if (!isValid) {\r\n      return;\r\n    }\r\n    \r\n    onCreate(formData);\r\n    reset();\r\n    clearErrors();\r\n    onClose();\r\n  }, [formData, onCreate, onClose, clearErrors, reset, validate]);\r\n\r\n  const handleClose = useCallback(() => {\r\n    reset();\r\n    clearErrors();\r\n    onClose();\r\n  }, [onClose, clearErrors, reset]);\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\" role=\"dialog\" aria-modal=\"true\">\r\n      <div \r\n        ref={modalRef}\r\n        className=\"bg-white rounded-lg p-6 w-full max-w-md mx-4\"\r\n        aria-labelledby=\"modal-title\"\r\n      >\r\n        <div className=\"flex items-center justify-between mb-4\">\r\n          <h2 id=\"modal-title\" className=\"text-xl font-semibold\">Create New Shopping List</h2>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={handleClose}\r\n            className=\"h-8 w-8 p-0\"\r\n            aria-label=\"Close modal\"\r\n          >\r\n            <X className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n        \r\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n          <FormInput\r\n            label=\"List Name\"\r\n            value={formData.name}\r\n            onChange={(e) => setValue('name', e.target.value)}\r\n            placeholder=\"e.g., Groceries for this week\"\r\n            required\r\n            error={errors.find(e => e.field === 'name')?.message}\r\n          />\r\n          \r\n          <FormInput\r\n            label=\"Description (optional)\"\r\n            value={formData.description}\r\n            onChange={(e) => setValue('description', e.target.value)}\r\n            placeholder=\"e.g., Weekly grocery shopping for family of 4\"\r\n            multiline\r\n            rows={3}\r\n          />\r\n          \r\n          <div className=\"flex gap-3 pt-2\">\r\n            <Button\r\n              type=\"submit\"\r\n              disabled={!formData.name.trim()}\r\n              className=\"flex-1\"\r\n            >\r\n              Create List\r\n            </Button>\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"outline\"\r\n              onClick={handleClose}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nCreateListModal.displayName = 'CreateListModal';\r\n\r\nexport default function ShoppingListsPageOptimized() {\r\n  const { userId } = useAuth();\r\n  const router = useRouter();\r\n  const [aiInsights] = useState<AIShoppingInsights | null>(null);\r\n  const [activeTab, setActiveTab] = useState('overview');\r\n  const [showCreateModal, setShowCreateModal] = useState(false);\r\n  const { error, handleError, clearError } = useErrorHandler();\r\n\r\n  // React Query hooks\r\n  const { \r\n    data: shoppingListsData, \r\n    isLoading: loading, \r\n    error: shoppingListsError \r\n  } = useShoppingLists();\r\n  \r\n  const createShoppingList = useCreateShoppingList();\r\n  const { addOptimisticList, removeOptimisticList } = useOptimisticShoppingLists();\r\n\r\n  // Extract data from React Query\r\n  const shoppingLists = useMemo(() => shoppingListsData?.shoppingLists || [], [shoppingListsData?.shoppingLists]);\r\n\r\n  // Memoized handlers\r\n  const handleCreateList = useCallback(async (data: { name: string; description: string }) => {\r\n    if (!data.name.trim()) return;\r\n    \r\n    try {\r\n      // Add optimistic update\r\n      addOptimisticList({\r\n        name: data.name.trim(),\r\n        household_id: '', // Will be filled by the API\r\n        created_by: userId || '',\r\n        is_completed: false,\r\n        total_items: 0,\r\n        completed_items: 0,\r\n        ai_suggestions_count: 0,\r\n        ai_confidence: 0,\r\n      });\r\n\r\n      // Create the shopping list\r\n      await createShoppingList.mutateAsync({\r\n        name: data.name.trim(),\r\n        household_id: '', // Will be filled by the API\r\n      });\r\n\r\n      // Clear form and close modal\r\n      setShowCreateModal(false);\r\n    } catch (error) {\r\n      // Remove optimistic update on error\r\n      removeOptimisticList(`temp-${Date.now()}`);\r\n      handleError(error as Error);\r\n    }\r\n  }, [addOptimisticList, createShoppingList, removeOptimisticList, userId, handleError]);\r\n\r\n  const handleViewList = useCallback((id: string) => {\r\n    router.push(`/shopping-lists/${id}`);\r\n  }, [router]);\r\n\r\n  const handleAddItems = useCallback((id: string) => {\r\n    router.push(`/shopping-lists/${id}`);\r\n  }, [router]);\r\n\r\n  // Memoized computed values\r\n  const recentLists = useMemo(() => shoppingLists.slice(0, 3), [shoppingLists]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-center\">\r\n          <ShoppingCart className=\"h-12 w-12 animate-pulse mx-auto mb-4 text-blue-500\" />\r\n          <p className=\"text-lg text-gray-600\">Loading Smart Shopping Lists...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Handle errors\r\n  if (shoppingListsError) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-center\">\r\n          <ShoppingCart className=\"h-16 w-16 mx-auto mb-6 text-red-500\" />\r\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Error Loading Lists</h2>\r\n          <p className=\"text-gray-600 mb-6\">\r\n            {shoppingListsError.message || 'Failed to load shopping lists'}\r\n          </p>\r\n          <Button onClick={() => window.location.reload()}>\r\n            Try Again\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      {/* Header */}\r\n      <div className=\"mb-8\">\r\n        <div className=\"flex items-center gap-3 mb-4\">\r\n          <ShoppingCart className=\"h-8 w-8 text-blue-500\" />\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">Smart Shopping Lists</h1>\r\n          <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-800\">\r\n            <Brain className=\"h-4 w-4 mr-1\" />\r\n            AI-Powered\r\n          </Badge>\r\n        </div>\r\n        <p className=\"text-gray-600 text-lg\">\r\n          Intelligent shopping lists that learn from your habits and suggest items automatically\r\n        </p>\r\n      </div>\r\n\r\n      {/* Error Display */}\r\n      {error && (\r\n        <div className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <p className=\"text-red-800\">{error}</p>\r\n            <Button variant=\"ghost\" size=\"sm\" onClick={clearError}>\r\n              <X className=\"h-4 w-4\" />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\r\n        <TabsList className=\"grid w-full grid-cols-4\">\r\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\r\n          <TabsTrigger value=\"all-lists\">All Lists</TabsTrigger>\r\n          <TabsTrigger value=\"ai-insights\">AI Insights</TabsTrigger>\r\n          <TabsTrigger value=\"suggestions\">Smart Suggestions</TabsTrigger>\r\n        </TabsList>\r\n\r\n        {/* Overview Tab */}\r\n        <TabsContent value=\"overview\" className=\"space-y-6\">\r\n          {/* Quick Actions */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Zap className=\"h-5 w-5 text-yellow-500\" />\r\n                Quick Actions\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Create new lists or get AI-powered suggestions\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-4\">\r\n              <div className=\"flex flex-wrap gap-3\">\r\n                <Button \r\n                  className=\"bg-blue-600 hover:bg-blue-700\"\r\n                  onClick={() => setShowCreateModal(true)}\r\n                >\r\n                  <Plus className=\"h-4 w-4 mr-2\" />\r\n                  Create New List\r\n                </Button>\r\n                <Button variant=\"outline\" className=\"border-purple-200 text-purple-700 hover:bg-purple-50\">\r\n                  <Brain className=\"h-4 w-4 mr-2\" />\r\n                  AI Suggestions\r\n                </Button>\r\n                <Button variant=\"outline\" className=\"border-green-200 text-green-700 hover:bg-green-50\">\r\n                  <Target className=\"h-4 w-4 mr-2\" />\r\n                  Smart Templates\r\n                </Button>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Recent Lists */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Clock className=\"h-5 w-5\" />\r\n                Recent Lists\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Your most recent shopping lists with AI insights\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {recentLists.length > 0 ? (\r\n                <div className=\"space-y-4\">\r\n                  {recentLists.map((list) => (\r\n                    <div key={list.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\r\n                      <div className=\"flex-1\">\r\n                        <div className=\"flex items-center gap-2 mb-2\">\r\n                          <h4 className=\"font-medium\">{list.name}</h4>\r\n                          {list.ai_suggestions_count > 0 && (\r\n                            <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-800 text-xs\">\r\n                              <Sparkles className=\"h-3 w-3 mr-1\" />\r\n                              {list.ai_suggestions_count} AI suggestions\r\n                            </Badge>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"flex items-center gap-4 text-sm text-gray-600\">\r\n                          <span>{list.total_items} items</span>\r\n                          <span>{list.completed_items} completed</span>\r\n                          <span className={list.ai_confidence >= 80 ? 'text-green-600' : list.ai_confidence >= 60 ? 'text-yellow-600' : 'text-red-600'}>\r\n                            AI Confidence: {list.ai_confidence}%\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"text-right\">\r\n                        <div className=\"text-sm text-gray-600 mb-1\">Progress</div>\r\n                        <Progress value={list.total_items > 0 ? Math.round((list.completed_items / list.total_items) * 100) : 0} className=\"w-20\" />\r\n                        <div className=\"text-xs text-gray-500 mt-1\">\r\n                          {list.total_items > 0 ? Math.round((list.completed_items / list.total_items) * 100) : 0}%\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                <p className=\"text-gray-600 text-center py-8\">\r\n                  No shopping lists yet. Create your first one to get started!\r\n                </p>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        {/* All Lists Tab */}\r\n        <TabsContent value=\"all-lists\" className=\"space-y-6\">\r\n          <div className=\"flex justify-between items-center mb-6\">\r\n            <h2 className=\"text-2xl font-bold\">All Shopping Lists</h2>\r\n            <Button \r\n              className=\"bg-blue-600 hover:bg-blue-700\"\r\n              onClick={() => setShowCreateModal(true)}\r\n            >\r\n              <Plus className=\"h-4 w-4 mr-2\" />\r\n              New List\r\n            </Button>\r\n          </div>\r\n\r\n          {shoppingLists.length > 0 ? (\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n              {shoppingLists.map((list) => (\r\n                <ShoppingListCard\r\n                  key={list.id}\r\n                  list={list}\r\n                  onView={handleViewList}\r\n                  onAddItems={handleAddItems}\r\n                />\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <Card>\r\n              <CardContent className=\"text-center py-12\">\r\n                <ShoppingCart className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\r\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No shopping lists yet</h3>\r\n                <p className=\"text-gray-600 mb-4\">\r\n                  Create your first shopping list to start organizing your shopping trips\r\n                </p>\r\n                <Button className=\"bg-blue-600 hover:bg-blue-700\">\r\n                  <Plus className=\"h-4 w-4 mr-2\" />\r\n                  Create First List\r\n                </Button>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n        </TabsContent>\r\n\r\n        {/* AI Insights Tab */}\r\n        <TabsContent value=\"ai-insights\" className=\"space-y-6\">\r\n          {aiInsights ? (\r\n            <>\r\n              {/* Shopping Patterns */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center gap-2\">\r\n                    <TrendingUp className=\"h-5 w-5 text-blue-500\" />\r\n                    Shopping Patterns\r\n                  </CardTitle>\r\n                  <CardDescription>\r\n                    AI analysis of your shopping behavior and habits\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                    <div>\r\n                      <h4 className=\"font-medium mb-3\">Shopping Frequency</h4>\r\n                      <Badge variant=\"secondary\" className=\"text-lg px-4 py-2\">\r\n                        {aiInsights.shopping_frequency}\r\n                      </Badge>\r\n                    </div>\r\n                    <div>\r\n                      <h4 className=\"font-medium mb-3\">Average Items per List</h4>\r\n                      <div className=\"text-2xl font-bold text-blue-600\">\r\n                        {aiInsights.average_items_per_list}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Top Categories */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center gap-2\">\r\n                    <BarChart3 className=\"h-5 w-5 text-green-500\" />\r\n                    Most Common Categories\r\n                  </CardTitle>\r\n                  <CardDescription>\r\n                    What you shop for most frequently\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  {aiInsights.most_common_categories.length > 0 ? (\r\n                    <div className=\"space-y-3\">\r\n                      {aiInsights.most_common_categories.map((category, index) => (\r\n                        <div key={index} className=\"flex items-center gap-3\">\r\n                          <Badge variant=\"secondary\" className=\"w-16 justify-center\">\r\n                            #{index + 1}\r\n                          </Badge>\r\n                          <span className=\"text-sm\">{category}</span>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  ) : (\r\n                    <p className=\"text-gray-600 text-sm\">\r\n                      Categories will appear as you create more shopping lists\r\n                    </p>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* AI Learning Progress */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center gap-2\">\r\n                    <Brain className=\"h-5 w-5 text-purple-500\" />\r\n                    AI Learning Progress\r\n                  </CardTitle>\r\n                  <CardDescription>\r\n                    How well the AI understands your shopping patterns\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"space-y-4\">\r\n                    <div className=\"flex justify-between text-sm\">\r\n                      <span>Pattern Recognition</span>\r\n                      <span>{aiInsights.ai_learning_progress}%</span>\r\n                    </div>\r\n                    <Progress value={aiInsights.ai_learning_progress} />\r\n                    <p className=\"text-sm text-gray-600\">\r\n                      The AI is learning from your shopping habits to provide better suggestions\r\n                    </p>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            </>\r\n          ) : (\r\n            <Card>\r\n              <CardContent className=\"text-center py-12\">\r\n                <Brain className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\r\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">AI Insights Loading</h3>\r\n                <p className=\"text-gray-600\">\r\n                  Creating your first shopping list to generate AI insights\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n        </TabsContent>\r\n\r\n        {/* Smart Suggestions Tab */}\r\n        <TabsContent value=\"suggestions\" className=\"space-y-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Lightbulb className=\"h-5 w-5 text-yellow-500\" />\r\n                Smart Suggestions\r\n              </CardTitle>\r\n              <CardDescription>\r\n                AI-powered recommendations to improve your shopping experience\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {aiInsights?.suggested_improvements && aiInsights.suggested_improvements.length > 0 ? (\r\n                <div className=\"space-y-4\">\r\n                  {aiInsights.suggested_improvements.map((suggestion, index) => (\r\n                    <div key={index} className=\"p-4 bg-blue-50 rounded-lg border border-blue-200\">\r\n                      <div className=\"flex items-start gap-3\">\r\n                        <Lightbulb className=\"h-5 w-5 text-blue-500 mt-0.5 flex-shrink-0\" />\r\n                        <p className=\"text-sm text-blue-800\">{suggestion}</p>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                <div className=\"text-center py-8\">\r\n                  <Lightbulb className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\r\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No suggestions yet</h3>\r\n                  <p className=\"text-gray-600\">\r\n                    Create more shopping lists to get personalized AI recommendations\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n\r\n      {/* Create Shopping List Modal */}\r\n      <CreateListModal\r\n        isOpen={showCreateModal}\r\n        onClose={() => setShowCreateModal(false)}\r\n        onCreate={handleCreateList}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\performance\\PerformanceDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Progress' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingDown' is defined but never used.","line":7,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2419,2422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2419,2422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":101,"column":11,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":101,"endColumn":63,"fix":{"range":[3237,3244],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":104,"column":15,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":104,"endColumn":65,"fix":{"range":[3413,3420],"text":" />"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":126,"column":8,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":131,"endColumn":8,"fix":{"range":[3997,4263],"text":"error ? <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\r\n          <strong className=\"font-bold\">Error!</strong>\r\n          <span className=\"block sm:inline\"> {error}</span>\r\n        </div> : null"}},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":265,"column":27,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":265,"endColumn":32},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":266,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":266,"endColumn":76,"fix":{"range":[9979,9986],"text":" />"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":4,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { TrendingUp, TrendingDown, Activity, Zap } from 'lucide-react';\r\n\r\ninterface PerformanceMetric {\r\n  metric: string;\r\n  value: number;\r\n  description: string;\r\n}\r\n\r\ninterface TableStats {\r\n  schemaname: string;\r\n  tablename: string;\r\n  seq_scan: number;\r\n  idx_scan: number;\r\n  n_live_tup: number;\r\n  n_dead_tup: number;\r\n}\r\n\r\ninterface IndexStats {\r\n  schemaname: string;\r\n  tablename: string;\r\n  indexname: string;\r\n  idx_scan: number;\r\n  idx_tup_read: number;\r\n}\r\n\r\nexport default function PerformanceDashboard() {\r\n  const [metrics, setMetrics] = useState<PerformanceMetric[]>([]);\r\n  const [tableStats, setTableStats] = useState<TableStats[]>([]);\r\n  const [indexStats, setIndexStats] = useState<IndexStats[]>([]);\r\n  const [recommendations, setRecommendations] = useState<string[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchPerformanceData();\r\n    const interval = setInterval(fetchPerformanceData, 60000); // Refresh every minute\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const fetchPerformanceData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Fetch performance metrics\r\n      const metricsResponse = await fetch('/api/performance/metrics');\r\n      if (metricsResponse.ok) {\r\n        const metricsData = await metricsResponse.json();\r\n        setMetrics(metricsData);\r\n      }\r\n\r\n      // Fetch table statistics\r\n      const tableResponse = await fetch('/api/performance/tables');\r\n      if (tableResponse.ok) {\r\n        const tableData = await tableResponse.json();\r\n        setTableStats(tableData);\r\n      }\r\n\r\n      // Fetch index statistics\r\n      const indexResponse = await fetch('/api/performance/indexes');\r\n      if (indexResponse.ok) {\r\n        const indexData = await indexResponse.json();\r\n        setIndexStats(indexData);\r\n      }\r\n\r\n      // Fetch performance recommendations\r\n      const recResponse = await fetch('/api/performance/recommendations');\r\n      if (recResponse.ok) {\r\n        const recData = await recResponse.json();\r\n        setRecommendations(recData.map((r: any) => r.recommendation));\r\n      }\r\n    } catch (err) {\r\n      setError('Failed to fetch performance data');\r\n      console.error('Performance data fetch error:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getPerformanceColor = (value: number, threshold: number) => {\r\n    if (value < threshold * 0.7) return 'text-green-600';\r\n    if (value < threshold) return 'text-yellow-600';\r\n    return 'text-red-600';\r\n  };\r\n\r\n  const getTableEfficiency = (seqScan: number, idxScan: number) => {\r\n    const total = seqScan + idxScan;\r\n    if (total === 0) return 100;\r\n    return Math.round((idxScan / total) * 100);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"animate-pulse\">\r\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-4\"></div>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            {[1, 2, 3].map((i) => (\r\n              <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold tracking-tight\">Performance Dashboard</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Monitor database performance, query efficiency, and system health\r\n          </p>\r\n        </div>\r\n        <Button onClick={fetchPerformanceData} variant=\"outline\">\r\n          Refresh\r\n        </Button>\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\r\n          <strong className=\"font-bold\">Error!</strong>\r\n          <span className=\"block sm:inline\"> {error}</span>\r\n        </div>\r\n      )}\r\n\r\n      {/* Performance Metrics */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n        {metrics.map((metric) => (\r\n          <Card key={metric.metric}>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium capitalize\">\r\n                {metric.metric.replace('_', ' ')}\r\n              </CardTitle>\r\n              <Activity className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className={`text-2xl font-bold ${getPerformanceColor(metric.value, 100)}`}>\r\n                {metric.value.toLocaleString()}\r\n              </div>\r\n              <p className=\"text-xs text-muted-foreground\">{metric.description}</p>\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Table Performance */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Table Performance</CardTitle>\r\n          <CardDescription>\r\n            Monitor table access patterns and efficiency\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            {tableStats.map((table) => (\r\n              <div\r\n                key={`${table.schemaname}.${table.tablename}`}\r\n                className=\"flex items-center justify-between p-4 border rounded-lg\"\r\n              >\r\n                <div className=\"flex items-center space-x-3\">\r\n                  {/* Database icon removed as per edit hint */}\r\n                  <div>\r\n                    <div className=\"font-medium\">{table.tablename}</div>\r\n                    <div className=\"text-sm text-muted-foreground\">\r\n                      {table.n_live_tup.toLocaleString()} rows\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex items-center space-x-4\">\r\n                  <div className=\"text-right\">\r\n                    <div className=\"text-sm font-medium\">Index Usage</div>\r\n                    <div className={`text-sm ${getPerformanceColor(getTableEfficiency(table.seq_scan, table.idx_scan), 80)}`}>\r\n                      {getTableEfficiency(table.seq_scan, table.idx_scan)}%\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"text-right\">\r\n                    <div className=\"text-sm font-medium\">Sequential Scans</div>\r\n                    <div className=\"text-sm text-muted-foreground\">\r\n                      {table.seq_scan.toLocaleString()}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"text-right\">\r\n                    <div className=\"text-sm font-medium\">Index Scans</div>\r\n                    <div className=\"text-sm text-muted-foreground\">\r\n                      {table.idx_scan.toLocaleString()}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Index Usage */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Index Usage</CardTitle>\r\n          <CardDescription>\r\n            Monitor index efficiency and usage patterns\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            {indexStats.slice(0, 10).map((index) => (\r\n              <div\r\n                key={`${index.schemaname}.${index.tablename}.${index.indexname}`}\r\n                className=\"flex items-center justify-between p-4 border rounded-lg\"\r\n              >\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <Zap className=\"h-4 w-4\" />\r\n                  <div>\r\n                    <div className=\"font-medium\">{index.indexname}</div>\r\n                    <div className=\"text-sm text-muted-foreground\">\r\n                      {index.tablename}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex items-center space-x-4\">\r\n                  <div className=\"text-right\">\r\n                    <div className=\"text-sm font-medium\">Scans</div>\r\n                    <div className=\"text-sm text-muted-foreground\">\r\n                      {index.idx_scan.toLocaleString()}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"text-right\">\r\n                    <div className=\"text-sm font-medium\">Rows Read</div>\r\n                    <div className=\"text-sm text-muted-foreground\">\r\n                      {index.idx_tup_read.toLocaleString()}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Performance Recommendations */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Performance Recommendations</CardTitle>\r\n          <CardDescription>\r\n            Actionable suggestions to improve performance\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {recommendations.length === 0 ? (\r\n            <div className=\"text-center py-8 text-muted-foreground\">\r\n              <TrendingUp className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\r\n              <p>No performance issues detected</p>\r\n              <p className=\"text-sm\">Your database is performing well</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"space-y-4\">\r\n              {recommendations.map((recommendation, index) => (\r\n                <div key={index} className=\"flex items-start space-x-3\">\r\n                  <div className=\"w-2 h-2 bg-yellow-500 rounded-full mt-2\"></div>\r\n                  <div>\r\n                    <p className=\"font-medium\">{recommendation}</p>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\providers\\ReactQueryProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\security\\SecurityDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Alert' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDescription' is defined but never used.","line":7,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":8,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[611,614],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[611,614],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":87,"column":11,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":87,"endColumn":63,"fix":{"range":[2784,2791],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":90,"column":15,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":90,"endColumn":65,"fix":{"range":[2960,2967],"text":" />"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":112,"column":8,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":117,"endColumn":8,"fix":{"range":[3528,3695],"text":"error ? <div className=\"alert alert-destructive\">\r\n          <AlertTriangle className=\"h-4 w-4\" />\r\n          <span>{error}</span>\r\n        </div> : null"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":174,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6177,6180],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6177,6180],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":177,"column":22,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":181,"endColumn":22,"fix":{"range":[6275,6464],"text":"event.ip_address ? <Badge variant=\"outline\" className=\"text-xs\">\r\n                        {event.ip_address}\r\n                      </Badge> : null"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":201,"column":15,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":201,"endColumn":71,"fix":{"range":[7071,7078],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":210,"column":15,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":210,"endColumn":72,"fix":{"range":[7490,7497],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":219,"column":15,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":219,"endColumn":70,"fix":{"range":[7902,7909],"text":" />"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":7,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Shield, AlertTriangle, Users, Activity } from 'lucide-react';\r\n\r\ninterface SecurityMetric {\r\n  metric: string;\r\n  count: number;\r\n  description: string;\r\n}\r\n\r\ninterface SecurityEvent {\r\n  id: string;\r\n  user_id: string;\r\n  event_type: string;\r\n  severity: string;\r\n  details: any;\r\n  ip_address: string;\r\n  user_agent: string;\r\n  created_at: string;\r\n}\r\n\r\nexport default function SecurityDashboard() {\r\n  const [metrics, setMetrics] = useState<SecurityMetric[]>([]);\r\n  const [recentEvents, setRecentEvents] = useState<SecurityEvent[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchSecurityData();\r\n    const interval = setInterval(fetchSecurityData, 30000); // Refresh every 30 seconds\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const fetchSecurityData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Fetch security metrics\r\n      const metricsResponse = await fetch('/api/security/metrics');\r\n      if (metricsResponse.ok) {\r\n        const metricsData = await metricsResponse.json();\r\n        setMetrics(metricsData);\r\n      }\r\n\r\n      // Fetch recent security events\r\n      const eventsResponse = await fetch('/api/security/events');\r\n      if (eventsResponse.ok) {\r\n        const eventsData = await eventsResponse.json();\r\n        setRecentEvents(eventsData);\r\n      }\r\n    } catch (err) {\r\n      setError('Failed to fetch security data');\r\n      console.error('Security data fetch error:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getSeverityColor = (severity: string) => {\r\n    switch (severity.toLowerCase()) {\r\n      case 'critical': return 'destructive';\r\n      case 'high': return 'destructive';\r\n      case 'medium': return 'default';\r\n      case 'low': return 'secondary';\r\n      default: return 'secondary';\r\n    }\r\n  };\r\n\r\n  const getEventTypeIcon = (eventType: string) => {\r\n    switch (eventType) {\r\n      case 'failed_login': return <AlertTriangle className=\"h-4 w-4\" />;\r\n      case 'rate_limit_exceeded': return <Activity className=\"h-4 w-4\" />;\r\n      case 'suspicious_query': return <Shield className=\"h-4 w-4\" />;\r\n      default: return <Activity className=\"h-4 w-4\" />;\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"animate-pulse\">\r\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-4\"></div>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            {[1, 2, 3].map((i) => (\r\n              <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold tracking-tight\">Security Dashboard</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Monitor security events, rate limits, and user activity\r\n          </p>\r\n        </div>\r\n        <Button onClick={fetchSecurityData} variant=\"outline\">\r\n          Refresh\r\n        </Button>\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"alert alert-destructive\">\r\n          <AlertTriangle className=\"h-4 w-4\" />\r\n          <span>{error}</span>\r\n        </div>\r\n      )}\r\n\r\n      {/* Security Metrics */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n        {metrics.map((metric) => (\r\n          <Card key={metric.metric}>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium capitalize\">\r\n                {metric.metric.replace('_', ' ')}\r\n              </CardTitle>\r\n              <Shield className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{metric.count}</div>\r\n              <p className=\"text-xs text-muted-foreground\">{metric.description}</p>\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Recent Security Events */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Recent Security Events</CardTitle>\r\n          <CardDescription>\r\n            Latest security events and suspicious activity\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {recentEvents.length === 0 ? (\r\n            <div className=\"text-center py-8 text-muted-foreground\">\r\n              <Shield className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\r\n              <p>No security events detected</p>\r\n              <p className=\"text-sm\">Your system appears to be secure</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"space-y-4\">\r\n              {recentEvents.map((event) => (\r\n                <div\r\n                  key={event.id}\r\n                  className=\"flex items-center justify-between p-4 border rounded-lg\"\r\n                >\r\n                  <div className=\"flex items-center space-x-3\">\r\n                    {getEventTypeIcon(event.event_type)}\r\n                    <div>\r\n                      <div className=\"font-medium capitalize\">\r\n                        {event.event_type.replace('_', ' ')}\r\n                      </div>\r\n                      <div className=\"text-sm text-muted-foreground\">\r\n                        User: {event.user_id}\r\n                      </div>\r\n                      <div className=\"text-xs text-muted-foreground\">\r\n                        {new Date(event.created_at).toLocaleString()}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Badge variant={getSeverityColor(event.severity) as any}>\r\n                      {event.severity}\r\n                    </Badge>\r\n                    {event.ip_address && (\r\n                      <Badge variant=\"outline\" className=\"text-xs\">\r\n                        {event.ip_address}\r\n                      </Badge>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Security Recommendations */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Security Recommendations</CardTitle>\r\n          <CardDescription>\r\n            Actions to improve your security posture\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex items-start space-x-3\">\r\n              <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\"></div>\r\n              <div>\r\n                <p className=\"font-medium\">Enable Two-Factor Authentication</p>\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  Require 2FA for all user accounts\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-start space-x-3\">\r\n              <div className=\"w-2 h-2 bg-yellow-500 rounded-full mt-2\"></div>\r\n              <div>\r\n                <p className=\"font-medium\">Review Rate Limits</p>\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  Adjust rate limits based on usage patterns\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-start space-x-3\">\r\n              <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2\"></div>\r\n              <div>\r\n                <p className=\"font-medium\">Monitor Failed Logins</p>\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  Set up alerts for suspicious login attempts\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\shopping\\AutoAddedItemsConfirmation.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'confirmError' is assigned a value but never used.","line":19,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":77},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":71,"column":13,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":71,"endColumn":91,"fix":{"range":[2350,2357],"text":" />"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport { useAuth } from '@clerk/nextjs';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { usePendingConfirmations, useConfirmAutoAddedItems } from '@/hooks/useAutoAddedItems';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\ninterface AutoAddedItemsConfirmationProps {\r\n  className?: string;\r\n}\r\n\r\nexport function AutoAddedItemsConfirmation({ className }: AutoAddedItemsConfirmationProps) {\r\n  const { isSignedIn, isLoaded } = useAuth();\r\n  const { data: pendingItems = [], isLoading, error } = usePendingConfirmations();\r\n  const { mutate: confirmItems, isPending: isConfirming, error: confirmError } = useConfirmAutoAddedItems();\r\n  const [selectedItems, setSelectedItems] = useState<Set<string>>(new Set());\r\n\r\n  // Don't render if user is not authenticated or auth is still loading\r\n  if (!isLoaded || !isSignedIn) {\r\n    return null;\r\n  }\r\n\r\n  const handleSelectItem = (itemId: string, checked: boolean) => {\r\n    const newSelected = new Set(selectedItems);\r\n    if (checked) {\r\n      newSelected.add(itemId);\r\n    } else {\r\n      newSelected.delete(itemId);\r\n    }\r\n    setSelectedItems(newSelected);\r\n  };\r\n\r\n  const handleSelectAll = (checked: boolean) => {\r\n    if (checked) {\r\n      setSelectedItems(new Set(pendingItems.map(item => item.id)));\r\n    } else {\r\n      setSelectedItems(new Set());\r\n    }\r\n  };\r\n\r\n  const handleConfirmSelected = async () => {\r\n    const itemIds = Array.from(selectedItems);\r\n    if (itemIds.length === 0) return;\r\n\r\n    confirmItems({\r\n      item_ids: itemIds,\r\n      action: 'confirm'\r\n    });\r\n    setSelectedItems(new Set());\r\n  };\r\n\r\n  const handleConfirmItem = async (itemId: string) => {\r\n    confirmItems({\r\n      item_ids: [itemId],\r\n      action: 'confirm'\r\n    });\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle className=\"text-lg\">🔄 Auto-Added Items</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex items-center justify-center py-4\">\r\n            <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600\"></div>\r\n            <span className=\"ml-2 text-gray-600\">Loading...</span>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle className=\"text-lg\">🔄 Auto-Added Items</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"text-red-600 text-sm\">\r\n            Failed to load auto-added items: {error.message}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (pendingItems.length === 0) {\r\n    return null; // Don't show the card if there are no pending items\r\n  }\r\n\r\n  const allSelected = pendingItems.length > 0 && selectedItems.size === pendingItems.length;\r\n  const someSelected = selectedItems.size > 0 && selectedItems.size < pendingItems.length;\r\n\r\n  return (\r\n    <Card className={`border-blue-200 bg-blue-50 ${className}`}>\r\n      <CardHeader>\r\n        <div className=\"flex items-center justify-between\">\r\n          <CardTitle className=\"text-lg text-blue-900\">\r\n            🔄 Auto-Added Items ({pendingItems.length})\r\n          </CardTitle>\r\n          <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\r\n            Pending Confirmation\r\n          </Badge>\r\n        </div>\r\n        <p className=\"text-sm text-blue-700\">\r\n          Items automatically added from your meal plan. Review and confirm what you want to keep.\r\n        </p>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        {/* Select All Controls */}\r\n        <div className=\"flex items-center justify-between p-3 bg-blue-100 rounded-lg\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <Checkbox\r\n              checked={allSelected}\r\n              onCheckedChange={handleSelectAll}\r\n              ref={(el) => {\r\n                if (el) el.indeterminate = someSelected;\r\n              }}\r\n            />\r\n            <span className=\"text-sm font-medium text-blue-900\">\r\n              Select All ({selectedItems.size}/{pendingItems.length})\r\n            </span>\r\n          </div>\r\n          \r\n          {selectedItems.size > 0 && (\r\n            <div className=\"flex space-x-2\">\r\n              <Button\r\n                size=\"sm\"\r\n                onClick={handleConfirmSelected}\r\n                disabled={isConfirming}\r\n                className=\"bg-green-600 hover:bg-green-700\"\r\n              >\r\n                ✅ Confirm Selected\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Individual Items */}\r\n        <div className=\"space-y-2\">\r\n          {pendingItems.map((item: PendingItem) => (\r\n            <div\r\n              key={item.id}\r\n              className=\"flex items-center justify-between p-3 bg-white rounded-lg border border-blue-200\"\r\n            >\r\n              <div className=\"flex items-center space-x-3 flex-1\">\r\n                <Checkbox\r\n                  checked={selectedItems.has(item.id)}\r\n                  onCheckedChange={(checked) => handleSelectItem(item.id, checked as boolean)}\r\n                />\r\n                <div className=\"flex-1\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <span className=\"font-medium text-gray-900\">{item.name}</span>\r\n                    <Badge variant=\"outline\" className=\"text-xs\">\r\n                      {item.quantity}\r\n                    </Badge>\r\n                  </div>\r\n                  <div className=\"text-xs text-gray-500 mt-1\">\r\n                    From: {item.recipe_title} • Added {formatDistanceToNow(new Date(item.auto_added_at), { addSuffix: true })}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"flex space-x-2\">\r\n                <Button\r\n                  size=\"sm\"\r\n                  variant=\"outline\"\r\n                  onClick={() => handleConfirmItem(item.id)}\r\n                  disabled={isConfirming}\r\n                  className=\"text-green-700 border-green-300 hover:bg-green-50\"\r\n                >\r\n                  ✅\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Quick Actions */}\r\n        <div className=\"flex justify-center space-x-4 pt-2\">\r\n          <Button\r\n            onClick={() => handleConfirmSelected()}\r\n            disabled={selectedItems.size === 0 || isConfirming}\r\n            className=\"bg-green-600 hover:bg-green-700\"\r\n          >\r\n            ✅ Confirm All Selected\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={() => {\r\n              setSelectedItems(new Set(pendingItems.map(item => item.id)));\r\n              handleConfirmSelected();\r\n            }}\r\n            disabled={isConfirming}\r\n            className=\"border-green-600 text-green-700 hover:bg-green-50\"\r\n          >\r\n            ✅ Confirm All Items\r\n          </Button>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\DashboardSkeleton.tsx","messages":[{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":9,"column":13,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":9,"endColumn":65,"fix":{"range":[466,473],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":10,"column":13,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":10,"endColumn":60,"fix":{"range":[533,540],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":19,"column":17,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":19,"endColumn":67,"fix":{"range":[942,949],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":22,"column":17,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":22,"endColumn":69,"fix":{"range":[1085,1092],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":23,"column":17,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":23,"endColumn":64,"fix":{"range":[1156,1163],"text":" />"}},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":32,"column":23,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":32,"endColumn":24},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":34,"column":17,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":34,"endColumn":69,"fix":{"range":[1607,1614],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":35,"column":17,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":35,"endColumn":69,"fix":{"range":[1683,1690],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":36,"column":17,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":36,"endColumn":64,"fix":{"range":[1754,1761],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":45,"column":13,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":45,"endColumn":65,"fix":{"range":[2054,2061],"text":" />"}},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":48,"column":27,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":48,"endColumn":28},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":49,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":49,"endColumn":82,"fix":{"range":[2313,2320],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":50,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":50,"endColumn":74,"fix":{"range":[2394,2401],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":60,"column":13,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":60,"endColumn":65,"fix":{"range":[2720,2727],"text":" />"}},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":63,"column":27,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":63,"endColumn":28},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":64,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":64,"endColumn":69,"fix":{"range":[2954,2961],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":66,"column":21,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":66,"endColumn":73,"fix":{"range":[3078,3085],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":67,"column":21,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":67,"endColumn":68,"fix":{"range":[3153,3160],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":69,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":69,"endColumn":65,"fix":{"range":[3251,3258],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":79,"column":13,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":79,"endColumn":65,"fix":{"range":[3573,3580],"text":" />"}},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":82,"column":27,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":82,"endColumn":28},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":83,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":83,"endColumn":71,"fix":{"range":[3813,3820],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":84,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":84,"endColumn":72,"fix":{"range":[3892,3899],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":85,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":85,"endColumn":66,"fix":{"range":[3965,3972],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":95,"column":13,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":95,"endColumn":65,"fix":{"range":[4292,4299],"text":" />"}},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":98,"column":27,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":98,"endColumn":28},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":99,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":99,"endColumn":71,"fix":{"range":[4565,4572],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":100,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":100,"endColumn":72,"fix":{"range":[4644,4651],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":102,"column":21,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":102,"endColumn":67,"fix":{"range":[4775,4782],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":103,"column":21,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":103,"endColumn":67,"fix":{"range":[4849,4856],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":105,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":105,"endColumn":66,"fix":{"range":[4948,4955],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":115,"column":13,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":115,"endColumn":65,"fix":{"range":[5268,5275],"text":" />"}},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":118,"column":27,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":118,"endColumn":28},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":119,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":119,"endColumn":71,"fix":{"range":[5541,5548],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":120,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":120,"endColumn":72,"fix":{"range":[5620,5627],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":121,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":121,"endColumn":71,"fix":{"range":[5698,5705],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":122,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":122,"endColumn":65,"fix":{"range":[5770,5777],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":132,"column":13,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":132,"endColumn":65,"fix":{"range":[6094,6101],"text":" />"}},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":135,"column":27,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":135,"endColumn":28},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":137,"column":21,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":137,"endColumn":66,"fix":{"range":[6418,6425],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":139,"column":23,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":139,"endColumn":75,"fix":{"range":[6546,6553],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":140,"column":23,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":140,"endColumn":70,"fix":{"range":[6623,6630],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":143,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":143,"endColumn":65,"fix":{"range":[6749,6756],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":153,"column":13,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":153,"endColumn":65,"fix":{"range":[7073,7080],"text":" />"}},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":156,"column":27,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":156,"endColumn":28},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":157,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":157,"endColumn":64,"fix":{"range":[7302,7309],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":159,"column":21,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":159,"endColumn":68,"fix":{"range":[7421,7428],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":161,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":161,"endColumn":65,"fix":{"range":[7519,7526],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":171,"column":13,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":171,"endColumn":65,"fix":{"range":[7845,7852],"text":" />"}},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":174,"column":27,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":174,"endColumn":28},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":175,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":175,"endColumn":64,"fix":{"range":[8093,8100],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":177,"column":21,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":177,"endColumn":73,"fix":{"range":[8217,8224],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":178,"column":21,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":178,"endColumn":68,"fix":{"range":[8292,8299],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":180,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":180,"endColumn":65,"fix":{"range":[8390,8397],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":191,"column":15,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":191,"endColumn":75,"fix":{"range":[8818,8825],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":192,"column":15,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":192,"endColumn":75,"fix":{"range":[8900,8907],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":193,"column":15,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":193,"endColumn":70,"fix":{"range":[8977,8984],"text":" />"}},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":207,"column":19,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":207,"endColumn":20},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":209,"column":13,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":209,"endColumn":65,"fix":{"range":[9466,9473],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":210,"column":13,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":210,"endColumn":65,"fix":{"range":[9538,9545],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":211,"column":13,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":211,"endColumn":60,"fix":{"range":[9605,9612],"text":" />"}},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":223,"column":19,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":223,"endColumn":20},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":225,"column":13,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":225,"endColumn":68,"fix":{"range":[10045,10052],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":226,"column":13,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":226,"endColumn":65,"fix":{"range":[10117,10124],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":227,"column":13,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":227,"endColumn":66,"fix":{"range":[10190,10197],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":228,"column":13,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":228,"endColumn":60,"fix":{"range":[10257,10264],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":242,"column":11,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":242,"endColumn":58,"fix":{"range":[10654,10661],"text":" />"}},{"ruleId":"react/no-array-index-key","severity":1,"message":"Do not use Array index in keys","line":248,"column":23,"nodeType":"Identifier","messageId":"noArrayIndex","endLine":248,"endColumn":24},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":250,"column":17,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":250,"endColumn":62,"fix":{"range":[10962,10969],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":252,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":252,"endColumn":71,"fix":{"range":[11082,11089],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":253,"column":19,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":253,"endColumn":66,"fix":{"range":[11155,11162],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":255,"column":17,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":255,"endColumn":63,"fix":{"range":[11249,11256],"text":" />"}},{"ruleId":"react/self-closing-comp","severity":1,"message":"Empty components are self-closing","line":256,"column":17,"nodeType":"JSXOpeningElement","messageId":"notSelfClosing","endLine":256,"endColumn":63,"fix":{"range":[11319,11326],"text":" />"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":73,"fixableErrorCount":0,"fixableWarningCount":61,"source":"// Skeleton loading component for dashboard with progressive disclosure\r\nexport function DashboardSkeleton() {\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-4 sm:py-8 lg:py-12 px-4 sm:px-6 lg:px-8\">\r\n      <div className=\"max-w-6xl mx-auto\">\r\n        {/* Header Skeleton */}\r\n        <div className=\"bg-white shadow rounded-lg p-4 sm:p-6 mb-6\">\r\n          <div className=\"animate-pulse\">\r\n            <div className=\"h-8 bg-gray-200 rounded w-1/3 mb-4\"></div>\r\n            <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Welcome Banner Skeleton */}\r\n        <div className=\"bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-4 sm:p-6 mb-6\">\r\n          <div className=\"animate-pulse\">\r\n            <div className=\"flex items-start\">\r\n              <div className=\"flex-shrink-0\">\r\n                <div className=\"h-8 w-8 bg-gray-200 rounded-full\"></div>\r\n              </div>\r\n              <div className=\"ml-3 flex-1\">\r\n                <div className=\"h-4 bg-gray-200 rounded w-1/3 mb-2\"></div>\r\n                <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Stats Grid Skeleton */}\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-6\">\r\n          {[...Array(4)].map((_, i) => (\r\n            <div key={i} className=\"bg-white shadow rounded-lg p-4 sm:p-6\">\r\n              <div className=\"animate-pulse\">\r\n                <div className=\"h-4 bg-gray-200 rounded w-1/2 mb-3\"></div>\r\n                <div className=\"h-8 bg-gray-200 rounded w-1/3 mb-2\"></div>\r\n                <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Quick Actions Skeleton */}\r\n        <div className=\"bg-white shadow rounded-lg p-4 sm:p-6 mb-6\">\r\n          <div className=\"animate-pulse\">\r\n            <div className=\"h-6 bg-gray-200 rounded w-1/4 mb-4\"></div>\r\n            <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-3\">\r\n              {[...Array(4)].map((_, i) => (\r\n                <div key={i} className=\"text-center\">\r\n                  <div className=\"h-12 w-12 bg-gray-200 rounded-lg mx-auto mb-2\"></div>\r\n                  <div className=\"h-3 bg-gray-200 rounded w-3/4 mx-auto\"></div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Recent Activity Skeleton */}\r\n        <div className=\"bg-white shadow rounded-lg p-4 sm:p-6 mb-6\">\r\n          <div className=\"animate-pulse\">\r\n            <div className=\"h-6 bg-gray-200 rounded w-1/4 mb-4\"></div>\r\n            <div className=\"space-y-3\">\r\n              {[...Array(3)].map((_, i) => (\r\n                <div key={i} className=\"flex items-center space-x-3\">\r\n                  <div className=\"h-8 w-8 bg-gray-200 rounded-full\"></div>\r\n                  <div className=\"flex-1\">\r\n                    <div className=\"h-3 bg-gray-200 rounded w-3/4 mb-1\"></div>\r\n                    <div className=\"h-2 bg-gray-200 rounded w-1/2\"></div>\r\n                  </div>\r\n                  <div className=\"h-3 bg-gray-200 rounded w-16\"></div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* AI Insights Skeleton */}\r\n        <div className=\"bg-white shadow rounded-lg p-4 sm:p-6 mb-6\">\r\n          <div className=\"animate-pulse\">\r\n            <div className=\"h-6 bg-gray-200 rounded w-1/4 mb-4\"></div>\r\n            <div className=\"space-y-4\">\r\n              {[...Array(2)].map((_, i) => (\r\n                <div key={i} className=\"border-l-4 border-blue-200 pl-4\">\r\n                  <div className=\"h-4 bg-gray-200 rounded w-2/3 mb-2\"></div>\r\n                  <div className=\"h-3 bg-gray-200 rounded w-full mb-1\"></div>\r\n                  <div className=\"h-3 bg-gray-200 rounded w-3/4\"></div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Meal Suggestions Skeleton */}\r\n        <div className=\"bg-white shadow rounded-lg p-4 sm:p-6 mb-6\">\r\n          <div className=\"animate-pulse\">\r\n            <div className=\"h-6 bg-gray-200 rounded w-1/4 mb-4\"></div>\r\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n              {[...Array(3)].map((_, i) => (\r\n                <div key={i} className=\"border rounded-lg p-3\">\r\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\r\n                  <div className=\"h-3 bg-gray-200 rounded w-full mb-2\"></div>\r\n                  <div className=\"flex space-x-2 mb-2\">\r\n                    <div className=\"h-2 bg-gray-200 rounded w-16\"></div>\r\n                    <div className=\"h-2 bg-gray-200 rounded w-20\"></div>\r\n                  </div>\r\n                  <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Power-ups Skeleton */}\r\n        <div className=\"bg-white shadow rounded-lg p-4 sm:p-6 mb-6\">\r\n          <div className=\"animate-pulse\">\r\n            <div className=\"h-6 bg-gray-200 rounded w-1/4 mb-4\"></div>\r\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n              {[...Array(3)].map((_, i) => (\r\n                <div key={i} className=\"border rounded-lg p-4\">\r\n                  <div className=\"h-5 bg-gray-200 rounded w-1/2 mb-3\"></div>\r\n                  <div className=\"h-3 bg-gray-200 rounded w-full mb-2\"></div>\r\n                  <div className=\"h-3 bg-gray-200 rounded w-3/4 mb-3\"></div>\r\n                  <div className=\"h-8 bg-gray-200 rounded w-24\"></div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Recent Chores Skeleton */}\r\n        <div className=\"bg-white shadow rounded-lg p-4 sm:p-6 mb-6\">\r\n          <div className=\"animate-pulse\">\r\n            <div className=\"h-6 bg-gray-200 rounded w-1/4 mb-4\"></div>\r\n            <div className=\"space-y-3\">\r\n              {[...Array(4)].map((_, i) => (\r\n                <div key={i} className=\"flex items-center justify-between p-3 border rounded-lg\">\r\n                  <div className=\"flex items-center space-x-3\">\r\n                    <div className=\"h-4 w-4 bg-gray-200 rounded\"></div>\r\n                    <div className=\"flex-1\">\r\n                      <div className=\"h-3 bg-gray-200 rounded w-3/4 mb-1\"></div>\r\n                      <div className=\"h-2 bg-gray-200 rounded w-1/2\"></div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"h-3 bg-gray-200 rounded w-16\"></div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Shopping List Skeleton */}\r\n        <div className=\"bg-white shadow rounded-lg p-4 sm:p-6 mb-6\">\r\n          <div className=\"animate-pulse\">\r\n            <div className=\"h-6 bg-gray-200 rounded w-1/4 mb-4\"></div>\r\n            <div className=\"space-y-2\">\r\n              {[...Array(5)].map((_, i) => (\r\n                <div key={i} className=\"flex items-center space-x-3\">\r\n                  <div className=\"h-4 w-4 bg-gray-200 rounded\"></div>\r\n                  <div className=\"flex-1\">\r\n                    <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\r\n                  </div>\r\n                  <div className=\"h-3 bg-gray-200 rounded w-12\"></div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Calendar Events Skeleton */}\r\n        <div className=\"bg-white shadow rounded-lg p-4 sm:p-6 mb-6\">\r\n          <div className=\"animate-pulse\">\r\n            <div className=\"h-6 bg-gray-200 rounded w-1/4 mb-4\"></div>\r\n            <div className=\"space-y-3\">\r\n              {[...Array(3)].map((_, i) => (\r\n                <div key={i} className=\"flex items-center space-x-3 p-2 border rounded\">\r\n                  <div className=\"h-8 w-8 bg-gray-200 rounded\"></div>\r\n                  <div className=\"flex-1\">\r\n                    <div className=\"h-3 bg-gray-200 rounded w-1/2 mb-1\"></div>\r\n                    <div className=\"h-2 bg-gray-200 rounded w-3/4\"></div>\r\n                  </div>\r\n                  <div className=\"h-3 bg-gray-200 rounded w-20\"></div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Pro Features Skeleton */}\r\n        <div className=\"bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-lg p-4 sm:p-6 mb-6\">\r\n          <div className=\"animate-pulse\">\r\n            <div className=\"text-center\">\r\n              <div className=\"h-6 bg-gray-200 rounded w-1/3 mx-auto mb-3\"></div>\r\n              <div className=\"h-4 bg-gray-200 rounded w-2/3 mx-auto mb-4\"></div>\r\n              <div className=\"h-10 bg-gray-200 rounded w-32 mx-auto\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Skeleton for specific sections\r\nexport function StatsSkeleton() {\r\n  return (\r\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-6\">\r\n      {[...Array(4)].map((_, i) => (\r\n        <div key={i} className=\"bg-white shadow rounded-lg p-4 sm:p-6\">\r\n          <div className=\"animate-pulse\">\r\n            <div className=\"h-4 bg-gray-200 rounded w-1/2 mb-3\"></div>\r\n            <div className=\"h-8 bg-gray-200 rounded w-1/3 mb-2\"></div>\r\n            <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function FeatureGridSkeleton() {\r\n  return (\r\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 mb-6\">\r\n      {[...Array(6)].map((_, i) => (\r\n        <div key={i} className=\"bg-white shadow rounded-lg p-4 sm:p-6\">\r\n          <div className=\"animate-pulse\">\r\n            <div className=\"h-12 w-12 bg-gray-200 rounded-lg mb-4\"></div>\r\n            <div className=\"h-5 bg-gray-200 rounded w-3/4 mb-3\"></div>\r\n            <div className=\"h-3 bg-gray-200 rounded w-full mb-2\"></div>\r\n            <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function TableSkeleton({ rows = 5 }: { rows?: number }) {\r\n  return (\r\n    <div className=\"bg-white shadow rounded-lg overflow-hidden\">\r\n      <div className=\"animate-pulse\">\r\n        {/* Header */}\r\n        <div className=\"px-4 py-3 border-b bg-gray-50\">\r\n          <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\r\n        </div>\r\n        \r\n        {/* Rows */}\r\n        <div className=\"divide-y\">\r\n          {[...Array(rows)].map((_, i) => (\r\n            <div key={i} className=\"px-4 py-3\">\r\n              <div className=\"flex items-center space-x-4\">\r\n                <div className=\"h-4 w-4 bg-gray-200 rounded\"></div>\r\n                <div className=\"flex-1\">\r\n                  <div className=\"h-3 bg-gray-200 rounded w-3/4 mb-1\"></div>\r\n                  <div className=\"h-2 bg-gray-200 rounded w-1/2\"></div>\r\n                </div>\r\n                <div className=\"h-3 bg-gray-200 rounded w-20\"></div>\r\n                <div className=\"h-3 bg-gray-200 rounded w-16\"></div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\ErrorDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\FeatureCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\Form.tsx","messages":[{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":126,"column":8,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":133,"endColumn":8,"fix":{"range":[3944,4204],"text":"label ? <label className=\"block text-sm font-medium text-gray-700\" htmlFor={name}>\r\n          {label}\r\n          {required && (\r\n            <span className=\"text-red-500 ml-1\" aria-label=\"required\">*</span>\r\n          )}\r\n        </label> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":129,"column":12,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":131,"endColumn":12,"fix":{"range":[4070,4176],"text":"required ? <span className=\"text-red-500 ml-1\" aria-label=\"required\">*</span> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":142,"column":8,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":146,"endColumn":8,"fix":{"range":[4396,4520],"text":"error && isTouched ? <p className=\"text-sm text-red-600\" role=\"alert\">\r\n          {error}\r\n        </p> : null"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"'use client';\r\n\r\nimport React, { createContext, useContext, useCallback, useMemo } from 'react';\r\nimport { useFormValidation } from '@/hooks/useFormValidation';\r\nimport { z } from 'zod';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface FormContextValue {\r\n  errors: Array<{ field: string; message: string }>;\r\n  isValid: boolean;\r\n  touched: Set<string>;\r\n  validateField: (field: string, value: unknown, schema: z.AnyZodObject) => boolean;\r\n  validateForm: (data: Record<string, unknown>, schema: z.AnyZodObject) => boolean;\r\n  setFieldTouched: (field: string) => void;\r\n  clearErrors: () => void;\r\n  getFieldError: (field: string) => string | undefined;\r\n  hasFieldError: (field: string) => boolean;\r\n  setValue: (field: string, value: unknown) => void;\r\n  getValue: (field: string) => unknown;\r\n}\r\n\r\nconst FormContext = createContext<FormContextValue | null>(null);\r\n\r\nexport function useFormContext() {\r\n  const context = useContext(FormContext);\r\n  if (!context) {\r\n    throw new Error('useFormContext must be used within a Form component');\r\n  }\r\n  return context;\r\n}\r\n\r\ninterface FormProps<TValues extends Record<string, unknown>> {\r\n  children: React.ReactNode;\r\n  onSubmit: (data: TValues) => void;\r\n  validationSchema?: z.AnyZodObject;\r\n  className?: string;\r\n  initialValues?: TValues;\r\n}\r\n\r\nexport function Form<TValues extends Record<string, unknown>>({\r\n  children,\r\n  onSubmit,\r\n  validationSchema,\r\n  className,\r\n  initialValues = {} as TValues,\r\n}: FormProps<TValues>) {\r\n  const validation = useFormValidation();\r\n  const [values, setValues] = React.useState<TValues>(initialValues);\r\n\r\n  const handleSubmit = useCallback((e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    if (validationSchema) {\r\n      const isValid = validation.validateForm(values, validationSchema);\r\n      if (!isValid) return;\r\n    }\r\n\r\n    onSubmit(values);\r\n  }, [values, validationSchema, validation, onSubmit]);\r\n\r\n  const setValue = useCallback((field: string, value: unknown) => {\r\n    setValues(prev => ({ ...prev, [field]: value }));\r\n\r\n    if (validationSchema) {\r\n      validation.validateField(field, value, validationSchema);\r\n    }\r\n  }, [validationSchema, validation]);\r\n\r\n  const getValue = useCallback((field: string) => values[field as keyof TValues], [values]);\r\n\r\n  const contextValue = useMemo<FormContextValue>(() => ({\r\n    errors: validation.errors,\r\n    isValid: validation.isValid,\r\n    touched: validation.touched,\r\n    validateField: validation.validateField,\r\n    validateForm: validation.validateForm,\r\n    setFieldTouched: validation.setFieldTouched,\r\n    clearErrors: validation.clearErrors,\r\n    getFieldError: validation.getFieldError,\r\n    hasFieldError: validation.hasFieldError,\r\n    setValue,\r\n    getValue,\r\n  }), [validation, setValue, getValue]);\r\n\r\n  return (\r\n    <FormContext.Provider value={contextValue}>\r\n      <form onSubmit={handleSubmit} className={cn('space-y-4', className)}>\r\n        {children}\r\n      </form>\r\n    </FormContext.Provider>\r\n  );\r\n}\r\n\r\ninterface FormFieldProps {\r\n  name: string;\r\n  label?: string;\r\n  required?: boolean;\r\n  children: (props: {\r\n    value: unknown;\r\n    onChange: (value: unknown) => void;\r\n    error?: string;\r\n    hasError: boolean;\r\n    touched: boolean;\r\n    setTouched: () => void;\r\n  }) => React.ReactNode;\r\n}\r\n\r\nexport function FormField({ name, label, required, children }: FormFieldProps) {\r\n  const { getFieldError, hasFieldError, setFieldTouched, touched, setValue, getValue } = useFormContext();\r\n\r\n  const handleChange = useCallback((newValue: unknown) => {\r\n    setValue(name, newValue);\r\n  }, [name, setValue]);\r\n\r\n  const handleSetTouched = useCallback(() => {\r\n    setFieldTouched(name);\r\n  }, [name, setFieldTouched]);\r\n\r\n  const error = getFieldError(name);\r\n  const hasError = hasFieldError(name);\r\n  const isTouched = touched.has(name);\r\n  const value = getValue(name);\r\n\r\n  return (\r\n    <div className=\"space-y-1\">\r\n      {label && (\r\n        <label className=\"block text-sm font-medium text-gray-700\" htmlFor={name}>\r\n          {label}\r\n          {required && (\r\n            <span className=\"text-red-500 ml-1\" aria-label=\"required\">*</span>\r\n          )}\r\n        </label>\r\n      )}\r\n      {children({\r\n        value,\r\n        onChange: handleChange,\r\n        error,\r\n        hasError,\r\n        touched: isTouched,\r\n        setTouched: handleSetTouched,\r\n      })}\r\n      {error && isTouched && (\r\n        <p className=\"text-sm text-red-600\" role=\"alert\">\r\n          {error}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface FormSubmitProps {\r\n  children: React.ReactNode;\r\n  disabled?: boolean;\r\n  loading?: boolean;\r\n  className?: string;\r\n}\r\n\r\nexport function FormSubmit({ children, disabled, loading, className }: FormSubmitProps) {\r\n  const { isValid } = useFormContext();\r\n  \r\n  return (\r\n    <button\r\n      type=\"submit\"\r\n      disabled={disabled || loading || !isValid}\r\n      className={cn(\r\n        'w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors',\r\n        className\r\n      )}\r\n    >\r\n      {loading ? (\r\n        <div className=\"flex items-center justify-center\">\r\n          <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n            <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" />\r\n            <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" />\r\n          </svg>\r\n          Loading...\r\n        </div>\r\n      ) : (\r\n        children\r\n      )}\r\n    </button>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\FormInput.tsx","messages":[{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":59,"column":10,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":71,"endColumn":10,"fix":{"range":[1624,1973],"text":"label ? <label\r\n            htmlFor={inputId}\r\n            className=\"block text-sm font-medium text-gray-700\"\r\n          >\r\n            {label}\r\n            {required && (\r\n              <span className=\"text-red-500 ml-1\" aria-label=\"required\">\r\n                *\r\n              </span>\r\n            )}\r\n          </label> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":65,"column":14,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":69,"endColumn":14,"fix":{"range":[1797,1941],"text":"required ? <span className=\"text-red-500 ml-1\" aria-label=\"required\">\r\n                *\r\n              </span> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":74,"column":12,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":80,"endColumn":12,"fix":{"range":[2025,2268],"text":"leftIcon ? <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n              <div className=\"text-gray-400\">\r\n                {leftIcon}\r\n              </div>\r\n            </div> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":97,"column":12,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":103,"endColumn":12,"fix":{"range":[2978,3224],"text":"rightIcon ? <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\r\n              <div className=\"text-gray-400\">\r\n                {rightIcon}\r\n              </div>\r\n            </div> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":106,"column":10,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":115,"endColumn":10,"fix":{"range":[3254,3484],"text":"showError ? <p\r\n            id={`${inputId}-error`}\r\n            className=\"text-sm text-red-600\"\r\n            role=\"alert\"\r\n            aria-live=\"polite\"\r\n          >\r\n            {error}\r\n          </p> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":117,"column":10,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":124,"endColumn":10,"fix":{"range":[3498,3692],"text":"helperText && !showError ? <p\r\n            id={`${inputId}-helper`}\r\n            className=\"text-sm text-gray-600\"\r\n          >\r\n            {helperText}\r\n          </p> : null"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":6,"source":"'use client';\r\n\r\nimport React, { forwardRef, useId, useMemo } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface FormInputProps extends React.InputHTMLAttributes<HTMLInputElement> {\r\n  label?: string;\r\n  error?: string;\r\n  touched?: boolean;\r\n  required?: boolean;\r\n  helperText?: string;\r\n  leftIcon?: React.ReactNode;\r\n  rightIcon?: React.ReactNode;\r\n  variant?: 'default' | 'error' | 'success';\r\n}\r\n\r\nexport const FormInput = forwardRef<HTMLInputElement, FormInputProps>(\r\n  (\r\n    {\r\n      label,\r\n      error,\r\n      touched,\r\n      required,\r\n      helperText,\r\n      leftIcon,\r\n      rightIcon,\r\n      variant = 'default',\r\n      className,\r\n      id,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const generatedId = useId();\r\n    const inputId = id ?? generatedId;\r\n    const hasError = Boolean(touched && error);\r\n    const showError = Boolean(hasError && error);\r\n\r\n    const inputVariants = useMemo(() => ({\r\n      default: 'border-gray-300 focus:border-blue-500 focus:ring-blue-500',\r\n      error: 'border-red-500 focus:border-red-500 focus:ring-red-500',\r\n      success: 'border-green-500 focus:border-green-500 focus:ring-green-500',\r\n    }), []);\r\n\r\n    const variantClassName = hasError\r\n      ? inputVariants.error\r\n      : variant === 'success'\r\n        ? inputVariants.success\r\n        : inputVariants.default;\r\n\r\n    const describedBy = useMemo(() => {\r\n      if (showError) return `${inputId}-error`;\r\n      if (helperText) return `${inputId}-helper`;\r\n      return undefined;\r\n    }, [helperText, inputId, showError]);\r\n\r\n    return (\r\n      <div className=\"space-y-1\">\r\n        {label && (\r\n          <label\r\n            htmlFor={inputId}\r\n            className=\"block text-sm font-medium text-gray-700\"\r\n          >\r\n            {label}\r\n            {required && (\r\n              <span className=\"text-red-500 ml-1\" aria-label=\"required\">\r\n                *\r\n              </span>\r\n            )}\r\n          </label>\r\n        )}\r\n\r\n        <div className=\"relative\">\r\n          {leftIcon && (\r\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n              <div className=\"text-gray-400\">\r\n                {leftIcon}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <input\r\n            ref={ref}\r\n            id={inputId}\r\n            className={cn(\r\n              'flex h-10 w-full rounded-md border bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\r\n              leftIcon && 'pl-10',\r\n              rightIcon && 'pr-10',\r\n              variantClassName,\r\n              className,\r\n            )}\r\n            aria-invalid={hasError}\r\n            aria-describedby={describedBy}\r\n            {...props}\r\n          />\r\n\r\n          {rightIcon && (\r\n            <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\r\n              <div className=\"text-gray-400\">\r\n                {rightIcon}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {showError && (\r\n          <p\r\n            id={`${inputId}-error`}\r\n            className=\"text-sm text-red-600\"\r\n            role=\"alert\"\r\n            aria-live=\"polite\"\r\n          >\r\n            {error}\r\n          </p>\r\n        )}\r\n\r\n        {helperText && !showError && (\r\n          <p\r\n            id={`${inputId}-helper`}\r\n            className=\"text-sm text-gray-600\"\r\n          >\r\n            {helperText}\r\n          </p>\r\n        )}\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nFormInput.displayName = 'FormInput';\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\Modal.tsx","messages":[{"ruleId":"jsx-a11y/click-events-have-key-events","severity":1,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":98,"column":7,"nodeType":"JSXOpeningElement","endLine":106,"endColumn":8},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":112,"column":12,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":122,"endColumn":12,"fix":{"range":[2888,3189],"text":"showCloseButton ? <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={onClose}\r\n              className=\"h-8 w-8 p-0\"\r\n              aria-label=\"Close modal\"\r\n            >\r\n              <X className=\"h-4 w-4\" />\r\n            </Button> : null"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport { useFocusManagement } from '@/hooks/useFocusManagement';\r\nimport { Button } from '@/components/ui/button';\r\nimport { X } from 'lucide-react';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface ModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  title: string;\r\n  children: React.ReactNode;\r\n  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full';\r\n  showCloseButton?: boolean;\r\n  closeOnOverlayClick?: boolean;\r\n  closeOnEscape?: boolean;\r\n  className?: string;\r\n}\r\n\r\nconst sizeClasses = {\r\n  sm: 'max-w-sm',\r\n  md: 'max-w-md',\r\n  lg: 'max-w-lg',\r\n  xl: 'max-w-xl',\r\n  full: 'max-w-full mx-4'\r\n};\r\n\r\nexport function Modal({\r\n  isOpen,\r\n  onClose,\r\n  title,\r\n  children,\r\n  size = 'md',\r\n  showCloseButton = true,\r\n  closeOnOverlayClick = true,\r\n  closeOnEscape = true,\r\n  className\r\n}: ModalProps) {\r\n  const { modalRef } = useFocusManagement({\r\n    isOpen,\r\n    onClose,\r\n    focusFirstElement: true,\r\n    restoreFocus: true\r\n  });\r\n\r\n  // Handle escape key\r\n  useEffect(() => {\r\n    if (!isOpen || !closeOnEscape) return;\r\n\r\n    const handleEscape = (event: KeyboardEvent) => {\r\n      if (event.key === 'Escape') {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleEscape);\r\n    return () => document.removeEventListener('keydown', handleEscape);\r\n  }, [isOpen, onClose, closeOnEscape]);\r\n\r\n  // Handle overlay click\r\n  const handleOverlayClick = (event: React.MouseEvent) => {\r\n    if (closeOnOverlayClick && event.target === event.currentTarget) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  // Prevent body scroll when modal is open\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      document.body.style.overflow = 'hidden';\r\n    } else {\r\n      document.body.style.overflow = 'unset';\r\n    }\r\n\r\n    return () => {\r\n      document.body.style.overflow = 'unset';\r\n    };\r\n  }, [isOpen]);\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return createPortal(\r\n    <div\r\n      className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\"\r\n      onClick={handleOverlayClick}\r\n      onKeyDown={(event) => {\r\n        if (event.key === 'Enter' || event.key === ' ') {\r\n          handleOverlayClick(event as unknown as React.MouseEvent);\r\n        }\r\n      }}\r\n      role=\"dialog\"\r\n      aria-modal=\"true\"\r\n      aria-labelledby=\"modal-title\"\r\n      tabIndex={-1}\r\n    >\r\n      <div\r\n        ref={modalRef}\r\n        className={cn(\r\n          'bg-white rounded-lg shadow-lg w-full',\r\n          sizeClasses[size],\r\n          className\r\n        )}\r\n        onClick={(e) => e.stopPropagation()}\r\n      >\r\n        {/* Header */}\r\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\r\n          <h2 id=\"modal-title\" className=\"text-xl font-semibold text-gray-900\">\r\n            {title}\r\n          </h2>\r\n          {showCloseButton && (\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={onClose}\r\n              className=\"h-8 w-8 p-0\"\r\n              aria-label=\"Close modal\"\r\n            >\r\n              <X className=\"h-4 w-4\" />\r\n            </Button>\r\n          )}\r\n        </div>\r\n\r\n        {/* Content */}\r\n        <div className=\"p-6\">\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </div>,\r\n    document.body\r\n  );\r\n}\r\n\r\n// Confirmation Modal Component\r\ninterface ConfirmationModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onConfirm: () => void;\r\n  title: string;\r\n  message: string;\r\n  confirmText?: string;\r\n  cancelText?: string;\r\n  variant?: 'default' | 'destructive';\r\n  loading?: boolean;\r\n}\r\n\r\nexport function ConfirmationModal({\r\n  isOpen,\r\n  onClose,\r\n  onConfirm,\r\n  title,\r\n  message,\r\n  confirmText = 'Confirm',\r\n  cancelText = 'Cancel',\r\n  variant = 'default',\r\n  loading = false\r\n}: ConfirmationModalProps) {\r\n  return (\r\n    <Modal\r\n      isOpen={isOpen}\r\n      onClose={onClose}\r\n      title={title}\r\n      size=\"sm\"\r\n      closeOnOverlayClick={!loading}\r\n      closeOnEscape={!loading}\r\n    >\r\n      <div className=\"space-y-4\">\r\n        <p className=\"text-gray-600\">{message}</p>\r\n        <div className=\"flex gap-3 justify-end\">\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={onClose}\r\n            disabled={loading}\r\n          >\r\n            {cancelText}\r\n          </Button>\r\n          <Button\r\n            variant={variant === 'destructive' ? 'destructive' : 'default'}\r\n            onClick={onConfirm}\r\n            loading={loading}\r\n            disabled={loading}\r\n          >\r\n            {confirmText}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\alert.tsx","messages":[{"ruleId":"jsx-a11y/heading-has-content","severity":1,"message":"Headings must have content and the content must be accessible by a screen reader.","line":38,"column":3,"nodeType":"JSXOpeningElement","endLine":42,"endColumn":5}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst alertVariants = cva(\r\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-background text-foreground\",\r\n        destructive:\r\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nconst Alert = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\r\n>(({ className, variant, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    role=\"alert\"\r\n    className={cn(alertVariants({ variant }), className)}\r\n    {...props}\r\n  />\r\n))\r\nAlert.displayName = \"Alert\"\r\n\r\nconst AlertTitle = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLHeadingElement>\r\n>(({ className, ...props }, ref) => (\r\n  <h5\r\n    ref={ref}\r\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\r\n    {...props}\r\n  />\r\n))\r\nAlertTitle.displayName = \"AlertTitle\"\r\n\r\nconst AlertDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\r\n    {...props}\r\n  />\r\n))\r\nAlertDescription.displayName = \"AlertDescription\"\r\n\r\nexport { Alert, AlertTitle, AlertDescription }\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\button.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1958,1961],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1958,1961],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":68,"column":8,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":90,"endColumn":8,"fix":{"range":[2123,2794],"text":"loading ? <svg\r\n          className=\"animate-spin -ml-1 mr-2 h-4 w-4\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          aria-hidden=\"true\"\r\n        >\r\n          <circle\r\n            className=\"opacity-25\"\r\n            cx=\"12\"\r\n            cy=\"12\"\r\n            r=\"10\"\r\n            stroke=\"currentColor\"\r\n            strokeWidth=\"4\"\r\n          />\r\n          <path\r\n            className=\"opacity-75\"\r\n            fill=\"currentColor\"\r\n            d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\r\n          />\r\n        </svg> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":91,"column":8,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":95,"endColumn":8,"fix":{"range":[2804,2929],"text":"leftIcon && !loading ? <span className=\"mr-2\" aria-hidden=\"true\">\r\n          {leftIcon}\r\n        </span> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":97,"column":8,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":101,"endColumn":8,"fix":{"range":[2957,3084],"text":"rightIcon && !loading ? <span className=\"ml-2\" aria-hidden=\"true\">\r\n          {rightIcon}\r\n        </span> : null"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import React from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';\r\n  size?: 'default' | 'sm' | 'lg' | 'icon';\r\n  asChild?: boolean;\r\n  loading?: boolean;\r\n  leftIcon?: React.ReactNode;\r\n  rightIcon?: React.ReactNode;\r\n}\r\n\r\nexport function Button({ \r\n  variant = 'default', \r\n  size = 'default', \r\n  className = '', \r\n  children, \r\n  asChild = false,\r\n  loading = false,\r\n  leftIcon,\r\n  rightIcon,\r\n  disabled,\r\n  ...props \r\n}: ButtonProps) {\r\n  const baseClasses = 'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none';\r\n  \r\n  const variantClasses = {\r\n    default: 'bg-primary text-primary-foreground hover:bg-primary/90',\r\n    destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',\r\n    outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\r\n    secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\r\n    ghost: 'hover:bg-accent hover:text-accent-foreground',\r\n    link: 'text-primary underline-offset-4 hover:underline'\r\n  };\r\n  \r\n  const sizeClasses = {\r\n    default: 'h-10 px-4 py-2',\r\n    sm: 'h-9 rounded-md px-3',\r\n    lg: 'h-11 rounded-md px-8',\r\n    icon: 'h-10 w-10'\r\n  };\r\n  \r\n  const isDisabled = disabled || loading;\r\n  \r\n  const classes = cn(\r\n    baseClasses,\r\n    variantClasses[variant],\r\n    sizeClasses[size],\r\n    className\r\n  );\r\n  \r\n  if (asChild && React.isValidElement(children)) {\r\n    const childProps = children.props as { className?: string };\r\n    return React.cloneElement(children, {\r\n      ...props,\r\n      className: cn(childProps.className, classes),\r\n      disabled: isDisabled\r\n    } as any);\r\n  }\r\n  \r\n  return (\r\n    <button \r\n      className={classes} \r\n      disabled={isDisabled}\r\n      aria-disabled={isDisabled}\r\n      {...props}\r\n    >\r\n      {loading && (\r\n        <svg\r\n          className=\"animate-spin -ml-1 mr-2 h-4 w-4\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          aria-hidden=\"true\"\r\n        >\r\n          <circle\r\n            className=\"opacity-25\"\r\n            cx=\"12\"\r\n            cy=\"12\"\r\n            r=\"10\"\r\n            stroke=\"currentColor\"\r\n            strokeWidth=\"4\"\r\n          />\r\n          <path\r\n            className=\"opacity-75\"\r\n            fill=\"currentColor\"\r\n            d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\r\n          />\r\n        </svg>\r\n      )}\r\n      {leftIcon && !loading && (\r\n        <span className=\"mr-2\" aria-hidden=\"true\">\r\n          {leftIcon}\r\n        </span>\r\n      )}\r\n      {children}\r\n      {rightIcon && !loading && (\r\n        <span className=\"ml-2\" aria-hidden=\"true\">\r\n          {rightIcon}\r\n        </span>\r\n      )}\r\n    </button>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\checkbox.tsx","messages":[{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":70,"column":8,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":97,"endColumn":8,"fix":{"range":[1859,2670],"text":"(label || description) ? <div className=\"flex flex-col space-y-1\">\r\n          {label && (\r\n            <label \r\n              htmlFor={checkboxId}\r\n              className={cn(\r\n                'font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',\r\n                labelSizeClasses[size]\r\n              )}\r\n            >\r\n              {label}\r\n            </label>\r\n          )}\r\n          {description && (\r\n            <p className={cn(\r\n              'text-muted-foreground',\r\n              size === 'sm' ? 'text-xs' : 'text-sm'\r\n            )}>\r\n              {description}\r\n            </p>\r\n          )}\r\n          {error && (\r\n            <p className=\"text-sm text-destructive\">\r\n              {error}\r\n            </p>\r\n          )}\r\n        </div> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":72,"column":12,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":82,"endColumn":12,"fix":{"range":[1950,2281],"text":"label ? <label \r\n              htmlFor={checkboxId}\r\n              className={cn(\r\n                'font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',\r\n                labelSizeClasses[size]\r\n              )}\r\n            >\r\n              {label}\r\n            </label> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":83,"column":12,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":90,"endColumn":12,"fix":{"range":[2295,2512],"text":"description ? <p className={cn(\r\n              'text-muted-foreground',\r\n              size === 'sm' ? 'text-xs' : 'text-sm'\r\n            )}>\r\n              {description}\r\n            </p> : null"}},{"ruleId":"react/jsx-no-leaked-render","severity":1,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":91,"column":12,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":95,"endColumn":12,"fix":{"range":[2526,2644],"text":"error ? <p className=\"text-sm text-destructive\">\r\n              {error}\r\n            </p> : null"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import React from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface CheckboxProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'onChange'> {\r\n  label?: string;\r\n  description?: string;\r\n  error?: string;\r\n  size?: 'sm' | 'md' | 'lg';\r\n  onCheckedChange?: (checked: boolean) => void;\r\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nexport function Checkbox({ \r\n  className = '', \r\n  label,\r\n  description,\r\n  error,\r\n  size = 'md',\r\n  id,\r\n  onCheckedChange,\r\n  onChange,\r\n  ...props \r\n}: CheckboxProps) {\r\n  const checkboxId = id || `checkbox-${Math.random().toString(36).substr(2, 9)}`;\r\n  \r\n  const sizeClasses = {\r\n    sm: 'h-3 w-3',\r\n    md: 'h-4 w-4',\r\n    lg: 'h-5 w-5'\r\n  };\r\n  \r\n  const labelSizeClasses = {\r\n    sm: 'text-xs',\r\n    md: 'text-sm',\r\n    lg: 'text-base'\r\n  };\r\n  \r\n  const classes = cn(\r\n    'rounded border border-input bg-background text-primary shadow-sm transition-colors',\r\n    'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\r\n    'disabled:cursor-not-allowed disabled:opacity-50',\r\n    'data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',\r\n    sizeClasses[size],\r\n    className\r\n  );\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    // Call the standard onChange if provided\r\n    if (onChange) {\r\n      onChange(event);\r\n    }\r\n    \r\n    // Call the onCheckedChange if provided\r\n    if (onCheckedChange) {\r\n      onCheckedChange(event.target.checked);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"flex items-start space-x-2\">\r\n      <div className=\"flex items-center h-5\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id={checkboxId}\r\n          className={classes}\r\n          onChange={handleChange}\r\n          {...props}\r\n        />\r\n      </div>\r\n      {(label || description) && (\r\n        <div className=\"flex flex-col space-y-1\">\r\n          {label && (\r\n            <label \r\n              htmlFor={checkboxId}\r\n              className={cn(\r\n                'font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',\r\n                labelSizeClasses[size]\r\n              )}\r\n            >\r\n              {label}\r\n            </label>\r\n          )}\r\n          {description && (\r\n            <p className={cn(\r\n              'text-muted-foreground',\r\n              size === 'sm' ? 'text-xs' : 'text-sm'\r\n            )}>\r\n              {description}\r\n            </p>\r\n          )}\r\n          {error && (\r\n            <p className=\"text-sm text-destructive\">\r\n              {error}\r\n            </p>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Export a simple checkbox without label for cases where you just need the input\r\nexport function CheckboxInput({ \r\n  className = '', \r\n  size = 'md',\r\n  onCheckedChange,\r\n  onChange,\r\n  ...props \r\n}: Omit<CheckboxProps, 'label' | 'description' | 'error'>) {\r\n  const sizeClasses = {\r\n    sm: 'h-3 w-3',\r\n    md: 'h-4 w-4',\r\n    lg: 'h-5 w-5'\r\n  };\r\n  \r\n  const classes = cn(\r\n    'rounded border border-input bg-background text-primary shadow-sm transition-colors',\r\n    'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\r\n    'disabled:cursor-not-allowed disabled:opacity-50',\r\n    'data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',\r\n    sizeClasses[size],\r\n    className\r\n  );\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    // Call the standard onChange if provided\r\n    if (onChange) {\r\n      onChange(event);\r\n    }\r\n    \r\n    // Call the onCheckedChange if provided\r\n    if (onCheckedChange) {\r\n      onCheckedChange(event.target.checked);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <input\r\n      type=\"checkbox\"\r\n      className={classes}\r\n      onChange={handleChange}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useAttachments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useAutoAddedItems.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useBatchProcessing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useCalendarTemplates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useConfirmItems.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useDigestPreferences.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useErrorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useFocusManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useFormValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useHeartbeat.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useMealPlan.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useMealPlans.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\usePerformanceMonitoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\usePowerUps.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useRealTimeAI.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useRecipes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useShoppingListItems.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useShoppingLists.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useTodayView.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useUpgradeModal.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useUserData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useUserRole.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\hooks\\useWebSocket.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\instrumentation-client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\instrumentation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\addXp.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\ai\\choreAssignment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\ai\\config\\aiConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\ai\\emailProcessor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\ai\\services\\BaseAIService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\ai\\services\\BatchProcessor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\ai\\services\\MealPlanningAIService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\ai\\services\\RealTimeAIProcessor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\ai\\services\\ShoppingSuggestionsAIService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\ai\\services\\aiLearningService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\ai\\suggestionProcessor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\ai\\test\\testMealPlanningAI.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\ai\\test\\testShoppingAI.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\ai\\types\\learning.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\analytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\api-helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\api\\auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\api\\database.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\api\\errors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\api\\response.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\awardPoints.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\cache\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\calendar.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\calendar\\eventTemplates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\calendar\\rruleUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\chores.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\conflictDetectionService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\csrf-client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\debugUser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\design-system.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\digestDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\emailService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\entitlements.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\featureFlags.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\finance\\calendarIntegration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\finance\\receiptIntegration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\getUserData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\getUserRole.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\googleCalendar.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\logging\\logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\middleware\\featureFlags.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\monitoring\\PerformanceMonitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\monitoring\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\monitoring\\jobMetrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\ocr\\receiptOCRService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\offlineStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\performance.ts","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":206,"column":6,"nodeType":"Identifier","endLine":206,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array.","line":206,"column":6,"nodeType":"Identifier","endLine":206,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [name]","fix":{"range":[5748,5760],"text":"[name]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\planFeatures.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\postEvent.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\pushNotifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\quietHoursService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\react-query\\config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\reminders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\rewards.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\security\\apiProtection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\security\\config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\security\\csrf.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\security\\monitoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\security\\rateLimiter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\security\\sanitize.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\server\\addRecipeIngredients.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\server\\addRecipeIngredientsAuto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\server\\canAccessFeature.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\server\\confirmAutoAddedItems.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\server\\getPendingConfirmations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\server\\mergeDuplicateItems.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\server\\supabaseAdmin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\server\\updateShoppingListCounts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\services\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\services\\meal\\MealService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\shoppingLists.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\stripe.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\supabaseClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\supabase\\rewardHistory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\supabase\\rewards.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\supabase\\rewardsServer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\syncUser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\useGameMode.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\users.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\validation\\schemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\lib\\websocket\\WebSocketServer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\middleware.ts","messages":[{"ruleId":"prefer-template","severity":1,"message":"Unexpected string concatenation.","line":69,"column":55,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":69,"endColumn":66,"fix":{"range":[2929,2940],"text":"`${route  }/`"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { clerkMiddleware } from \"@clerk/nextjs/server\";\r\nimport { NextResponse } from \"next/server\";\r\nimport { getUserHouseholdId, getUserOnboardingStatus } from \"@/lib/api/database\";\r\n\r\nexport default clerkMiddleware(async (auth, req) => {\r\n  const url = new URL(req.url);\r\n  \r\n  // Create response to add security headers\r\n  const response = NextResponse.next();\r\n  \r\n  // Add comprehensive security headers\r\n  response.headers.set('X-Frame-Options', 'DENY');\r\n  response.headers.set('X-Content-Type-Options', 'nosniff');\r\n  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\r\n  response.headers.set('X-XSS-Protection', '1; mode=block');\r\n  response.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');\r\n  \r\n  // Content Security Policy - Re-enabled with proper Clerk domains\r\n  response.headers.set('Content-Security-Policy',\r\n    \"default-src 'self'; \" +\r\n    \"script-src 'self' 'unsafe-inline' 'unsafe-eval' https://*.clerk.com https://*.clerk.accounts.dev https://va.vercel-scripts.com; \" +\r\n    \"worker-src 'self' blob:; \" +\r\n    \"style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; \" +\r\n    \"img-src 'self' data: https: blob:; \" +\r\n    \"font-src 'self' https://fonts.gstatic.com data:; \" +\r\n    \"connect-src 'self' https://*.clerk.com https://*.clerk.accounts.dev https://*.supabase.co https://*.vercel.com https://va.vercel-analytics.com; \" +\r\n    \"frame-src 'self' https://*.clerk.com https://*.clerk.accounts.dev; \" +\r\n    \"object-src 'none'; \" +\r\n    \"base-uri 'self'; \" +\r\n    \"form-action 'self'\"\r\n  );\r\n  \r\n  // Add HSTS header for all requests (will be ignored on HTTP)\r\n  response.headers.set('Strict-Transport-Security', 'max-age=31536000; includeSubDomains; preload');\r\n  \r\n  // Get user authentication info - this is crucial for Clerk to work\r\n  const { userId } = await auth();\r\n  \r\n  // Skip onboarding check for specific routes\r\n  const staticAssetPattern = /\\.(?:svg|png|jpg|jpeg|gif|webp|ico|css|js|txt|xml|json|map|woff|woff2|ttf|otf)$/i;\r\n  const skipOnboardingCheck = \r\n    url.pathname.startsWith('/dev/') ||\r\n    url.pathname === '/onboarding' ||\r\n    url.pathname.startsWith('/onboarding/') ||\r\n    url.pathname.startsWith('/sign-in') ||\r\n    url.pathname.startsWith('/sign-up') ||\r\n    url.pathname.startsWith('/_next/') ||\r\n    url.pathname === '/favicon.ico' ||\r\n    staticAssetPattern.test(url.pathname) ||\r\n    url.pathname === '/' ||\r\n    url.pathname.startsWith('/user-button') ||\r\n    url.pathname.startsWith('/fonts/');\r\n\r\n  // Protected routes that require authentication\r\n  const protectedRoutes = [\r\n    '/dashboard',\r\n    '/shopping-lists',\r\n    '/chores',\r\n    '/bills',\r\n    '/meal-planner',\r\n    '/recipes',\r\n    '/rewards',\r\n    '/calendar',\r\n    '/inbox'\r\n  ];\r\n\r\n  // Check if current path is protected\r\n  const isProtectedRoute = protectedRoutes.some(route => \r\n    url.pathname === route || url.pathname.startsWith(route + '/')\r\n  );\r\n\r\n  // Skip API routes from redirect logic - let them handle auth themselves\r\n  if (url.pathname.startsWith('/api/')) {\r\n    return response;\r\n  }\r\n\r\n  // Redirect to sign-in if accessing protected route without authentication\r\n  if (isProtectedRoute && !userId) {\r\n    const signInUrl = new URL('/sign-in', req.url);\r\n    signInUrl.searchParams.set('redirect_url', req.url);\r\n    return NextResponse.redirect(signInUrl);\r\n  }\r\n  \r\n  // Check onboarding status for signed-in users on app routes (but NOT API routes)\r\n  if (userId && !skipOnboardingCheck) {\r\n    try {\r\n      const [hasHousehold, hasOnboarded] = await Promise.all([\r\n        getUserHouseholdId(userId),\r\n        getUserOnboardingStatus(userId)\r\n      ]);\r\n\r\n      if ((!hasHousehold || !hasOnboarded) && !url.pathname.startsWith('/onboarding')) {\r\n        const onboardingUrl = new URL('/onboarding', req.url);\r\n        onboardingUrl.searchParams.set('redirect', url.pathname);\r\n        return NextResponse.redirect(onboardingUrl);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error in onboarding check middleware:', error);\r\n    }\r\n  }\r\n  \r\n  return response;\r\n});\r\n\r\nexport const config = {\r\n  matcher: [\r\n    /*\r\n     * Match all request paths except for the ones starting with:\r\n     * - _next/static (static files)\r\n     * - _next/image (image optimization files)\r\n     * - favicon.ico (favicon file)\r\n     * - public folder\r\n     */\r\n    \"/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)\",\r\n    \"/\",\r\n    \"/(api|trpc)(.*)\"\r\n  ],\r\n}; ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\pages\\admin\\metrics.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1165,1168],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1165,1168],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2098,2101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2098,2101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import useSWR from 'swr';\r\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\r\nimport { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@/components/ui/table';\r\n\r\nconst fetcher = (url: string) => fetch(url).then(res => res.json());\r\n\r\nexport default function AdminMetricsPage() {\r\n  const { data, error } = useSWR('/api/metrics/summary', fetcher, { refreshInterval: 60000 });\r\n\r\n  if (error) {\r\n    return <div className=\"p-6\">Failed to load metrics.</div>;\r\n  }\r\n\r\n  if (!data) {\r\n    return <div className=\"p-6\">Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-6 space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>API Performance</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead>Route</TableHead>\r\n                <TableHead>Success Rate</TableHead>\r\n                <TableHead>P95 Latency</TableHead>\r\n                <TableHead>Total Requests</TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {data.api.map((row: any) => (\r\n                <TableRow key={row.route}>\r\n                  <TableCell>{row.route}</TableCell>\r\n                  <TableCell>{row.successRate}%</TableCell>\r\n                  <TableCell>{row.p95} ms</TableCell>\r\n                  <TableCell>{row.total}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Job Queue</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead>Job</TableHead>\r\n                <TableHead>Success Rate</TableHead>\r\n                <TableHead>Average Duration</TableHead>\r\n                <TableHead>Queue Depth</TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {data.jobs.map((row: any) => (\r\n                <TableRow key={row.job}>\r\n                  <TableCell>{row.job}</TableCell>\r\n                  <TableCell>{row.successRate}%</TableCell>\r\n                  <TableCell>{row.avgDuration} ms</TableCell>\r\n                  <TableCell>{row.queueDepth}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\scripts\\runMigrations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\test\\api\\analyticsTrack.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\test\\api\\recipesImport.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\test\\forms.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\test\\housing.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\test\\middleware.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\test\\migration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\test\\notifications.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_base64' is assigned a value but never used.","line":104,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach } from 'vitest'\r\n\r\n// Mock the Notification API\r\nconst mockNotification = {\r\n  permission: 'default' as NotificationPermission,\r\n  requestPermission: vi.fn(() => Promise.resolve('granted' as NotificationPermission))\r\n}\r\n\r\n// Mock navigator and window objects for push notifications\r\nconst mockNavigator = {\r\n  serviceWorker: {\r\n    ready: Promise.resolve({\r\n      pushManager: {\r\n        subscribe: vi.fn(() => Promise.resolve({\r\n          endpoint: 'https://fcm.googleapis.com/fcm/send/test-endpoint',\r\n          keys: {\r\n            p256dh: 'test-p256dh-key',\r\n            auth: 'test-auth-key'\r\n          }\r\n        }))\r\n      }\r\n    }),\r\n    addEventListener: vi.fn(),\r\n    getRegistration: vi.fn(() => Promise.resolve({\r\n      pushManager: {\r\n        getSubscription: vi.fn(() => Promise.resolve(null))\r\n      }\r\n    }))\r\n  }\r\n}\r\n\r\n// Mock global objects\r\nObject.defineProperty(globalThis, 'Notification', {\r\n  value: mockNotification,\r\n  writable: true\r\n})\r\n\r\nObject.defineProperty(globalThis, 'navigator', {\r\n  value: mockNavigator,\r\n  writable: true\r\n})\r\n\r\ndescribe('Push Notifications', () => {\r\n  beforeEach(() => {\r\n    vi.clearAllMocks()\r\n  })\r\n\r\n  describe('Notification Permission', () => {\r\n    it('should check notification permission status', () => {\r\n      expect(mockNotification.permission).toBe('default')\r\n    })\r\n\r\n    it('should request notification permission', async () => {\r\n      const permission = await mockNotification.requestPermission()\r\n      expect(permission).toBe('granted')\r\n      expect(mockNotification.requestPermission).toHaveBeenCalled()\r\n    })\r\n\r\n    it('should handle permission states', () => {\r\n      const permissionStates: NotificationPermission[] = ['default', 'granted', 'denied']\r\n      \r\n      permissionStates.forEach(state => {\r\n        expect(['default', 'granted', 'denied']).toContain(state)\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('Push Subscription', () => {\r\n    it('should create push subscription', async () => {\r\n      const registration = await mockNavigator.serviceWorker.ready\r\n      const subscription = await registration.pushManager.subscribe({\r\n        userVisibleOnly: true,\r\n        applicationServerKey: 'test-vapid-key'\r\n      })\r\n\r\n      expect(subscription.endpoint).toBe('https://fcm.googleapis.com/fcm/send/test-endpoint')\r\n      expect(subscription.keys.p256dh).toBe('test-p256dh-key')\r\n      expect(subscription.keys.auth).toBe('test-auth-key')\r\n    })\r\n\r\n    it('should handle subscription data format', () => {\r\n      const subscriptionData = {\r\n        endpoint: 'https://fcm.googleapis.com/fcm/send/test-endpoint',\r\n        keys: {\r\n          p256dh: 'test-p256dh-key',\r\n          auth: 'test-auth-key'\r\n        }\r\n      }\r\n\r\n      // Validate subscription structure\r\n      expect(subscriptionData.endpoint).toMatch(/^https:\\/\\//)\r\n      expect(subscriptionData.keys.p256dh).toBeTruthy()\r\n      expect(subscriptionData.keys.auth).toBeTruthy()\r\n    })\r\n  })\r\n\r\n  describe('VAPID Key Conversion', () => {\r\n    it('should convert base64 VAPID key to Uint8Array', () => {\r\n      const base64Key = 'BGcCAoQJ9ObXoN81fkX_xB3RN8eYIdsOpkIQH6g4xHme8uTnnpYrOpP6s5eRB2EniOdf78oKstPbM5hF_U91GTQ'\r\n      \r\n      // Mock the conversion function\r\n      const urlB64ToUint8Array = (base64String: string) => {\r\n        const padding = '='.repeat((4 - base64String.length % 4) % 4)\r\n        const _base64 = (base64String + padding)\r\n          .replace(/-/g, '+')\r\n          .replace(/_/g, '/')\r\n\r\n        // In a real implementation, this would use atob\r\n        // For testing, we'll just return a mock Uint8Array\r\n        return new Uint8Array(65) // VAPID keys are 65 bytes\r\n      }\r\n\r\n      const result = urlB64ToUint8Array(base64Key)\r\n      expect(result).toBeInstanceOf(Uint8Array)\r\n      expect(result.length).toBe(65)\r\n    })\r\n  })\r\n\r\n  describe('Notification Settings', () => {\r\n    it('should handle notification preferences', () => {\r\n      const defaultSettings = {\r\n        choreReminders: true,\r\n        mealPlanningReminders: true,\r\n        shoppingListUpdates: true,\r\n        achievementNotifications: true,\r\n        householdUpdates: true,\r\n      }\r\n\r\n      // Validate default settings structure\r\n      Object.values(defaultSettings).forEach(value => {\r\n        expect(typeof value).toBe('boolean')\r\n      })\r\n    })\r\n\r\n    it('should validate setting keys', () => {\r\n      const validSettingKeys = [\r\n        'choreReminders',\r\n        'mealPlanningReminders',\r\n        'shoppingListUpdates',\r\n        'achievementNotifications',\r\n        'householdUpdates'\r\n      ]\r\n\r\n      validSettingKeys.forEach(key => {\r\n        expect(key).toMatch(/^[a-zA-Z]+$/)\r\n        expect(key.length).toBeGreaterThan(0)\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('Notification Payload', () => {\r\n    it('should create valid notification payload', () => {\r\n      const notificationPayload = {\r\n        title: 'Test Notification',\r\n        body: 'This is a test notification',\r\n        icon: '/icons/icon-192x192.png',\r\n        badge: '/icons/icon-72x72.png',\r\n        tag: 'test-notification',\r\n        url: '/dashboard',\r\n        timestamp: Date.now(),\r\n        requireInteraction: false,\r\n        silent: false,\r\n      }\r\n\r\n      // Validate payload structure\r\n      expect(notificationPayload.title).toBeTruthy()\r\n      expect(notificationPayload.body).toBeTruthy()\r\n      expect(notificationPayload.icon).toMatch(/^\\//)\r\n      expect(notificationPayload.badge).toMatch(/^\\//)\r\n      expect(notificationPayload.tag).toBeTruthy()\r\n      expect(notificationPayload.url).toMatch(/^\\//)\r\n      expect(typeof notificationPayload.timestamp).toBe('number')\r\n      expect(typeof notificationPayload.requireInteraction).toBe('boolean')\r\n      expect(typeof notificationPayload.silent).toBe('boolean')\r\n    })\r\n\r\n    it('should validate notification types', () => {\r\n      const notificationTypes = [\r\n        { tag: 'chore-reminder', category: 'chores' },\r\n        { tag: 'meal-planning', category: 'meals' },\r\n        { tag: 'shopping', category: 'shopping' },\r\n        { tag: 'achievement', category: 'rewards' },\r\n        { tag: 'household', category: 'general' }\r\n      ]\r\n\r\n      notificationTypes.forEach(type => {\r\n        expect(type.tag).toBeTruthy()\r\n        expect(type.category).toBeTruthy()\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('Service Worker Integration', () => {\r\n    it('should check service worker support', () => {\r\n      expect('serviceWorker' in mockNavigator).toBe(true)\r\n    })\r\n\r\n    it('should handle service worker registration', async () => {\r\n      const registration = await mockNavigator.serviceWorker.ready\r\n      expect(registration).toBeDefined()\r\n      expect(registration.pushManager).toBeDefined()\r\n    })\r\n  })\r\n\r\n  describe('Error Handling', () => {\r\n    it('should handle subscription errors gracefully', async () => {\r\n      // Mock a subscription error\r\n      const mockError = new Error('Subscription failed')\r\n      mockNavigator.serviceWorker.ready = Promise.reject(mockError)\r\n\r\n      try {\r\n        await mockNavigator.serviceWorker.ready\r\n      } catch (error) {\r\n        expect(error).toBeInstanceOf(Error)\r\n        expect((error as Error).message).toBe('Subscription failed')\r\n      }\r\n    })\r\n\r\n    it('should handle permission denial', () => {\r\n      mockNotification.permission = 'denied'\r\n      expect(mockNotification.permission).toBe('denied')\r\n    })\r\n  })\r\n})\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\test\\pwa.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\test\\security.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\test\\setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\test\\validation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\types\\database.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\types\\global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"C:\\Users\\tomly\\Desktop\\home-management-app\\src\\types\\supabase.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1397,1400],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1397,1400],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1626,1629],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1626,1629],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1860,1863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1860,1863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2168,2171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2168,2171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2193,2196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2193,2196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2528,2531],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2528,2531],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2553,2556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2553,2556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2894,2897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2894,2897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2920,2923],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2920,2923],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3278,3281],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3278,3281],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3730,3733],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3730,3733],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":159,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4188,4191],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4188,4191],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":182,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4812,4815],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4812,4815],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5315,5318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5315,5318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":218,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":218,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5824,5827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5824,5827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Basic Supabase types for the home management app\r\n// This is a simplified version - you can generate the full types from your Supabase schema later\r\n\r\nexport interface Database {\r\n  public: {\r\n    Tables: {\r\n      households: {\r\n        Row: {\r\n          id: string;\r\n          name: string;\r\n          plan: string;\r\n          game_mode: string;\r\n          created_at: string;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          name: string;\r\n          plan?: string;\r\n          game_mode?: string;\r\n          created_at?: string;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          name?: string;\r\n          plan?: string;\r\n          game_mode?: string;\r\n          created_at?: string;\r\n        };\r\n      };\r\n      household_members: {\r\n        Row: {\r\n          household_id: string;\r\n          user_id: string;\r\n          role: string;\r\n          created_at: string;\r\n        };\r\n        Insert: {\r\n          household_id: string;\r\n          user_id: string;\r\n          role: string;\r\n          created_at?: string;\r\n        };\r\n        Update: {\r\n          household_id?: string;\r\n          user_id?: string;\r\n          role?: string;\r\n          created_at?: string;\r\n        };\r\n      };\r\n      household_events: {\r\n        Row: {\r\n          id: string;\r\n          household_id: string;\r\n          type: string;\r\n          source: string;\r\n          payload: any;\r\n          occurred_at: string;\r\n          created_at: string;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          household_id: string;\r\n          type: string;\r\n          source: string;\r\n          payload?: any;\r\n          occurred_at?: string;\r\n          created_at?: string;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          household_id?: string;\r\n          type?: string;\r\n          source?: string;\r\n          payload?: any;\r\n          occurred_at?: string;\r\n          created_at?: string;\r\n        };\r\n      };\r\n      automation_rules: {\r\n        Row: {\r\n          id: string;\r\n          household_id: string;\r\n          name: string;\r\n          description?: string;\r\n          trigger_types: string[];\r\n          conditions: any;\r\n          actions: any[];\r\n          enabled: boolean;\r\n          created_by: string;\r\n          created_at: string;\r\n          updated_at: string;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          household_id: string;\r\n          name: string;\r\n          description?: string;\r\n          trigger_types: string[];\r\n          conditions?: any;\r\n          actions: any[];\r\n          enabled?: boolean;\r\n          created_by: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          household_id?: string;\r\n          name?: string;\r\n          description?: string;\r\n          trigger_types?: string[];\r\n          conditions?: any;\r\n          actions?: any[];\r\n          enabled?: boolean;\r\n          created_by?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n        };\r\n      };\r\n      automation_jobs: {\r\n        Row: {\r\n          id: string;\r\n          household_id: string;\r\n          rule_id?: string;\r\n          event_id?: string;\r\n          action: string;\r\n          params: any;\r\n          dedupe_key?: string;\r\n          status: string;\r\n          attempts: number;\r\n          max_attempts: number;\r\n          last_error?: string;\r\n          created_at: string;\r\n          processed_at?: string;\r\n          scheduled_for?: string;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          household_id: string;\r\n          rule_id?: string;\r\n          event_id?: string;\r\n          action: string;\r\n          params?: any;\r\n          dedupe_key?: string;\r\n          status?: string;\r\n          attempts?: number;\r\n          max_attempts?: number;\r\n          last_error?: string;\r\n          created_at?: string;\r\n          processed_at?: string;\r\n          scheduled_for?: string;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          household_id?: string;\r\n          rule_id?: string;\r\n          event_id?: string;\r\n          action?: string;\r\n          params?: any;\r\n          dedupe_key?: string;\r\n          status?: string;\r\n          attempts?: number;\r\n          max_attempts?: number;\r\n          last_error?: string;\r\n          created_at?: string;\r\n          processed_at?: string;\r\n          scheduled_for?: string;\r\n        };\r\n      };\r\n      bills: {\r\n        Row: {\r\n          id: string;\r\n          household_id: string;\r\n          name: string;\r\n          amount: number;\r\n          currency: string;\r\n          due_date: string;\r\n          status: string;\r\n          category?: string;\r\n          description?: string;\r\n          source: string;\r\n          source_data?: any;\r\n          assigned_to?: string;\r\n          created_by: string;\r\n          created_at: string;\r\n          updated_at: string;\r\n          paid_at?: string;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          household_id: string;\r\n          name: string;\r\n          amount: number;\r\n          currency?: string;\r\n          due_date: string;\r\n          status?: string;\r\n          category?: string;\r\n          description?: string;\r\n          source?: string;\r\n          source_data?: any;\r\n          assigned_to?: string;\r\n          created_by: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          paid_at?: string;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          household_id?: string;\r\n          name?: string;\r\n          amount?: number;\r\n          currency?: string;\r\n          due_date?: string;\r\n          status?: string;\r\n          category?: string;\r\n          description?: string;\r\n          source?: string;\r\n          source_data?: any;\r\n          assigned_to?: string;\r\n          created_by?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          paid_at?: string;\r\n        };\r\n      };\r\n      notifications: {\r\n        Row: {\r\n          id: string;\r\n          household_id: string;\r\n          user_id: string;\r\n          title: string;\r\n          message: string;\r\n          type: string;\r\n          category?: string;\r\n          read: boolean;\r\n          action_url?: string;\r\n          created_at: string;\r\n          read_at?: string;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          household_id: string;\r\n          user_id: string;\r\n          title: string;\r\n          message: string;\r\n          type?: string;\r\n          category?: string;\r\n          read?: boolean;\r\n          action_url?: string;\r\n          created_at?: string;\r\n          read_at?: string;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          household_id?: string;\r\n          user_id?: string;\r\n          title?: string;\r\n          message?: string;\r\n          type?: string;\r\n          category?: string;\r\n          read?: boolean;\r\n          action_url?: string;\r\n          created_at?: string;\r\n          read_at?: string;\r\n        };\r\n      };\r\n      users: {\r\n        Row: {\r\n          id: string;\r\n          clerk_id: string;\r\n          email: string;\r\n          role: string;\r\n          xp: number;\r\n          coins: number;\r\n          household_id?: string;\r\n          has_onboarded: boolean;\r\n          created_at: string;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          clerk_id: string;\r\n          email: string;\r\n          role: string;\r\n          xp?: number;\r\n          coins?: number;\r\n          household_id?: string;\r\n          has_onboarded?: boolean;\r\n          created_at?: string;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          clerk_id?: string;\r\n          email?: string;\r\n          role?: string;\r\n          xp?: number;\r\n          coins?: number;\r\n          household_id?: string;\r\n          has_onboarded?: boolean;\r\n          created_at?: string;\r\n        };\r\n      };\r\n    };\r\n  };\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]}]